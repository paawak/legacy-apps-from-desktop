/*
 * GenerateHTML.java
 *
 * Created on March 12, 2004, 3:40 AM
 */

/**
 *
 * @author  paawak
 */

package com.swayam.bhasha.oldview.io;

import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

import org.apache.log4j.Logger;

import com.swayam.bhasha.BhashaLauncher;
import com.swayam.bhasha.engine.io.parsers.JavaDocumentReader;
import com.swayam.bhasha.engine.io.writers.DocGenerationException;
import com.swayam.bhasha.engine.io.writers.DocGenerator;
import com.swayam.bhasha.engine.io.writers.SaveFormat;
import com.swayam.bhasha.engine.io.writers.impl.DocGeneratorFactory;
import com.swayam.bhasha.model.html.HTMLDocModel;
import com.swayam.bhasha.oldview.PageContainer;
import com.swayam.bhasha.utils.page.IndicPane;

public class GenerateOutput extends javax.swing.JDialog {

    private static final long serialVersionUID = 5219049830517037567L;

    private static final Logger log = Logger.getLogger(GenerateOutput.class);

    private static final Object fileGenLock = new Object();

    private final PageContainer pageCont;

    public GenerateOutput(boolean modal, PageContainer pageCont, String saveFormat) {
        super(BhashaLauncher.VIEW_INSTANCE, modal);
        initComponents();

        this.saveFormat = saveFormat;
        this.pageCont = pageCont;

        if (saveFormat.equals(RTF_FORMAT)) {
            setTitle("Generate RTF File");
            lbFileName.setText("Location of the RTF File :");
            btGenerateOutput.setText("Generate RTF File");
            lbHelp.setVisible(false);
        } else if (saveFormat.equals(IMAGE_JPEG_FORMAT)) {
            setTitle("Generate JPEG Image File");
            lbFileName.setText("Location of the JPEG File :");
            btGenerateOutput.setText("Generate JPEG File");
            lbHelp.setVisible(false);
        } else if (saveFormat.equals(XML_FORMAT)) {
            setTitle("Generate XML File");
            lbFileName.setText("Location of the XML File :");
            btGenerateOutput.setText("Generate XML File");
            lbHelp.setVisible(false);
        } else if (saveFormat.equals(PDF_FORMAT)) {
            setTitle("Generate PDF File");
            lbFileName.setText("Location of the PDF File :");
            btGenerateOutput.setText("Generate PDF File");
            lbHelp.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbFileName = new javax.swing.JLabel();
        txtFileLoc = new javax.swing.JTextField();
        btBrowse = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btGenerateOutput = new javax.swing.JButton();
        pnlInvisibleFiller = new javax.swing.JPanel();
        lbHelp = new javax.swing.JLabel();

        setTitle("Genearte HTML Bangla File");
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setMinimumSize(new java.awt.Dimension(400, 175));
        jPanel2.setPreferredSize(new java.awt.Dimension(400, 175));
        lbFileName.setText("Location of HTML File :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanel2.add(lbFileName, gridBagConstraints);

        txtFileLoc.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        jPanel2.add(txtFileLoc, gridBagConstraints);

        btBrowse.setMnemonic('b');
        btBrowse.setText("Browse");
        btBrowse.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btBrowseKeyReleased(evt);
            }
        });
        btBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btBrowseMouseReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 20);
        jPanel2.add(btBrowse, gridBagConstraints);

        jPanel1.add(jPanel2);

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));
        jPanel3.setMinimumSize(new java.awt.Dimension(400, 125));
        jPanel3.setPreferredSize(new java.awt.Dimension(400, 125));
        btGenerateOutput.setMnemonic('g');
        btGenerateOutput.setText("Generate HTML File");
        btGenerateOutput.setEnabled(false);
        btGenerateOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGenerateOutputActionPerformed(evt);
            }
        });

        jPanel3.add(btGenerateOutput);

        pnlInvisibleFiller.setBackground(new java.awt.Color(204, 204, 255));
        pnlInvisibleFiller.setMinimumSize(new java.awt.Dimension(400, 10));
        pnlInvisibleFiller.setPreferredSize(new java.awt.Dimension(400, 10));
        jPanel3.add(pnlInvisibleFiller);

        lbHelp.setForeground(new java.awt.Color(0, 0, 16));
        lbHelp.setText("<html>* You need to install True Type Font File solaimanlipi.ttf to use this. <br>\nOtherwise, the fonts will not be rendered at all.</html>");
        jPanel3.add(lbHelp);

        jPanel1.add(jPanel3);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width - 400) / 2, (screenSize.height - 300) / 2, 400, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void btBrowseMouseReleased(java.awt.event.MouseEvent evt) {// GEN-
        // FIRST:
        // event_btBrowseMouseReleased
        // Add your handling code here:
        getFileLocation();
    }// GEN-LAST:event_btBrowseMouseReleased

    private void btBrowseKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:
        // event_btBrowseKeyReleased
        // Add your handling code here:
        getFileLocation();
    }// GEN-LAST:event_btBrowseKeyReleased

    private void btGenerateOutputActionPerformed(java.awt.event.ActionEvent evt) {// GEN
        // -
        // FIRST
        // :
        // event_btGenerateOutputActionPerformed
        // Add your handling code here:
        write(pageCont, saveFormat, chosenFile, true);
        setVisible(false);
        dispose();
    }// GEN-LAST:event_btGenerateOutputActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {// GEN-FIRST:
        // event_closeDialog
        setVisible(false);
        dispose();
    }// GEN-LAST:event_closeDialog

    private void getFileLocation() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(filter);
        String fileChooserTitle = null;

        if (saveFormat == HTML_FORMAT)
            fileChooserTitle = "Choose the location for the HTML file";
        else if (saveFormat == IMAGE_JPEG_FORMAT)
            fileChooserTitle = "Choose the location for the JPEG file";
        else if (saveFormat == RTF_FORMAT)
            fileChooserTitle = "Choose the location for the RTF file";
        else if (saveFormat == XML_FORMAT)
            fileChooserTitle = "Choose the location for the XML file";

        fileChooser.setDialogTitle(fileChooserTitle);
        int returnVal = fileChooser.showSaveDialog(GenerateOutput.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            chosenFile = fileChooser.getSelectedFile();
            if (validExtension(chosenFile)) {
                if (checkFileExists(chosenFile)) {
                    // System.out.println("EXISTS");
                    int option = JOptionPane.showConfirmDialog(this, "Do you want to replace the existing file? If you chose yes, the current data will be lost", "A file called "
                            + chosenFile.getName() + " alredy exists.", JOptionPane.YES_NO_OPTION);

                    if (option == JOptionPane.YES_OPTION) {
                        // System.out.println("REPLACE");
                        txtFileLoc.setText(chosenFile.getAbsolutePath());
                        btGenerateOutput.setEnabled(true);
                    } else {
                        // System.out.println("DO NOT REPLACE");

                        btGenerateOutput.setEnabled(false);
                        chosenFile = null;
                    }

                }// end if chckfile
                else {
                    txtFileLoc.setText(chosenFile.getAbsolutePath());
                    btGenerateOutput.setEnabled(true);
                }
            } else
                JOptionPane.showMessageDialog(this, "Please save the file with a valid extension corresponding to the file type you are saving",
                        "File cannot be saved in the requested location", JOptionPane.ERROR_MESSAGE);
        }// end if

    }

    private boolean checkFileExists(File chosenFile) {

        boolean exists = true;

        try {
            FileInputStream fis = new FileInputStream(chosenFile);
            fis.close();
            fis = null;
        } catch (FileNotFoundException e) {
            exists = false;
        } catch (Exception e) {
        }

        return exists;

    }

    private boolean validExtension(File fileName) {

        String extension = filter.getExtension(fileName);
        List<String> validExtensions = FILE_EXTENSION_MAP.get(saveFormat);

        if (extension != null) {
            if (validExtensions.contains(extension)) {
                return true;
            } else {
                return false;
            }
        } else {
            chosenFile = new File(chosenFile.getAbsolutePath() + "." + validExtensions.get(0));
            return true;
        }
    }

    /**
     * Saves the file "silently", displays no error on fail, only logs the error
     * in the log file. Call this method if you want to save in the same thread
     * and repeatedly.
     * 
     * @param toWrite
     * @throws Exception
     */
    public static void write(PageContainer pageCont, String saveFormat, File toWrite) {
        write(pageCont, saveFormat, toWrite, false);
    }

    /**
     * 
     * @param saveFormat
     * @param toWrite
     * @param warnOnFail
     *            If true, writes to file on a separate thread and displays a
     *            error message on fail.
     */
    public static void write(PageContainer pageCont, String saveFormat, File toWrite, boolean warnOnFail) {

        log.info("##########################################generator(): TRYING TO SAVE TO: " + toWrite + ". It will be saved in format " + saveFormat);

        List<HTMLDocModel> docModels = null;
        try {
            docModels = getPageModels(pageCont.getPageVector());
        } catch (DocGenerationException e) {
            log.fatal("Could not get create a model", e);
        }

        // TODO: get dimension from the user
        DocGeneratorFactory fact = new DocGeneratorFactory(docModels, pageCont.getPageDimension());

        DocGenerator docGenerator = null;

        if (IMAGE_JPEG_FORMAT.equals(saveFormat)) {

            docGenerator = fact.getGenerator(SaveFormat.IMAGE_JPEG);

        } else if (HTML_FORMAT.equals(saveFormat) || XML_FORMAT.equals(saveFormat)) {

            docGenerator = fact.getGenerator(SaveFormat.XHTML);

        } else if (RTF_FORMAT.equals(saveFormat)) {

            docGenerator = fact.getGenerator(SaveFormat.RTF);

        } else if (PDF_FORMAT.equals(saveFormat)) {

            docGenerator = fact.getGenerator(SaveFormat.PDF);

        }

        if (warnOnFail) {

            BhashaFileGenerator bhashaFileGenerator = new BhashaFileGenerator(docGenerator, toWrite);
            Thread fileGenThread = new Thread(bhashaFileGenerator, "FileGenThread");

            BhashaLauncher.VIEW_INSTANCE.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            fileGenThread.start();

            synchronized (fileGenLock) {

                while (!bhashaFileGenerator.finished) {
                    try {
                        fileGenLock.wait();
                    } catch (InterruptedException e) {
                        log.warn("in generator(), InterruptedException: " + e.getMessage());
                    }
                }

            }

            BhashaLauncher.VIEW_INSTANCE.setCursor(Cursor.getDefaultCursor());

            if (bhashaFileGenerator.writeSuccess) {

                JOptionPane.showMessageDialog(BhashaLauncher.VIEW_INSTANCE, "File Saved successfully", "Congrats!", JOptionPane.INFORMATION_MESSAGE);

            } else {

                JOptionPane.showMessageDialog(BhashaLauncher.VIEW_INSTANCE, "The file could not be saved. Details:\n" + bhashaFileGenerator.failMessage, "Sorry",
                        JOptionPane.ERROR_MESSAGE);

            }

        } else {

            try {
                docGenerator.generate(toWrite);
                log.info("##########################################generator(): save SUCCESSFUL");
            } catch (DocGenerationException e) {
                log.error("Could not save file in silent mode", e);
            }

        }

    }

    public static List<HTMLDocModel> getPageModels(List<IndicPane> pages) throws DocGenerationException {

        List<HTMLDocModel> docModels = new ArrayList<HTMLDocModel>(pages.size());

        for (IndicPane page : pages) {

            HTMLDocModel htmlDoc = JavaDocumentReader.getHtmlModel(page.getDocument(), page.getText());
            docModels.add(htmlDoc);

        }

        return docModels;

    }

    private static class BhashaFileGenerator implements Runnable {

        private final DocGenerator docGenerator;
        private final File toWrite;

        boolean writeSuccess = false;
        String failMessage = "";
        boolean finished = false;

        BhashaFileGenerator(DocGenerator docGenerator, File toWrite) {
            this.docGenerator = docGenerator;
            this.toWrite = toWrite;
        }

        public void run() {

            try {
                docGenerator.generate(toWrite);
                writeSuccess = true;
                log.info("##########################################generator(): save SUCCESSFUL");
            } catch (DocGenerationException e) {
                failMessage = e.getMessage();
                log.error("Error saving file in non-silent mode", e);
            }

            finished = true;

            synchronized (fileGenLock) {
                fileGenLock.notifyAll();
            }

        }

    }

    private class CustomFileFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            if (f != null) {
                if (f.isDirectory()) {
                    return true;
                }

                String extension = getExtension(f);
                List<String> validExtensions = FILE_EXTENSION_MAP.get(saveFormat);

                if (extension != null && validExtensions.contains(extension)) {
                    return true;
                }
            }

            return false;
        }

        @Override
        public String getDescription() {

            if (saveFormat == HTML_FORMAT)
                return "HTML Files(*.htm, *.html)";
            else if (saveFormat == IMAGE_JPEG_FORMAT)
                return "JPEG Files(*.jpg, *.jpeg)";
            else if (saveFormat == RTF_FORMAT)
                return "RTF Files(*.rtf)";
            else if (saveFormat == XML_FORMAT)
                return "XML Files(*.xml)";
            else if (saveFormat == PDF_FORMAT)
                return "PDF Files(*.pdf)";
            else
                return null;
        }

        public String getExtension(File f) {
            if (f != null) {
                String filename = f.getName();
                int i = filename.lastIndexOf('.');
                if (i > 0 && i < filename.length() - 1) {
                    return filename.substring(i + 1).toLowerCase();
                }
                ;
            }
            return null;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBrowse;
    private javax.swing.JButton btGenerateOutput;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lbFileName;
    private javax.swing.JLabel lbHelp;
    private javax.swing.JPanel pnlInvisibleFiller;
    private javax.swing.JTextField txtFileLoc;
    // End of variables declaration//GEN-END:variables

    private File chosenFile = null;

    private final CustomFileFilter filter = new CustomFileFilter();

    /**
     *variable to hold the `SAVE_FROMAT` of fromat to be saved it can be of
     * only three valid types of static final values defined as follows
     */
    private final String saveFormat;

    /**
     *valid values for `SAVE_FROMAT`: to be used in constructor for
     * GenerateOutput
     */
    public static final String HTML_FORMAT = "HTML_FORMAT";
    public static final String IMAGE_JPEG_FORMAT = "IMAGE_JPEG_FORMAT";
    public static final String RTF_FORMAT = "RTF_FORMAT";
    public static final String XML_FORMAT = "XML_FORMAT";
    public static final String PDF_FORMAT = "PDF_FORMAT";

    /**
     * has the valid fileExtension for each saveFormat values
     */
    private static final Map<String, List<String>> FILE_EXTENSION_MAP;

    static {
        Map<String, List<String>> fileExtensionMap = new Hashtable<String, List<String>>();
        fileExtensionMap.put(HTML_FORMAT, Arrays.asList(new String[] { "html", "htm" }));
        fileExtensionMap.put(IMAGE_JPEG_FORMAT, Arrays.asList(new String[] { "jpeg", "jpg" }));
        fileExtensionMap.put(RTF_FORMAT, Arrays.asList(new String[] { "rtf" }));
        fileExtensionMap.put(XML_FORMAT, Arrays.asList(new String[] { "xml" }));
        fileExtensionMap.put(PDF_FORMAT, Arrays.asList(new String[] { "pdf" }));

        FILE_EXTENSION_MAP = Collections.unmodifiableMap(fileExtensionMap);
    }

}
