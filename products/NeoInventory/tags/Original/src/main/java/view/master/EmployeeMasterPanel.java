/*
 * EmployeeMaster.java
 *
 * Created on 25 November 2002, 10:34
 */

package view.master;
import java.sql.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.util.*;

/**
 *
 * @author  Shanmugam
 */
public class EmployeeMasterPanel extends javax.swing.JPanel {

    /** Creates new form EmployeeMaster */
    public EmployeeMasterPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLblEMMain = new javax.swing.JLabel();
        jPnlEMView = new javax.swing.JPanel();
        jBtnEMModify = new javax.swing.JButton();
        jBtnEMSearch = new javax.swing.JButton();
        jBtnEMActivate = new javax.swing.JButton();
        jBtnEMInActivate = new javax.swing.JButton();
        jBtnEMAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTblDisplay = new javax.swing.JTable();
        jBtnEMExit = new javax.swing.JButton();
        jPnlEMSearch = new javax.swing.JPanel();
        jCboEMSearch = new javax.swing.JComboBox();
        jTxtEMSearch = new javax.swing.JTextField();
        jSPaneEM = new javax.swing.JScrollPane();
        jListEMSearch = new javax.swing.JList();
        jBtnEMSearchClose = new javax.swing.JButton();
        jPnlEMViewOption = new javax.swing.JPanel();
        jRBtnEMComplete = new javax.swing.JRadioButton();
        jRBtnEMActive = new javax.swing.JRadioButton();
        jRBtnEMInActive = new javax.swing.JRadioButton();
        jPnlEMAdd = new javax.swing.JPanel();
        jLblEMCode = new javax.swing.JLabel();
        jLblEMName = new javax.swing.JLabel();
        jTxtEMName = new javax.swing.JTextField();
        jTPEMAddress = new javax.swing.JTabbedPane();
        jPnlEMAddress = new javax.swing.JPanel();
        jLblEMStreet = new javax.swing.JLabel();
        jTxtEMStreet = new javax.swing.JTextField();
        jLblEMLocality = new javax.swing.JLabel();
        jTxtEMLocality = new javax.swing.JTextField();
        jLblEMCity = new javax.swing.JLabel();
        jLblEMPin = new javax.swing.JLabel();
        jTxtEMCity = new javax.swing.JTextField();
        jTxtEMPin = new javax.swing.JTextField();
        jLblEMEmail = new javax.swing.JLabel();
        jLblEMDesignation = new javax.swing.JLabel();
        jLblEMRPhone = new javax.swing.JLabel();
        jTxtEMRPhone = new javax.swing.JTextField();
        jLblEMBirthDate = new javax.swing.JLabel();
        jBtnEMSave = new javax.swing.JButton();
        jTxtEMCode = new javax.swing.JTextField();
        jBtnEMCancel = new javax.swing.JButton();
        jTxtEMEmail = new javax.swing.JTextField();
        jTxtEMDesignation = new javax.swing.JTextField();
        jCboEMJDD = new javax.swing.JComboBox();
        jCboEMJMM = new javax.swing.JComboBox();
        jCboEMJYYYY = new javax.swing.JComboBox();
        jLblEMBirthDate1 = new javax.swing.JLabel();
        jCboEMBDD = new javax.swing.JComboBox();
        jCboEMBMM = new javax.swing.JComboBox();
        jCboEMBYYYY = new javax.swing.JComboBox();
        jLblEMJDD = new javax.swing.JLabel();
        jLblEMJMM = new javax.swing.JLabel();
        jLblEMJYYYY = new javax.swing.JLabel();
        jLblEMBDD = new javax.swing.JLabel();
        jLblEMBMM = new javax.swing.JLabel();
        jLblEMBYYYY = new javax.swing.JLabel();
        jLblEMDepartment = new javax.swing.JLabel();
        jTxtEMDepartment = new javax.swing.JTextField();
        jBtnEMAddSearch = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLblEMMain.setFont(new java.awt.Font("Trebuchet MS", 1, 24));
        jLblEMMain.setForeground(new java.awt.Color(0, 0, 153));
        jLblEMMain.setText("Employee Master");
        add(jLblEMMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, -1, -1));

        jPnlEMView.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlEMView.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPnlEMViewComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPnlEMViewComponentShown(evt);
            }
        });

        jBtnEMModify.setMnemonic('M');
        jBtnEMModify.setText("Modify");
        jBtnEMModify.setToolTipText(" ");
        jBtnEMModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEMModifyActionPerformed(evt);
            }
        });

        jPnlEMView.add(jBtnEMModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 380, 100, -1));

        jBtnEMSearch.setMnemonic('S');
        jBtnEMSearch.setText("Search");
        jBtnEMSearch.setToolTipText(" ");
        jBtnEMSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEMSearchActionPerformed(evt);
            }
        });

        jPnlEMView.add(jBtnEMSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 380, 100, -1));

        jBtnEMActivate.setMnemonic('c');
        jBtnEMActivate.setText("Activate");
        jBtnEMActivate.setToolTipText(" ");
        jBtnEMActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEMActivateActionPerformed(evt);
            }
        });

        jPnlEMView.add(jBtnEMActivate, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 380, 100, -1));

        jBtnEMInActivate.setMnemonic('n');
        jBtnEMInActivate.setText("InActivate");
        jBtnEMInActivate.setToolTipText(" ");
        jBtnEMInActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEMInActivateActionPerformed(evt);
            }
        });

        jPnlEMView.add(jBtnEMInActivate, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 380, 100, -1));

        jBtnEMAdd.setMnemonic('A');
        jBtnEMAdd.setText("Add");
        jBtnEMAdd.setToolTipText(" ");
        jBtnEMAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEMAddActionPerformed(evt);
            }
        });

        jPnlEMView.add(jBtnEMAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 100, -1));

        jScrollPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jScrollPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane1ComponentResized(evt);
            }
        });

        jTblDisplay.setAlignmentX(1.0F);
        jTblDisplay.setAlignmentY(1.0F);
        jTblDisplay.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTblDisplay.setPreferredScrollableViewportSize(new java.awt.Dimension(400, 400));
        jTblDisplay.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jTblDisplay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTblDisplayKeyPressed(evt);
            }
        });

        jTblDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblDisplayMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTblDisplay);

        jPnlEMView.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 600, 290));

        jBtnEMExit.setMnemonic('x');
        jBtnEMExit.setText("Exit");
        jBtnEMExit.setToolTipText(" ");
        jBtnEMExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEMExitActionPerformed(evt);
            }
        });

        jPnlEMView.add(jBtnEMExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 380, 100, -1));

        jPnlEMSearch.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlEMSearch.setBorder(new javax.swing.border.TitledBorder(null, "Search", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 0, 14)));
        jPnlEMSearch.setVisible(false);
        jCboEMSearch.addItem("Employee Code");
        jCboEMSearch.addItem("Employee Name");
        jCboEMSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboEMSearchActionPerformed(evt);
            }
        });

        jCboEMSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jCboEMSearchKeyReleased(evt);
            }
        });

        jPnlEMSearch.add(jCboEMSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 20));

        jTxtEMSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtEMSearchKeyPressed(evt);
            }
        });

        jPnlEMSearch.add(jTxtEMSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 140, 20));

        jListEMSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListEMSearchKeyReleased(evt);
            }
        });

        jListEMSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListEMSearchMouseClicked(evt);
            }
        });

        jSPaneEM.setViewportView(jListEMSearch);

        jPnlEMSearch.add(jSPaneEM, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 140, 270));

        jBtnEMSearchClose.setIcon(new javax.swing.ImageIcon("C:\\Program Files\\Microsoft Visual Studio\\Common\\Graphics\\Bitmaps\\TlBr_W95\\BACK.BMP"));
        jBtnEMSearchClose.setMnemonic('e');
        jBtnEMSearchClose.setText("Search Cancel");
        jBtnEMSearchClose.setToolTipText(" ");
        jBtnEMSearchClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEMSearchCloseActionPerformed(evt);
            }
        });

        jPnlEMSearch.add(jBtnEMSearchClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 140, -1));

        jPnlEMView.add(jPnlEMSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 20, 160, 390));

        jPnlEMViewOption.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlEMViewOption.setBorder(new javax.swing.border.TitledBorder(null, "View Options", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14)));
        jRBtnEMComplete.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnEMComplete.setMnemonic('l');
        jRBtnEMComplete.setText("All Data");
        jRBtnEMComplete.setToolTipText(" ");
        buttonGroup1.add(jRBtnEMComplete);
        jRBtnEMComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnEMCompleteActionPerformed(evt);
            }
        });

        jPnlEMViewOption.add(jRBtnEMComplete, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        jRBtnEMActive.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnEMActive.setMnemonic('t');
        jRBtnEMActive.setText("Active Data");
        jRBtnEMActive.setToolTipText(" ");
        buttonGroup1.add(jRBtnEMActive);
        jRBtnEMActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnEMActiveActionPerformed(evt);
            }
        });

        jPnlEMViewOption.add(jRBtnEMActive, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        jRBtnEMInActive.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnEMInActive.setMnemonic('i');
        jRBtnEMInActive.setText("In Active Data");
        jRBtnEMInActive.setToolTipText(" ");
        buttonGroup1.add(jRBtnEMInActive);
        jRBtnEMInActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnEMInActiveActionPerformed(evt);
            }
        });

        jPnlEMViewOption.add(jRBtnEMInActive, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, -1, -1));

        jPnlEMView.add(jPnlEMViewOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 600, 60));

        add(jPnlEMView, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 800, 450));

        jPnlEMAdd.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlEMAdd.setVisible(false);
        jPnlEMAdd.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPnlEMAddComponentShown(evt);
            }
        });

        jLblEMCode.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMCode.setText("Code");
        jPnlEMAdd.add(jLblEMCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, 20));

        jLblEMName.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMName.setText("Name");
        jPnlEMAdd.add(jLblEMName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, 20));

        jTxtEMName.setBackground(new java.awt.Color(204, 255, 255));
        jTxtEMName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtEMNameFocusGained(evt);
            }
        });

        jPnlEMAdd.add(jTxtEMName, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 350, 20));

        jTPEMAddress.setForeground(new java.awt.Color(0, 51, 51));
        jPnlEMAddress.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLblEMStreet.setFont(new java.awt.Font("Dialog", 3, 10));
        jLblEMStreet.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMStreet.setText("Street");
        jPnlEMAddress.add(jLblEMStreet, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 40, 20));

        jTxtEMStreet.setBackground(new java.awt.Color(204, 255, 255));
        jPnlEMAddress.add(jTxtEMStreet, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 330, 20));

        jLblEMLocality.setFont(new java.awt.Font("Dialog", 3, 10));
        jLblEMLocality.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMLocality.setText("Locality");
        jPnlEMAddress.add(jLblEMLocality, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, 20));

        jTxtEMLocality.setBackground(new java.awt.Color(204, 255, 255));
        jPnlEMAddress.add(jTxtEMLocality, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 330, 20));

        jLblEMCity.setFont(new java.awt.Font("Dialog", 3, 10));
        jLblEMCity.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMCity.setText("City");
        jPnlEMAddress.add(jLblEMCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 30, 20));

        jLblEMPin.setFont(new java.awt.Font("Dialog", 3, 10));
        jLblEMPin.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMPin.setText("Pin");
        jPnlEMAddress.add(jLblEMPin, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, 20));

        jTxtEMCity.setBackground(new java.awt.Color(204, 255, 255));
        jPnlEMAddress.add(jTxtEMCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 330, 20));

        jTxtEMPin.setBackground(new java.awt.Color(204, 255, 255));
        jPnlEMAddress.add(jTxtEMPin, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 330, 20));

        jTPEMAddress.addTab("Address", jPnlEMAddress);

        jPnlEMAdd.add(jTPEMAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 440, 160));

        jLblEMEmail.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMEmail.setText("Email ID");
        jPnlEMAdd.add(jLblEMEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, -1, 20));

        jLblEMDesignation.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMDesignation.setText("Designation");
        jPnlEMAdd.add(jLblEMDesignation, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, -1, 20));

        jLblEMRPhone.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMRPhone.setText("Phone (R)");
        jPnlEMAdd.add(jLblEMRPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, -1, 20));

        jTxtEMRPhone.setBackground(new java.awt.Color(204, 255, 255));
        jPnlEMAdd.add(jTxtEMRPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 320, 350, 20));

        jLblEMBirthDate.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMBirthDate.setText("Join Date");
        jPnlEMAdd.add(jLblEMBirthDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 260, -1, 20));

        jBtnEMSave.setMnemonic('s');
        jBtnEMSave.setText("Save");
        jBtnEMSave.setToolTipText(" ");
        jBtnEMSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEMSaveActionPerformed(evt);
            }
        });

        jPnlEMAdd.add(jBtnEMSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 440, 100, -1));

        jTxtEMCode.setBackground(new java.awt.Color(204, 255, 255));
        jTxtEMCode.setEditable(false);
        jPnlEMAdd.add(jTxtEMCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 350, 20));

        jBtnEMCancel.setMnemonic('c');
        jBtnEMCancel.setText("Cancel");
        jBtnEMCancel.setToolTipText(" ");
        jBtnEMCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEMCancelActionPerformed(evt);
            }
        });

        jPnlEMAdd.add(jBtnEMCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 440, 100, -1));

        jTxtEMEmail.setBackground(new java.awt.Color(204, 255, 255));
        jPnlEMAdd.add(jTxtEMEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, 350, 20));

        jTxtEMDesignation.setBackground(new java.awt.Color(204, 255, 255));
        jPnlEMAdd.add(jTxtEMDesignation, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 350, 350, 20));

        for(int i=1;i<=31;i++){
            if (i<10)
            jCboEMJDD.addItem("0"+String.valueOf(i));
            else
            jCboEMJDD.addItem(String.valueOf(i));
        }
        jCboEMJDD.setFont(new java.awt.Font("Dialog", 1, 10));
        jPnlEMAdd.add(jCboEMJDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 260, 40, 20));

        for(int i=1;i<=12;i++){
            if (i<10)
            jCboEMJMM.addItem("0"+String.valueOf(i));
            else
            jCboEMJMM.addItem(String.valueOf(i));
        }
        jCboEMJMM.setFont(new java.awt.Font("Dialog", 1, 10));
        jPnlEMAdd.add(jCboEMJMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 260, 40, 20));

        for(int i=1990;i<=2050;i++)
        jCboEMJYYYY.addItem(String.valueOf(i));
        jCboEMJYYYY.setFont(new java.awt.Font("Dialog", 1, 10));
        jPnlEMAdd.add(jCboEMJYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 260, 60, 20));

        jLblEMBirthDate1.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMBirthDate1.setText("Birth Date");
        jPnlEMAdd.add(jLblEMBirthDate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, 20));

        for(int i=1;i<=31;i++){
            if (i<10)
            jCboEMBDD.addItem("0"+String.valueOf(i));
            else
            jCboEMBDD.addItem(String.valueOf(i));
        }
        jCboEMBDD.setFont(new java.awt.Font("Dialog", 1, 10));
        jPnlEMAdd.add(jCboEMBDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 260, 40, 20));

        for(int i=1;i<=12;i++){
            if (i<10)
            jCboEMBMM.addItem("0"+String.valueOf(i));
            else
            jCboEMBMM.addItem(String.valueOf(i));
        }
        jCboEMBMM.setFont(new java.awt.Font("Dialog", 1, 10));
        jCboEMBMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboEMBMMActionPerformed(evt);
            }
        });

        jPnlEMAdd.add(jCboEMBMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, 40, 20));

        for(int i=1990;i<=2050;i++)
        jCboEMBYYYY.addItem(String.valueOf(i));
        jCboEMBYYYY.setFont(new java.awt.Font("Dialog", 1, 10));
        jCboEMBYYYY.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jCboEMBYYYYFocusLost(evt);
            }
        });

        jPnlEMAdd.add(jCboEMBYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 60, 20));

        jLblEMJDD.setFont(new java.awt.Font("Dialog", 3, 10));
        jLblEMJDD.setText("DD");
        jPnlEMAdd.add(jLblEMJDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 250, -1, 10));

        jLblEMJMM.setFont(new java.awt.Font("Dialog", 3, 10));
        jLblEMJMM.setText("MM");
        jPnlEMAdd.add(jLblEMJMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 250, -1, 10));

        jLblEMJYYYY.setFont(new java.awt.Font("Dialog", 3, 10));
        jLblEMJYYYY.setText("YYYY");
        jPnlEMAdd.add(jLblEMJYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 250, 40, 10));

        jLblEMBDD.setFont(new java.awt.Font("Dialog", 3, 10));
        jLblEMBDD.setText("DD");
        jPnlEMAdd.add(jLblEMBDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, -1, 10));

        jLblEMBMM.setFont(new java.awt.Font("Dialog", 3, 10));
        jLblEMBMM.setText("MM");
        jPnlEMAdd.add(jLblEMBMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 250, -1, 10));

        jLblEMBYYYY.setFont(new java.awt.Font("Dialog", 3, 10));
        jLblEMBYYYY.setText("YYYY");
        jPnlEMAdd.add(jLblEMBYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 250, 40, 10));

        jLblEMDepartment.setForeground(new java.awt.Color(0, 51, 51));
        jLblEMDepartment.setText("Department");
        jPnlEMAdd.add(jLblEMDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 70, 20));

        jTxtEMDepartment.setBackground(new java.awt.Color(204, 255, 255));
        jPnlEMAdd.add(jTxtEMDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 380, 350, 20));

        jBtnEMAddSearch.setMnemonic('e');
        jBtnEMAddSearch.setText("Search");
        jBtnEMAddSearch.setToolTipText(" ");
        jBtnEMAddSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEMAddSearchActionPerformed(evt);
            }
        });

        jPnlEMAdd.add(jBtnEMAddSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 440, 100, -1));

        add(jPnlEMAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 440, 500));

    }//GEN-END:initComponents

    private void jScrollPane1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane1ComponentResized
        // Add your handling code here:
        h=jTblDisplay.getRowHeight()*(RowCount+1);
            if(h<290)
                jScrollPane1.setSize(600,h+20);
            else
                jScrollPane1.setSize(600,290);
    }//GEN-LAST:event_jScrollPane1ComponentResized

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // Add your handling code here:
         displayData("EmployeeMaster","EmpName"); 
    }//GEN-LAST:event_formComponentShown

    private void jPnlEMViewComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlEMViewComponentShown
        // Add your handling code here:
        displayData("EmployeeMaster","EmpName"); 
        if(RowCount>=1){ 
         jTblDisplay.clearSelection(); 
             jCboEMSearch.setSelectedIndex(0);
             int index=searchElement(  (String)( jListEMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
        }
    }//GEN-LAST:event_jPnlEMViewComponentShown

    private void jBtnEMAddSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEMAddSearchActionPerformed
        // Add your handling code here:
        jRBtnEMComplete.setSelected(true);
        jBtnEMActivate.setEnabled(true);        
        searchPressed();
    }//GEN-LAST:event_jBtnEMAddSearchActionPerformed

    private void jPnlEMViewComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlEMViewComponentResized
        // Add your handling code here:
        displayData("EmployeeMaster","EmpName");
    }//GEN-LAST:event_jPnlEMViewComponentResized

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // Add your handling code here:
        if(evt.getKeyCode()==evt.VK_ALT)
          jBtnEMSearchClose.requestFocus();
    }//GEN-LAST:event_formKeyPressed

    private void jTblDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblDisplayMouseClicked
        // Add your handling code here:
        clickH=true;
        selrow=jTblDisplay.getSelectedRow();
    }//GEN-LAST:event_jTblDisplayMouseClicked

    private void jPnlEMAddComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlEMAddComponentShown
        // Add your handling code here:
       // jPnlEMAdd.setLocation(90,70);
    }//GEN-LAST:event_jPnlEMAddComponentShown

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // Add your handling code here:
       // jPnlEMAdd.setLocation(90,70);
    }//GEN-LAST:event_formComponentResized

    private void jRBtnEMInActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnEMInActiveActionPerformed
        // Add your handling code here:
        displayData("EmployeeMaster","Active","N","EmployeeMaster.EmpName");
        jBtnEMAdd.setEnabled(false);
        jBtnEMModify.setEnabled(false);
        jBtnEMSearch.setEnabled(true);
        jBtnEMActivate.setEnabled(true);
        jBtnEMInActivate.setEnabled(false);
    }//GEN-LAST:event_jRBtnEMInActiveActionPerformed

    private void jRBtnEMActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnEMActiveActionPerformed
        // Add your handling code here:
        displayData("EmployeeMaster","Active","Y","EmployeeMaster.EmpName");
        jBtnEMAdd.setEnabled(true);
        jBtnEMModify.setEnabled(true);
        jBtnEMSearch.setEnabled(true);
        jBtnEMActivate.setEnabled(false);
        jBtnEMInActivate.setEnabled(true);
    }//GEN-LAST:event_jRBtnEMActiveActionPerformed

    private void jRBtnEMCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnEMCompleteActionPerformed
        // Add your handling code here:
        displayData("EmployeeMaster","EmployeeMaster.EmpName");
        jBtnEMAdd.setEnabled(true);
        jBtnEMModify.setEnabled(true);
        jBtnEMSearch.setEnabled(true);
        jBtnEMActivate.setEnabled(true);
        jBtnEMInActivate.setEnabled(true);
    }//GEN-LAST:event_jRBtnEMCompleteActionPerformed

    private void jBtnEMModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEMModifyActionPerformed
        // Add your handling code here:
         if(jTblDisplay.getSelectedColumn()!=-1){
            modify();        
            jBtnEMAddSearch.setVisible(true);
         }
        else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_jBtnEMModifyActionPerformed

    private void jTxtEMNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtEMNameFocusGained
        // Add your handling code here:        
    }//GEN-LAST:event_jTxtEMNameFocusGained

    private void jCboEMSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCboEMSearchKeyReleased
        // Add your handling code here:
        int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_UP||KeyCode==evt.VK_DOWN)
            jTxtEMSearch.requestFocus();
        else if(KeyCode==evt.VK_ENTER)
             jTxtEMSearch.requestFocus();
        
        jTxtEMSearch.enable();
        jTxtEMSearch.requestFocus(); 
        key="";
        jTxtEMSearch.setText("");
        if (jRBtnEMInActive.isSelected()) 
           jBtnEMModify.setEnabled(false);
        else
           jBtnEMModify.setEnabled(true);
        
        search(jListEMSearch);
    }//GEN-LAST:event_jCboEMSearchKeyReleased

    private void jListEMSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListEMSearchKeyReleased
        // Add your handling code here:
        int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_UP||KeyCode==evt.VK_DOWN){
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListEMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             jTxtEMSearch.setText(""+ jListEMSearch.getSelectedValue());
             jTxtEMSearch.selectAll();
        }
        else if(KeyCode==evt.VK_ENTER){
            if (jRBtnEMInActive.isSelected()) 
                jBtnEMModify.setEnabled(false);
           else{
                int index=searchElement(  (String)( jListEMSearch.getSelectedValue() )  ,unsorted   );                                    
                selrow=index;                 
                modify();                
           }
        }
         
       if (jRBtnEMInActive.isSelected()) 
           jBtnEMModify.setEnabled(false);
       else
           jBtnEMModify.setEnabled(true);
    }//GEN-LAST:event_jListEMSearchKeyReleased

    private void jBtnEMExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEMExitActionPerformed
        // Add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jBtnEMExitActionPerformed

    private void jTblDisplayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblDisplayKeyPressed
        // Add your handling code here:
        int KeyCode=evt.getKeyCode();
        if (KeyCode==evt.VK_TAB){
            if(jPnlEMSearch.isVisible())
                jCboEMSearch.requestFocus();
            else
                jBtnEMAdd.requestFocus();
        }
    }//GEN-LAST:event_jTblDisplayKeyPressed

    private void jTxtEMSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtEMSearchKeyPressed
        // Add your handling code here:
        char KeyChar=evt.getKeyChar();
        int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_BACK_SPACE||KeyCode==evt.VK_DELETE){
            sb=new StringBuffer(key);
            if (sb.length()>0){
            sb.setLength(sb.length()-1);
            }
            key=sb.toString();
        }
        else if(KeyCode==evt.VK_ALT || KeyCode==evt.VK_CONTROL || KeyCode==evt.VK_SHIFT){ 
            ;
        } 
        else if(KeyCode==evt.VK_UP || KeyCode==evt.VK_DOWN){
               if (jRBtnEMInActive.isSelected()) 
                  jBtnEMModify.setEnabled(false);
               else
                   jBtnEMModify.setEnabled(false);
        }
        else if(KeyCode==evt.VK_TAB){
              jListEMSearch.requestFocus();
              jListEMSearch.setSelectedIndex(1);
        }
        else if(KeyCode==evt.VK_ENTER){   
            if (jRBtnEMInActive.isSelected()){ 
                   jBtnEMModify.setEnabled(false);
                   jCboEMSearch.requestFocus();                
            }
            else if(jTxtEMSearch.getText().equals(""))
                ;
            else{
                int index=searchElement(  (String)( jListEMSearch.getSelectedValue() )  ,unsorted   );                                    
                selrow=index;                 
                modify();               
            }                            
        }
        else if(KeyCode>=33 && KeyCode<=126){
            key+=String.valueOf(KeyChar);
            key=key.trim();
        }
        else
           JOptionPane.showMessageDialog(this,"Enter Suitable value","Error",JOptionPane.INFORMATION_MESSAGE); 
            
        if (jRBtnEMInActive.isSelected()) 
           jBtnEMModify.setEnabled(false);
        else
           jBtnEMModify.setEnabled(false);
            
        search(jListEMSearch);        
    }//GEN-LAST:event_jTxtEMSearchKeyPressed

    private void jBtnEMInActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEMInActivateActionPerformed
        // Add your handling code here:
        if (jTblDisplay.getSelectedColumn()!=-1){  
        activate("N","EmployeeMaster","EmployeeMaster.EmpName"); 
        jRBtnEMComplete.setSelected(true);
        jBtnEMAdd.setEnabled(true);
        jBtnEMModify.setEnabled(true);
        jBtnEMSearch.setEnabled(true);
        jBtnEMInActivate.setEnabled(true);
        jPnlEMSearch.setVisible(false);
        jRBtnEMComplete.setEnabled(true);
        jRBtnEMActive.setEnabled(true);
        jRBtnEMInActive.setEnabled(true);
       }
       else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);
  
    }//GEN-LAST:event_jBtnEMInActivateActionPerformed

    private void jBtnEMActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEMActivateActionPerformed
        // Add your handling code here:
        if (jTblDisplay.getSelectedColumn()!= -1){ 
            activate("Y","EmployeeMaster","EmployeeMaster.EmpName");
            jRBtnEMComplete.setSelected(true);
            jBtnEMAdd.setEnabled(true);
            jBtnEMModify.setEnabled(true);
            jBtnEMSearch.setEnabled(true);
            jBtnEMInActivate.setEnabled(true);
            jPnlEMSearch.setVisible(false);
            jRBtnEMComplete.setEnabled(true);
            jRBtnEMActive.setEnabled(true);
            jRBtnEMInActive.setEnabled(true);
       }
       else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_jBtnEMActivateActionPerformed

    private void jBtnEMCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEMCancelActionPerformed
        // Add your handling code here:
      if(RowCount>=1){          
        jCboEMSearch.setSelectedIndex(0);        
      }
        jPnlEMView.setVisible(true);
        jPnlEMSearch.setVisible(false);
        jPnlEMAdd.setVisible(false);
        jTblDisplay.requestFocus();
        jBtnEMModify.setEnabled(true);
        jBtnEMSearch.setEnabled(true);
        jRBtnEMComplete.setEnabled(true);
        jRBtnEMActive.setEnabled(true);
        jRBtnEMInActive.setEnabled(true);
        jBtnEMActivate.setEnabled(true);
        jRBtnEMComplete.setSelected(true);
    }//GEN-LAST:event_jBtnEMCancelActionPerformed

    private void jListEMSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListEMSearchMouseClicked
        // Add your handling code here:
        int keyCode=evt.getClickCount();
           if(keyCode==1){
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListEMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             jTxtEMSearch.setText(""+jListEMSearch.getSelectedValue());
             jTxtEMSearch.selectAll();
           }
           else{
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListEMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             selrow=jTblDisplay.getSelectedRow();             
             modify();            
           }        
    }//GEN-LAST:event_jListEMSearchMouseClicked

    private void jBtnEMSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEMSearchActionPerformed
        // Add your handling code here:
            searchPressed();
    }//GEN-LAST:event_jBtnEMSearchActionPerformed

    private void jBtnEMSearchCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEMSearchCloseActionPerformed
        // Add your handling code here:
                jPnlEMSearch.setVisible(false);
                jTblDisplay.requestFocus();
                jCboEMSearch.setSelectedIndex(0);
                jBtnEMSearch.setEnabled(true);            
                jRBtnEMComplete.setEnabled(true);
                jRBtnEMActive.setEnabled(true);
                jRBtnEMInActive.setEnabled(true);
             if (jRBtnEMInActive.isSelected())
                 jBtnEMModify.setEnabled(false);
             else
                 jBtnEMModify.setEnabled(true);
    }//GEN-LAST:event_jBtnEMSearchCloseActionPerformed

    private void jCboEMSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboEMSearchActionPerformed
        // Add your handling code here:
        jTxtEMSearch.enable();
        jTxtEMSearch.requestFocus(); 
        key="";
        
             search(jListEMSearch);
             if(RowCount>=1){           
                 jTblDisplay.clearSelection();      
                 int index=searchElement(  (String)( jListEMSearch.getSelectedValue() )  ,unsorted   );
                 jTblDisplay.changeSelection( index ,0,true,false);
                 jTxtEMSearch.setText(""+jListEMSearch.getSelectedValue());
                 jTxtEMSearch.selectAll();
            } 
        if (jRBtnEMInActive.isSelected())
            jBtnEMModify.setEnabled(false);
        else
            jBtnEMModify.setEnabled(true);         
    }//GEN-LAST:event_jCboEMSearchActionPerformed

    private void jBtnEMSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEMSaveActionPerformed
        // Add your handling code here:
         accessDB();
          componentNull();      
     if (getError.equals("NoError"))
     {      
        if (ModFlag==false) 
        {   
           int ansSave=JOptionPane.showConfirmDialog(this,"       Are u confirm to save","Save",JOptionPane.YES_NO_OPTION);
           if (ansSave==0){
                newSaveDB();
                if (NoNewSaveError) 
                  updateCode("EmployeeMaster");
                clearText();
                jTblDisplay.requestFocus();
           }
           else{
             clearText();
             jTblDisplay.requestFocus();
           }
         }
         else 
         {
             int ansModify=JOptionPane.showConfirmDialog(this,"      Are u confirm to Modify","Save",JOptionPane.YES_NO_OPTION);
             if (ansModify==0){
                modifySaveDB();
                clearText();
                jTblDisplay.requestFocus();
             }
             else{
                 clearText();
                 jTblDisplay.requestFocus();
            }
         }
            jPnlEMView.setVisible(true);
            jPnlEMAdd.setVisible(false);           
            jPnlEMSearch.setVisible(false);
          
            if (jRBtnEMComplete.isSelected())
               displayData("EmployeeMaster","EmployeeMaster.EmpName");
            else if (jRBtnEMActive.isSelected())
              displayData("EmployeeMaster","Active","Y","EmployeeMaster.EmpName");
            else if (jRBtnEMActive.isSelected())
              displayData("EmployeeMaster","Active","N","EmployeeMaster.EmpName");
            
            jBtnEMModify.setEnabled(true);
            jCboEMSearch.setSelectedIndex(0);
            jBtnEMSearch.setEnabled(true);
            jTblDisplay.requestFocus();
            jRBtnEMComplete.setEnabled(true);
            jRBtnEMActive.setEnabled(true);
            jRBtnEMInActive.setEnabled(true);
     }
     else
     {
        System.out.println("Error");
     }
    }//GEN-LAST:event_jBtnEMSaveActionPerformed

    private void jCboEMBYYYYFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCboEMBYYYYFocusLost
        // Add your handling code here:
      
    }//GEN-LAST:event_jCboEMBYYYYFocusLost

    private void jCboEMBMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboEMBMMActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jCboEMBMMActionPerformed

    private void jBtnEMAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEMAddActionPerformed
        // Add your handling code here:
        ModFlag=false;
        clearText();           
        jPnlEMView.setVisible(false);
        jPnlEMAdd.setVisible(true); 
        jBtnEMAddSearch.setVisible(false);
        jTxtEMName.requestFocus(); 
        generateCode("EmployeeMaster",jTxtEMCode); 
    }//GEN-LAST:event_jBtnEMAddActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Add your handling code here:
         jPnlEMAdd.setVisible(false);
         jPnlEMSearch.setVisible(false);
         jPnlEMView.setVisible(true);
         jBtnEMAdd.requestFocus();
         jRBtnEMComplete.setSelected(true); 
         try{
                accessDB();
                String ss = "SELECT * FROM SemaPhores WHERE TableName = 'EmployeeMaster'";
                ResultSet res = stat.executeQuery(ss);
                if(!res.next()){
                    String ss1="Insert into SemaPhores (TableName,CtrName,MaxCtr) values('EmployeeMaster','EM_',1)";
                   stat.executeUpdate(ss1);               
                }
                con.close();
           }
           catch(Exception ex){
               System.out.println("Error in form window opened "+ex);
           }
    }//GEN-LAST:event_formWindowOpened
   
     /** set the Component fields to null*/
    public void clearText(){
        jTxtEMCode.setText("") ; jTxtEMEmail.setText("");       
        jTxtEMName.setText(""); jTxtEMStreet.setText(""); jTxtEMLocality.setText("");
        jTxtEMCity.setText(""); jTxtEMPin.setText(""); jTxtEMDepartment.setText("");
        jTxtEMDesignation.setText(""); jTxtEMRPhone.setText("");
    }
    
    /** Establish the Connection to the database */
    public void accessDB(){
       try
       { 
        con=usefulClasses.databaseOperations.LinkDB.getConnection();
        stat=con.createStatement();
       }
       catch(Exception ex)
       {
           System.out.println("Error in accessDB "+ex);
       }   
    }
    
    /** Save new record to the Database */
    public void newSaveDB(){
         try{
              String NBD=jCboEMBDD.getSelectedItem()+"/"+jCboEMBMM.getSelectedItem()+"/"+jCboEMBYYYY.getSelectedItem();
              String NJD=jCboEMJDD.getSelectedItem()+"/"+jCboEMJMM.getSelectedItem()+"/"+jCboEMJYYYY.getSelectedItem();

              String ins;
              ins="Insert into EmployeeMaster (EmpCode,EmpName,Street,Locality,City,";
              ins+="pin,DOB,DOJ,Email,Rphone,Designation,Department,Active)";
              ins+=" values('"+jTxtEMCode.getText()+"','"+jTxtEMName.getText()+"'";
              ins+=",'"+jTxtEMStreet.getText()+"','"+jTxtEMLocality.getText()+"'";
              ins+=",'"+jTxtEMCity.getText()+"','"+jTxtEMPin.getText()+"','"+NBD+"'";
              ins+=",'"+NJD+"','"+jTxtEMEmail.getText()+"','"+jTxtEMRPhone.getText()+"'";
              ins+=",'"+jTxtEMDesignation.getText()+"','"+jTxtEMDepartment.getText()+"','Y')";
              stat.executeUpdate(ins);
              NoNewSaveError=true;              
              con.close();
            }
            catch(Exception ex)
            {
                NoNewSaveError=false;
                System.out.println("Error in newSaveDB "+ex);
            }   
    }
    
    /** Save Modified record to the Database */
    public void modifySaveDB(){
        try{
                String MBD=jCboEMBDD.getSelectedItem()+"/"+jCboEMBMM.getSelectedItem()+"/"+jCboEMBYYYY.getSelectedItem();
                String MJD=jCboEMJDD.getSelectedItem()+"/"+jCboEMJMM.getSelectedItem()+"/"+jCboEMJYYYY.getSelectedItem();
                String upd;
                upd="Update EmployeeMaster set EmpName='"+jTxtEMName.getText()+"',Street='"+jTxtEMStreet.getText()+"'";
                upd+=",Locality='"+jTxtEMLocality.getText()+"',City='"+jTxtEMCity.getText()+"'";
                upd+=",Pin='"+jTxtEMPin.getText()+"',DOB='"+MBD+"'";
                upd+=",DOJ='"+MJD+"',Email='"+jTxtEMEmail.getText()+"'";
                upd+=",RPhone='"+jTxtEMRPhone.getText()+"',Designation='"+jTxtEMDesignation.getText()+"'";
                upd+=",Department='"+jTxtEMDepartment.getText()+"'";
                upd+=" where EmpCode='"+jTxtEMCode.getText()+"'";
                stat.executeUpdate(upd);               
                con.close();
            }
            catch(Exception ex)
            {
                System.out.println("Error in modifySaveDB "+ex);
            }
    }
    
    /** To Automatic generate next code after click of Add Button */
    private void generateCode(String TableName,javax.swing.JTextField jTxtCode){
         try{
             accessDB();
             String ss = "SELECT * FROM SemaPhores WHERE TableName = '"+TableName+"'";
             System.out.println("********" + ss);
             ResultSet res = stat.executeQuery(ss);
             res.next();
             ctr = Integer.parseInt(res.getString(4));
             if(ctr < 10)
                jTxtCode.setText(res.getString(3)+"00"+ctr);  
             else if(ctr >= 10 && ctr < 100)
                jTxtCode.setText(res.getString(3)+"0"+ctr); 
             else if(ctr >= 100 && ctr < 1000)
                jTxtCode.setText(res.getString(3)+""+ctr);    
             con.close();
         }
         catch(Exception e){
             System.out.println("Error in generateCode\t"+e+"\n1043");
         }
    }
 
    /** To update the counter in the table SemaPhores after of Save Button*/ 
    private void updateCode(String TableName){
          try{
              accessDB();
              ctr++;
              String ss1 = "UPDATE SemaPhores SET  MaxCtr = "+ctr+" WHERE TableName ='"+TableName+"'";
              stat.executeUpdate(ss1);          
              con.close();
          } 
          catch(Exception e){
             System.out.println("Error in updateCode"+e+"\n1057");
          }
     }
    
    
    /** To record the count of the Column in the Jtable */ 
    public void columnCount(ResultSet r){
       accessDB();
       
       try{
           ResultSetMetaData rMeta=r.getMetaData();
           ColCount=rMeta.getColumnCount();
       }
       catch(Exception ex){
           System.out.println("Error in ColumnCount "+ex);
       }
              
   }
    
   /** To record the count of the Row in the Jtable */
   public void rowCount(String TableName){
       try{
           sel="Select * from "+TableName;
           ResultSet res=stat.executeQuery(sel);
           RowCount=0;
           
          while (res.next())
               RowCount+=1;
       }
       catch(Exception ex)
       {
           System.out.println("Error in rowCount 1 "+ex);
       }
   }
    
    /** To have the count of row in the Jtable */
     public void rowCount(String TableName,String Condition,String Active){
       try{
           sel="Select Count(*) from "+TableName+" where "+Condition+"='"+Active+"'";
          
           ResultSet res=stat.executeQuery(sel);
           RowCount=0;           
           res.next();
               RowCount=Integer.parseInt(res.getString(1));
       }
       catch(Exception ex)
       {
           System.out.println("Error in rowCount 2 "+ex);
       }
   }
    
     /** To Display the Data in the Jtable */
    public void displayData(String TableName,String OrderBy){       
       try{
           accessDB();
           sel="Select * from "+TableName+" ORDER BY "+OrderBy ;
           RowCount=0;
           ResultSet res=stat.executeQuery(sel);
           columnCount(res);
           rowCount(TableName);     
           tableData=new Object [RowCount][ColCount-1];
                   
          for(int row=1;res.next();row++)
          {
              for(int col=1;col<=ColCount-1;col++)
              {                
                  tableData [row-1][col-1]=res.getString(col+1);      
              }
          }      
           con.close();
      }
      catch(Exception ex){
           System.out.println("Error in displayData 1 "+ex);
       }
       getModel();
   }
    
    /** To Display the data from the Database to the Jtable */
    public void displayData(String TableName,String Condition,String Active,String OrderBy){
        try{
            accessDB();
           sel="Select * from "+TableName+" where "+Condition+"='"+Active+"' ORDER BY "+OrderBy;
           RowCount=0;
           ResultSet res=stat.executeQuery(sel);
           columnCount(res);
           rowCount(TableName,Condition,Active);     
           tableData=new Object [RowCount][ColCount-1];
                   
          for(int row=1;res.next();row++)
          {
              for(int col=1;col<=ColCount-1;col++)
              {                 
                  tableData [row-1][col-1]=res.getString(col+1);                
              }
          }      
           con.close();
      }
      catch(Exception ex){
           System.out.println("Error in displayData 2 "+ex);
       }
       getModel();
    }
    
     /** To Initialize the tableModel called in displayData*/
    public void getModel(){
         jTblDisplay.setModel(new javax.swing.table.DefaultTableModel(tableData,new String [] {"Code","Name","Street","Locality","City","Pin","Birth Date","Join Date","Email","Phone(Res)","Designation","Department","Activate"})              
       {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        h=jTblDisplay.getRowHeight()*(RowCount+1);
            if(h<288)
                jScrollPane1.setSize(600,h+18);
            else
                jScrollPane1.setSize(600,290);
    }
    
    
    /** Null Check Method */
    public void componentNull(){
         dateCheck(jCboEMBYYYY,jCboEMBMM,jCboEMBDD,"Birth Date");
           if(!dateCheckRequired)
               dateCheck(jCboEMJYYYY,jCboEMJMM,jCboEMJDD,"Join Date");
      if(!dateCheckRequired){         
        if (jTxtEMCode.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Code field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";            
            jTxtEMCode.requestFocus();
        }  
        else if (jTxtEMName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Name field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtEMName.requestFocus();
        }  
        else if (jTxtEMStreet.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Street field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtEMStreet.requestFocus();
        }  
        else if (jTxtEMLocality.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Locality field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtEMLocality.requestFocus();
        }  
        else if (jTxtEMCity.getText().equals("")){
            JOptionPane.showMessageDialog(this,"City field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";           
            jTxtEMCity.requestFocus();
        }  
        else if (jTxtEMPin.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Pin field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";           
            jTxtEMPin.requestFocus();
        }  
       
        else if (jTxtEMEmail.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Email field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";            
            jTxtEMEmail.requestFocus();
        }  
       
        else if (jTxtEMRPhone.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Phone(Res) field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";            
            jTxtEMRPhone.requestFocus();
        }  
        else if (jTxtEMDesignation.getText().equals("")){
            JOptionPane.showMessageDialog(this,"LicenseNo field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";            
            jTxtEMDesignation.requestFocus();
        }  
        else if (jTxtEMDepartment.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Phone(Off) field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";            
            jTxtEMDepartment.requestFocus();
        }  
        else{
        getError="NoError";       
      }
     }
     else{
         getError="Error";
         dateCheckRequired=true;
      }
    }
    
    /** @ Method to Validate the Date entered and make sure to enter the valid Date */
     public void dateCheck(javax.swing.JComboBox jCboYY,javax.swing.JComboBox jCboMM,javax.swing.JComboBox jCboDD,String Date){         
                 
        if( jCboMM.getSelectedIndex()==1 && Integer.parseInt(""+jCboYY.getSelectedItem())%4==0 &&  Integer.parseInt(""+jCboDD.getSelectedItem())>29){
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }
        else if( jCboMM.getSelectedIndex()==1 && Integer.parseInt(""+jCboYY.getSelectedItem())%4!=0 && Integer.parseInt(""+jCboDD.getSelectedItem())>28){
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }
        else if( jCboMM.getSelectedIndex()==3 && Integer.parseInt(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Integer.parseInt(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else if( jCboMM.getSelectedIndex()==5 && Integer.parseInt(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Integer.parseInt(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else if( jCboMM.getSelectedIndex()==8 && Integer.parseInt(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Integer.parseInt(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else if( jCboMM.getSelectedIndex()==10 && Integer.parseInt(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Integer.parseInt(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else {            
            dateCheckRequired=false;
        }
    }
    
     /** To Activate Or Inactivate the particular row in the Table */
     public void activate(String Activate,String TableName,String OrderBy){
        accessDB();
        tableRow=jTblDisplay.getSelectedRow();
                
            if (tableRow==-1)
                  tableRow=0;
                 
        try{
          stat.executeUpdate("Update "+TableName+" set Active='"+Activate+"' where EmpCode='"+tableData [tableRow][0]+"'");
          con.close();
          displayData(TableName,OrderBy);
        }
        catch(Exception ex)
        {
            System.out.println("Error in activate "+ex);
        }
     }
    
    /** To get all Particular Column values from Table in ComboBox */
     public void comboAddItem(String TableName,javax.swing.JComboBox comboBox,String TableColumn){
         
         accessDB();
         try{
             ResultSet res=stat.executeQuery("Select "+TableColumn+" from "+TableName);
             comboBox.removeAllItems();
             while (res.next()){
                 comboBox.addItem(res.getString(1));
             }
         }
         catch(Exception ex){
             System.out.println("Error in comboAddItem "+ex);
         }
     }
    
    /** sorts the Strings in alphabatic order and used in search method below */ 
    public void sortStrings(Object [][] rawData,int rows,int colNo,javax.swing.JList listSearch){
         list.removeAllElements();
         sorted=new String[rows];
         unsorted=new String[rows]; 
         
         for(j=0;j<rows;j++){
            unsorted[j]=((String)(rawData[j][colNo])).trim();
            sorted[j]=unsorted[j];  
         }
         for (j=0;j<rows;j++){
             for(i=j+1;i<rows;i++){
                 if (sorted[i].compareToIgnoreCase(sorted[j])<0){
                     String temp=sorted[j];
                     sorted[j]=sorted[i];
                     sorted[i]=temp;                     
                 }
             }
         }
         for(j=0;j<rows;j++){
             list.addElement(sorted[j]);
             listSearch.setListData(list);
         }
     }
    
    /** method supporting the search method below*/
     public void displaySearch(javax.swing.JList listSearch){
         for(i=0;i<sorted.length;i++){
             if (sorted[i].regionMatches(true,0,key,0,key.length())){
                 listSearch.setSelectedValue(sorted[i],true);
                 eleFound=true;
                 break;
             }
         }
         if(!eleFound)
             JOptionPane.showMessageDialog(this,"No match found","Sorry",JOptionPane.ERROR_MESSAGE);
         
         eleFound=false;
     }
    
    /** display the text in the jListSearch in alphabatic order */
     public void search(javax.swing.JList listSearch){
      if(RowCount>=1){
         if (jRBtnEMComplete.isSelected()){
             displayData("EmployeeMaster","EmployeeMaster.EmpName");
             list = new Vector(RowCount);
             if(jCboEMSearch.getSelectedItem().equals("Employee Code"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);

             displaySearch(listSearch);
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListEMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
        }
        else if(jRBtnEMActive.isSelected()){
            displayData("EmployeeMaster","Active","Y","EmployeeMaster.EmpName");
             list = new Vector(RowCount);
             if(jCboEMSearch.getSelectedItem().equals("Employee Code"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);

             displaySearch(listSearch);
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListEMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);             
        }
        else if(jRBtnEMInActive.isSelected()){
            displayData("EmployeeMaster","Active","N","EmployeeMaster.EmpName");
             list = new Vector(RowCount);
             if(jCboEMSearch.getSelectedItem().equals("Employee Code"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);

             displaySearch(listSearch);
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListEMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
        }
      }
     }
     
     /** To get the row Count of the Jtable on selection of an item in listSearch */
      private int searchElement(String key, String[] a) {
        int indx=-1;
        for(i=0;i<a.length;i++){
            if( key.equals(a[i]) )
                indx=i;
        }            
        return indx;
     }
      
      /** Changes to be performed on click of Search Button */
      private void searchPressed(){
       if(RowCount==0){
           JOptionPane.showMessageDialog(this,"Database is Empty, Add new Data","Search",JOptionPane.INFORMATION_MESSAGE);
       }      
       else{        
        jPnlEMSearch.setVisible(true);
        jPnlEMAdd.setVisible(false);
        jPnlEMView.setVisible(true);
        jCboEMSearch.setSelectedIndex(0); 
        jListEMSearch.setSelectedIndex(0);
        jTblDisplay.clearSelection();
        int rowIndex=searchElement(  (String)( jListEMSearch.getSelectedValue() )  ,unsorted   );        
        jBtnEMModify.setEnabled(false);
        jBtnEMSearch.setEnabled(false);
        jTxtEMSearch.requestFocus();
        jTxtEMSearch.setText(""+jListEMSearch.getSelectedValue());
        jTxtEMSearch.selectAll();
        jTblDisplay.clearSelection();
        jTblDisplay.changeSelection( rowIndex ,0,true,false);       
        jRBtnEMComplete.setEnabled(false);
        jRBtnEMActive.setEnabled(false);
        jRBtnEMInActive.setEnabled(false);        
       }
     }
     
    
    /** Action to be performed on click of modify button */
     public void modify(){
         ModFlag=true;
          if (selrow==-1)
             selrow=0;
         
      if(jTblDisplay.getValueAt(selrow,12).equals("N"))
           JOptionPane.showMessageDialog(this,"Cannot Modify the InActivate Record","Information",JOptionPane.INFORMATION_MESSAGE);         
      else if (!jRBtnEMInActive.isSelected()){   
        jPnlEMAdd.setVisible(true);
        jPnlEMView.setVisible(false);                   
        tableRow=jTblDisplay.getSelectedRow();
        
            if (tableRow==-1)
                  tableRow=0;
        
        jTxtEMCode.setText((String)(tableData [tableRow][0]));        
        jTxtEMName.setText((String)(tableData [tableRow][1]));
        jTxtEMStreet.setText((String)(tableData [tableRow][2]));
        jTxtEMLocality.setText((String)(tableData [tableRow][3]));
        jTxtEMCity.setText((String)(tableData [tableRow][4]));
        jTxtEMPin.setText((String)(tableData [tableRow][5]));
        
          String BirthDate=(String)(tableData [tableRow][6]);
            jCboEMBDD.setSelectedItem(BirthDate.substring(0,2));
            jCboEMBMM.setSelectedItem(BirthDate.substring(3,5));
            jCboEMBYYYY.setSelectedItem(BirthDate.substring(6,10));
                       
          String JoinDate=(String)(tableData [tableRow][7]) ;         
            jCboEMJDD.setSelectedItem(JoinDate.substring(0,2));
            jCboEMJMM.setSelectedItem(JoinDate.substring(3,5));
            jCboEMJYYYY.setSelectedItem(JoinDate.substring(6,10)); 
        
        jTxtEMEmail.setText((String)(tableData [tableRow][8]));
        jTxtEMRPhone.setText((String)(tableData [tableRow][9]));
        jTxtEMDesignation.setText((String)(tableData [tableRow][10]));        
        jTxtEMDepartment.setText((String)(tableData [tableRow][11]));
         jTxtEMName.requestFocus();   
         jTxtEMName.selectAll();        
      }
      else
          jBtnEMModify.setEnabled(false); 
     }
    
   
    
    /** Allow Only Numbers to be entered in the text field */
    public void numberOnly(java.awt.event.KeyEvent num,javax.swing.JTextField jTxt){
         int KeyCode= num.getKeyCode();
         char KeyChar=num.getKeyChar();
         String KeyEntered="";
         StringBuffer StoreString;
         if (KeyCode >= 48 && KeyCode <= 57 || KeyCode==46 ){
             // Key Code of Numbers  
            KeyEntered+=String.valueOf(KeyChar);
            KeyEntered=KeyEntered.trim();
         }
         else if (KeyCode >= 96 && KeyCode <= 105 || KeyCode==110){
             KeyEntered+=String.valueOf(KeyChar);
             KeyEntered=KeyEntered.trim();;//Side Pallete Numbers and Dot
         }
         else if (KeyCode >= 37 && KeyCode <= 40){
             ;//up,down,right,left arrows    
         }
         else if (KeyCode >= 0 && KeyCode <= 32 || KeyCode==127){
             ;//Key code of non printable characters  
         }
         else{
             //System.out.println(KeyCode);
              StoreString=new StringBuffer(KeyEntered);
            if (StoreString.length()>0){
            StoreString.setLength(StoreString.length()-1);
            }
              KeyEntered=StoreString.toString();
              JOptionPane.showMessageDialog(this,"Enter Only Numbers","Number Only",JOptionPane.ERROR_MESSAGE);
              jTxt.setText(KeyEntered);
         }  
     }  
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
   /* public static void main(String args[]) {
        new EmployeeMaster().show();
    }//*/


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jCboEMBMM;
    private javax.swing.JTextField jTxtEMName;
    private javax.swing.JLabel jLblEMJDD;
    private javax.swing.JComboBox jCboEMSearch;
    private javax.swing.JTextField jTxtEMDepartment;
    private javax.swing.JLabel jLblEMRPhone;
    private javax.swing.JButton jBtnEMAdd;
    private javax.swing.JPanel jPnlEMAddress;
    private javax.swing.JLabel jLblEMJMM;
    private javax.swing.JButton jBtnEMSearch;
    private javax.swing.JList jListEMSearch;
    private javax.swing.JButton jBtnEMSave;
    private javax.swing.JTextField jTxtEMDesignation;
    private javax.swing.JButton jBtnEMActivate;
    private javax.swing.JTextField jTxtEMCode;
    private javax.swing.JComboBox jCboEMBYYYY;
    private javax.swing.JLabel jLblEMBDD;
    private javax.swing.JLabel jLblEMLocality;
    private javax.swing.JComboBox jCboEMBDD;
    private javax.swing.JButton jBtnEMExit;
    private javax.swing.JTextField jTxtEMStreet;
    private javax.swing.JScrollPane jSPaneEM;
    private javax.swing.JLabel jLblEMBirthDate;
    private javax.swing.JLabel jLblEMBYYYY;
    private javax.swing.JPanel jPnlEMView;
    private javax.swing.JButton jBtnEMModify;
    private javax.swing.JLabel jLblEMEmail;
    private javax.swing.JLabel jLblEMBirthDate1;
    private javax.swing.JButton jBtnEMSearchClose;
    private javax.swing.JLabel jLblEMCity;
    private javax.swing.JTextField jTxtEMSearch;
    private javax.swing.JTextField jTxtEMPin;
    private javax.swing.JPanel jPnlEMViewOption;
    private javax.swing.JLabel jLblEMName;
    private javax.swing.JTextField jTxtEMEmail;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLblEMDepartment;
    private javax.swing.JPanel jPnlEMAdd;
    private javax.swing.JRadioButton jRBtnEMComplete;
    private javax.swing.JLabel jLblEMPin;
    private javax.swing.JComboBox jCboEMJYYYY;
    private javax.swing.JLabel jLblEMStreet;
    private javax.swing.JButton jBtnEMAddSearch;
    private javax.swing.JPanel jPnlEMSearch;
    private javax.swing.JButton jBtnEMInActivate;
    private javax.swing.JLabel jLblEMDesignation;
    private javax.swing.JTextField jTxtEMCity;
    private javax.swing.JComboBox jCboEMJDD;
    private javax.swing.JTextField jTxtEMLocality;
    private javax.swing.JLabel jLblEMMain;
    private javax.swing.JTabbedPane jTPEMAddress;
    private javax.swing.JRadioButton jRBtnEMActive;
    private javax.swing.JLabel jLblEMCode;
    private javax.swing.JTable jTblDisplay;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox jCboEMJMM;
    private javax.swing.JLabel jLblEMBMM;
    private javax.swing.JTextField jTxtEMRPhone;
    private javax.swing.JRadioButton jRBtnEMInActive;
    private javax.swing.JLabel jLblEMJYYYY;
    private javax.swing.JButton jBtnEMCancel;
    // End of variables declaration//GEN-END:variables
   
    Connection con;
    Statement stat;
    String getError="",key="",sel="",unsorted[],sorted[];    
    Vector v=new Vector();
    Object tableData[][];    
    Vector list;    
    boolean eleFound,codeRepeated=false,ModFlag=false,clickH=false,dateCheckRequired= true,NoNewSaveError=false;
    int j=0,h=0,i=0,ColCount=0,RowCount=0,tableRow=0,ctr=0,selrow=0;    
    StringBuffer sb;   
}

