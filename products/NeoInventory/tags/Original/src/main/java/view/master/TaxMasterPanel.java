/*
 * TaxMaster.java
 *
 * Created on 01 November 2002, 12:51
 */

package view.master;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.JOptionPane;
import java.awt.*;
import java.util.*;
import javax.swing.border.Border;
/**
 *
 * @author  Shanmugam
 */
public class TaxMasterPanel extends javax.swing.JPanel {

    /** Creates new form TaxMaster */
    public TaxMasterPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        BtnGroup = new javax.swing.ButtonGroup();
        jPnlTMView = new javax.swing.JPanel();
        jBtnTMExit = new javax.swing.JButton();
        jBtnTMModify = new javax.swing.JButton();
        jBtnTMInActivate = new javax.swing.JButton();
        jSPTMTable = new javax.swing.JScrollPane();
        jTblDisplay = new javax.swing.JTable();
        jBtnTMAdd = new javax.swing.JButton();
        jBtnTMSearch = new javax.swing.JButton();
        jBtnTMActivate = new javax.swing.JButton();
        jPnlTMSearch = new javax.swing.JPanel();
        jCboTMSearch = new javax.swing.JComboBox();
        jTxtTMSearch = new javax.swing.JTextField();
        jBtnTMSearchClose = new javax.swing.JButton();
        jSPTMSearch = new javax.swing.JScrollPane();
        jListTMSearch = new javax.swing.JList();
        jPnlViewOption = new javax.swing.JPanel();
        jRBtnTMComplete = new javax.swing.JRadioButton();
        jRBtnTMActive = new javax.swing.JRadioButton();
        jRBtnTMInActive = new javax.swing.JRadioButton();
        jPnlTMAdd = new javax.swing.JPanel();
        jTxtTMCode = new javax.swing.JTextField();
        jTxtTMDescription = new javax.swing.JTextField();
        jTxtTMPercentage = new javax.swing.JTextField();
        jLblTMCode = new javax.swing.JLabel();
        jLblTMDescription = new javax.swing.JLabel();
        jLblTMPercentage = new javax.swing.JLabel();
        jBtnTMSave = new javax.swing.JButton();
        jBtnTMCancel = new javax.swing.JButton();
        jBtnTMAddSearch = new javax.swing.JButton();
        jLblMain = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPnlTMView.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlTMView.setForeground(new java.awt.Color(51, 51, 255));
        jPnlTMView.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPnlTMViewComponentShown(evt);
            }
        });

        jBtnTMExit.setMnemonic('x');
        jBtnTMExit.setText("Exit");
        jBtnTMExit.setToolTipText(" ");
        jBtnTMExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnTMExitActionPerformed(evt);
            }
        });

        jBtnTMExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtnTMExitKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jBtnTMExitKeyReleased(evt);
            }
        });

        jPnlTMView.add(jBtnTMExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 370, 100, -1));

        jBtnTMModify.setMnemonic('M');
        jBtnTMModify.setText("Modify");
        jBtnTMModify.setToolTipText(" ");
        jBtnTMModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnTMModifyActionPerformed(evt);
            }
        });

        jPnlTMView.add(jBtnTMModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 370, 100, -1));

        jBtnTMInActivate.setMnemonic('n');
        jBtnTMInActivate.setText("InActivate");
        jBtnTMInActivate.setToolTipText(" ");
        jBtnTMInActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnTMInActivateActionPerformed(evt);
            }
        });

        jPnlTMView.add(jBtnTMInActivate, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 370, 100, -1));

        jSPTMTable.setBackground(new java.awt.Color(153, 153, 255));
        jSPTMTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jSPTMTableComponentResized(evt);
            }
        });

        jTblDisplay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTblDisplayKeyPressed(evt);
            }
        });

        jTblDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblDisplayMouseClicked(evt);
            }
        });

        jSPTMTable.setViewportView(jTblDisplay);

        jPnlTMView.add(jSPTMTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 600, 290));

        jBtnTMAdd.setMnemonic('A');
        jBtnTMAdd.setText("Add");
        jBtnTMAdd.setToolTipText(" ");
        jBtnTMAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnTMAddActionPerformed(evt);
            }
        });

        jBtnTMAdd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtnTMAddKeyPressed(evt);
            }
        });

        jPnlTMView.add(jBtnTMAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 100, -1));

        jBtnTMSearch.setMnemonic('S');
        jBtnTMSearch.setText("Search");
        jBtnTMSearch.setToolTipText(" ");
        jBtnTMSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnTMSearchActionPerformed(evt);
            }
        });

        jPnlTMView.add(jBtnTMSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 370, 100, -1));

        jBtnTMActivate.setMnemonic('c');
        jBtnTMActivate.setText("Activate");
        jBtnTMActivate.setToolTipText(" ");
        jBtnTMActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnTMActivateActionPerformed(evt);
            }
        });

        jPnlTMView.add(jBtnTMActivate, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 370, 100, -1));

        jPnlTMSearch.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlTMSearch.setBorder(new javax.swing.border.TitledBorder(null, "Search", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 0, 14)));
        jPnlTMSearch.setVisible(false);
        jCboTMSearch.addItem("Code");
        jCboTMSearch.addItem("Description");
        jCboTMSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboTMSearchActionPerformed(evt);
            }
        });

        jCboTMSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jCboTMSearchKeyReleased(evt);
            }
        });

        jPnlTMSearch.add(jCboTMSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 20));

        jTxtTMSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtTMSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtTMSearchKeyReleased(evt);
            }
        });

        jPnlTMSearch.add(jTxtTMSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 140, 20));

        jBtnTMSearchClose.setIcon(new javax.swing.ImageIcon("C:\\Program Files\\Microsoft Visual Studio\\Common\\Graphics\\Bitmaps\\TlBr_W95\\BACK.BMP"));
        jBtnTMSearchClose.setMnemonic('e');
        jBtnTMSearchClose.setText("Search Cancel");
        jBtnTMSearchClose.setToolTipText(" ");
        jBtnTMSearchClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnTMSearchCloseActionPerformed(evt);
            }
        });

        jPnlTMSearch.add(jBtnTMSearchClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 140, -1));

        jListTMSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListTMSearchKeyReleased(evt);
            }
        });

        jListTMSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListTMSearchMouseClicked(evt);
            }
        });

        jSPTMSearch.setViewportView(jListTMSearch);

        jPnlTMSearch.add(jSPTMSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 140, 270));

        jPnlTMView.add(jPnlTMSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 160, 390));

        jPnlViewOption.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlViewOption.setBorder(new javax.swing.border.TitledBorder(null, "View Options", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14)));
        jRBtnTMComplete.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnTMComplete.setMnemonic('l');
        jRBtnTMComplete.setText("All Data");
        jRBtnTMComplete.setToolTipText(" ");
        BtnGroup.add(jRBtnTMComplete);
        jRBtnTMComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnTMCompleteActionPerformed(evt);
            }
        });

        jPnlViewOption.add(jRBtnTMComplete, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        jRBtnTMActive.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnTMActive.setMnemonic('t');
        jRBtnTMActive.setText("Active Data");
        jRBtnTMActive.setToolTipText(" ");
        BtnGroup.add(jRBtnTMActive);
        jRBtnTMActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnTMActiveActionPerformed(evt);
            }
        });

        jPnlViewOption.add(jRBtnTMActive, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        jRBtnTMInActive.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnTMInActive.setMnemonic('i');
        jRBtnTMInActive.setText("In Active Data");
        jRBtnTMInActive.setToolTipText(" ");
        BtnGroup.add(jRBtnTMInActive);
        jRBtnTMInActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnTMInActiveActionPerformed(evt);
            }
        });

        jPnlViewOption.add(jRBtnTMInActive, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, -1, -1));

        jPnlTMView.add(jPnlViewOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 600, 60));

        add(jPnlTMView, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 790, 460));

        jPnlTMAdd.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlTMAdd.setVisible(false);
        jTxtTMCode.setBackground(new java.awt.Color(204, 255, 255));
        jTxtTMCode.setEditable(false);
        jPnlTMAdd.add(jTxtTMCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 230, 20));

        jTxtTMDescription.setBackground(new java.awt.Color(204, 255, 255));
        jPnlTMAdd.add(jTxtTMDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 230, 20));

        jTxtTMPercentage.setBackground(new java.awt.Color(204, 255, 255));
        jTxtTMPercentage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtTMPercentageFocusGained(evt);
            }
        });

        jTxtTMPercentage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtTMPercentageKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtTMPercentageKeyReleased(evt);
            }
        });

        jPnlTMAdd.add(jTxtTMPercentage, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 230, 20));

        jLblTMCode.setForeground(new java.awt.Color(0, 51, 51));
        jLblTMCode.setText("Code");
        jPnlTMAdd.add(jLblTMCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, 20));

        jLblTMDescription.setForeground(new java.awt.Color(0, 51, 51));
        jLblTMDescription.setText("Description");
        jPnlTMAdd.add(jLblTMDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, 20));

        jLblTMPercentage.setForeground(new java.awt.Color(0, 51, 51));
        jLblTMPercentage.setText("Percentage");
        jPnlTMAdd.add(jLblTMPercentage, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, -1, 20));

        jBtnTMSave.setMnemonic('S');
        jBtnTMSave.setText("Save");
        jBtnTMSave.setToolTipText(" ");
        jBtnTMSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnTMSaveActionPerformed(evt);
            }
        });

        jPnlTMAdd.add(jBtnTMSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, 90, -1));

        jBtnTMCancel.setMnemonic('C');
        jBtnTMCancel.setText("Cancel");
        jBtnTMCancel.setToolTipText(" ");
        jBtnTMCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnTMCancelActionPerformed(evt);
            }
        });

        jPnlTMAdd.add(jBtnTMCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 200, 90, -1));

        jBtnTMAddSearch.setMnemonic('e');
        jBtnTMAddSearch.setText("Search");
        jBtnTMAddSearch.setToolTipText(" ");
        jBtnTMAddSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnTMAddSearchActionPerformed(evt);
            }
        });

        jPnlTMAdd.add(jBtnTMAddSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 90, -1));

        add(jPnlTMAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 410, 370));

        jLblMain.setFont(new java.awt.Font("Trebuchet MS", 1, 24));
        jLblMain.setForeground(new java.awt.Color(0, 0, 153));
        jLblMain.setText("Tax Master");
        add(jLblMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 30, -1, -1));

    }//GEN-END:initComponents

    private void jTxtTMPercentageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtTMPercentageKeyReleased
        // Add your handling code here:
        numberOnly(evt,jTxtTMPercentage); 
    }//GEN-LAST:event_jTxtTMPercentageKeyReleased

    private void jTblDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblDisplayMouseClicked
        // Add your handling code here:
        clickH=true;
        selrow=jTblDisplay.getSelectedRow();
    }//GEN-LAST:event_jTblDisplayMouseClicked

    private void jSPTMTableComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jSPTMTableComponentResized
        // Add your handling code here:       
         h=jTblDisplay.getRowHeight()*(RowCount+1);
            if(h<290)
                jSPTMTable.setSize(600,h+5);
            else
                jSPTMTable.setSize(600,290);
    }//GEN-LAST:event_jSPTMTableComponentResized

    private void jTxtTMPercentageFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtTMPercentageFocusGained
        // Add your handling code here:
         accessDB();
        try{         
             String select;
             select="Select [TaxDesc] from TaxMaster where TaxDesc IN ('"+jTxtTMDescription.getText()+"')";
             ResultSet res1=stat.executeQuery(select);
          if(!ModFlag){   
                if(res1.next()){
                      JOptionPane.showMessageDialog(this,"Tax Description already exists","UniqueEntry",JOptionPane.INFORMATION_MESSAGE); 
                      jTxtTMDescription.requestFocus();
                      jTxtTMDescription.selectAll();
                      con.close();                     
                }
          }
             con.close();
        }
        catch(Exception ex){
            System.out.println("Error in Percentage field "+ex);
        }
    }//GEN-LAST:event_jTxtTMPercentageFocusGained

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // Add your handling code here:
        displayData("TaxMaster","TaxDesc");
    }//GEN-LAST:event_formComponentShown

    private void jPnlTMViewComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlTMViewComponentShown
        // Add your handling code here:
        displayData("TaxMaster","TaxDesc"); 
        if(RowCount>=1){
             jTblDisplay.clearSelection();      
             jCboTMSearch.setSelectedIndex(0);
             int index=searchElement(  (String)( jListTMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
        }
    }//GEN-LAST:event_jPnlTMViewComponentShown

    private void jBtnTMAddSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnTMAddSearchActionPerformed
        // Add your handling code here:
        jRBtnTMComplete.setSelected(true);
        jBtnTMActivate.setEnabled(true);        
        searchPressed();
    }//GEN-LAST:event_jBtnTMAddSearchActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // Add your handling code here:
        if(evt.getKeyCode()==evt.VK_ALT)
          jBtnTMSearchClose.requestFocus();
    }//GEN-LAST:event_formKeyPressed

    private void jTxtTMPercentageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtTMPercentageKeyPressed
        // Add your handling code here:       
        numberOnly(evt,jTxtTMPercentage);        
    }//GEN-LAST:event_jTxtTMPercentageKeyPressed

    private void jBtnTMAddKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtnTMAddKeyPressed
        // Add your handling code here:
        
    }//GEN-LAST:event_jBtnTMAddKeyPressed

    private void jRBtnTMCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnTMCompleteActionPerformed
        // Add your handling code here:
        displayData("TaxMaster","TaxDesc");
        jBtnTMAdd.setEnabled(true);
        jBtnTMModify.setEnabled(true);
        jBtnTMSearch.setEnabled(true);
        jBtnTMActivate.setEnabled(true);
        jBtnTMInActivate.setEnabled(true);
        
    }//GEN-LAST:event_jRBtnTMCompleteActionPerformed

    private void jRBtnTMActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnTMActiveActionPerformed
        // Add your handling code here:
        displayData("TaxMaster","Active","Y","TaxDesc");
        jBtnTMAdd.setEnabled(true);
        jBtnTMModify.setEnabled(true);
        jBtnTMSearch.setEnabled(true);
        jBtnTMActivate.setEnabled(false);
        jBtnTMInActivate.setEnabled(true);        
    }//GEN-LAST:event_jRBtnTMActiveActionPerformed

    private void jRBtnTMInActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnTMInActiveActionPerformed
        // Add your handling code here:       
        displayData("TaxMaster","Active","N","TaxDesc");
        jBtnTMAdd.setEnabled(false);
        jBtnTMModify.setEnabled(false);
        jBtnTMSearch.setEnabled(true);
        jBtnTMActivate.setEnabled(true);
        jBtnTMInActivate.setEnabled(false);
    }//GEN-LAST:event_jRBtnTMInActiveActionPerformed

    private void jBtnTMExitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtnTMExitKeyReleased
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_ENTER){
            System.exit(0);
        }
    }//GEN-LAST:event_jBtnTMExitKeyReleased

    private void jBtnTMExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtnTMExitKeyPressed
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_ENTER){
            System.exit(0);
        }
    }//GEN-LAST:event_jBtnTMExitKeyPressed

    private void jCboTMSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCboTMSearchKeyReleased
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_UP||KeyCode==evt.VK_DOWN)
            jTxtTMSearch.requestFocus();
        else if(KeyCode==evt.VK_ENTER)
             jTxtTMSearch.requestFocus();
         
       
        jTxtTMSearch.enable();
        jTxtTMSearch.requestFocus(); 
        key="";
        jTxtTMSearch.setText("");
       if (jRBtnTMInActive.isSelected()) 
           jBtnTMModify.setEnabled(false);
       else
           jBtnTMModify.setEnabled(true);
           
        search(jListTMSearch);
    }//GEN-LAST:event_jCboTMSearchKeyReleased

    private void jListTMSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListTMSearchKeyReleased
        // Add your handling code here:     
        
        int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_UP||KeyCode==evt.VK_DOWN){
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListTMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             jTxtTMSearch.setText(""+ jListTMSearch.getSelectedValue());
             jTxtTMSearch.selectAll();
        }
        else if(KeyCode==evt.VK_ENTER){
           if (jRBtnTMInActive.isSelected()) 
               jBtnTMModify.setEnabled(false);
           else{
                int index=searchElement(  (String)( jListTMSearch.getSelectedValue() )  ,unsorted   );                                    
                selrow=index;
                modify();             
           }
        }
       if (jRBtnTMInActive.isSelected()) 
           jBtnTMModify.setEnabled(false);
       else
           jBtnTMModify.setEnabled(true);
    }//GEN-LAST:event_jListTMSearchKeyReleased

    private void jTxtTMSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtTMSearchKeyReleased
        // Add your handling code here:
     //    int KeyCode=evt.getKeyCode();
     //    if (KeyCode==evt.VK_DOWN || KeyCode==evt.VK_UP){
      //     jListTMSearch.requestFocus();
      //     mouseClicked();
     //  }
    }//GEN-LAST:event_jTxtTMSearchKeyReleased

    private void jTblDisplayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblDisplayKeyPressed
        // Add your handling code here:
        int KeyCode=evt.getKeyCode();
        if (KeyCode==evt.VK_TAB){
            if(jPnlTMSearch.isVisible())
                jCboTMSearch.requestFocus();
            else
                jBtnTMAdd.requestFocus();
        }
    }//GEN-LAST:event_jTblDisplayKeyPressed

    private void jTxtTMSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtTMSearchKeyPressed
        // Add your handling code here:
        char KeyChar=evt.getKeyChar();
        int KeyCode=evt.getKeyCode();
        
        
         if(KeyCode==evt.VK_BACK_SPACE||KeyCode==evt.VK_DELETE){
            sb=new StringBuffer(key);
            if (sb.length()>0){
            sb.setLength(sb.length()-1);
            }
            key=sb.toString();          
        }
        else if(KeyCode==evt.VK_ALT || KeyCode==evt.VK_CONTROL || KeyCode==evt.VK_SHIFT){ 
            ;
        } 
        else if(KeyCode==evt.VK_UP || KeyCode==evt.VK_DOWN){
           if (jRBtnTMInActive.isSelected()) 
              jBtnTMModify.setEnabled(false);
           else
               jBtnTMModify.setEnabled(true);
        }
        else if(KeyCode==evt.VK_TAB){ 
          jListTMSearch.requestFocus();
          jListTMSearch.setSelectedIndex(0);
        }
        else if(KeyCode==evt.VK_ENTER){ 
               if (jRBtnTMInActive.isSelected()){ 
                   jBtnTMModify.setEnabled(false);
                   jCboTMSearch.requestFocus();
               }
               else if(jTxtTMSearch.getText().equals(""))
                ;
               else{   
                   int index=searchElement(  (String)( jListTMSearch.getSelectedValue() )  ,unsorted   );                                    
                   selrow=index; 
                   modify();                
               }  
        }
        else if(KeyCode>=33 && KeyCode<=126){
            key+=String.valueOf(KeyChar);
            key=key.trim();
        }
        else
           JOptionPane.showMessageDialog(this,"Enter Suitable value","Error",JOptionPane.INFORMATION_MESSAGE); 
        
        if (jRBtnTMInActive.isSelected()) 
           jBtnTMModify.setEnabled(false);
        else
           jBtnTMModify.setEnabled(true);
        
        search(jListTMSearch);
         
    }//GEN-LAST:event_jTxtTMSearchKeyPressed

    private void jCboTMSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboTMSearchActionPerformed
        // Add your handling code here:               
        jTxtTMSearch.enable();
        jTxtTMSearch.requestFocus();   
        key="";
        jTxtTMSearch.setText("");
             search(jListTMSearch);
             if(RowCount>=1){
                 jTblDisplay.clearSelection();      
                 int index=searchElement(  (String)( jListTMSearch.getSelectedValue() )  ,unsorted   );
                 jTblDisplay.changeSelection( index ,0,true,false);
                 jTxtTMSearch.setText(""+jListTMSearch.getSelectedValue());
                 jTxtTMSearch.selectAll();
             }
        if (jRBtnTMInActive.isSelected())
            jBtnTMModify.setEnabled(false);
        else
            jBtnTMModify.setEnabled(true);  
    }//GEN-LAST:event_jCboTMSearchActionPerformed

    private void jBtnTMActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnTMActivateActionPerformed
        // Add your handling code here:
       if (jTblDisplay.getSelectedColumn()!= -1){ 
            activate("Y","TaxMaster","TaxDesc");
            jRBtnTMComplete.setSelected(true);
            jBtnTMAdd.setEnabled(true);
            jBtnTMModify.setEnabled(true);
            jBtnTMSearch.setEnabled(true);
            jBtnTMInActivate.setEnabled(true);
            jPnlTMSearch.setVisible(false);
            jRBtnTMComplete.setEnabled(true);
            jRBtnTMActive.setEnabled(true);
            jRBtnTMInActive.setEnabled(true);
       }
       else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_jBtnTMActivateActionPerformed

    private void jBtnTMSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnTMSaveActionPerformed
        // Add your handling code here:
         accessDB();
         componentNull();
     if (getError.equals("NoError"))
     {      
        if (ModFlag==false) 
        {  
           int ansSave=JOptionPane.showConfirmDialog(this,"       Are u confirm to save","Save",JOptionPane.YES_NO_OPTION);
           if (ansSave==0){
             newSaveDB();
             if(NoNewSaveError) 
                updateCode("TaxMaster");
             clearText();
             jTblDisplay.requestFocus();
           }
           else{
             clearText();
             jTblDisplay.requestFocus();
           }            
         }
         else 
         {
           int ansModify=JOptionPane.showConfirmDialog(this,"      Are u confirm to Modify","Save",JOptionPane.YES_NO_OPTION);
           if (ansModify==0){  
             modifySaveDB();
             clearText();  
             jTblDisplay.requestFocus();
           }
           else{
              clearText();
              jTblDisplay.requestFocus();
           }
         }
            jPnlTMView.setVisible(true);
            jPnlTMAdd.setVisible(false);           
            jPnlTMSearch.setVisible(false);
            jTblDisplay.changeSelection(0,0,true,false);
            if (jRBtnTMComplete.isSelected())
               displayData("TaxMaster","TaxDesc");
            else if (jRBtnTMActive.isSelected())
              displayData("TaxMaster","Active","Y","TaxDesc");
            
            jBtnTMModify.setEnabled(true);
            jCboTMSearch.setSelectedIndex(0);
            jBtnTMSearch.setEnabled(true);
            jTblDisplay.requestFocus();
            jRBtnTMComplete.setEnabled(true);
            jRBtnTMActive.setEnabled(true);
            jRBtnTMInActive.setEnabled(true);
            jBtnTMActivate.setEnabled(true);
            jRBtnTMComplete.setSelected(true);
     }
     else
     {
        System.out.println("Error");
     }
    }//GEN-LAST:event_jBtnTMSaveActionPerformed

    private void jBtnTMExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnTMExitActionPerformed
        // Add your handling code here:
 this.setVisible(false);
    }//GEN-LAST:event_jBtnTMExitActionPerformed

    private void jListTMSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTMSearchMouseClicked
        // Add your handling code here:
         int keyCode=evt.getClickCount();
           if(keyCode==1){
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListTMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             jTxtTMSearch.setText(""+jListTMSearch.getSelectedValue());
             jTxtTMSearch.selectAll();
           }
           else{
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListTMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             selrow=jTblDisplay.getSelectedRow();             
             modify();            
           }        
    }//GEN-LAST:event_jListTMSearchMouseClicked

    private void jBtnTMCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnTMCancelActionPerformed
        // Add your handling code here:
        if(RowCount>=1){
            jCboTMSearch.setSelectedIndex(0);       
        }
        jPnlTMView.setVisible(true); 
        jPnlTMSearch.setVisible(false);
        jPnlTMAdd.setVisible(false);
        jTblDisplay.requestFocus();
        jBtnTMSearch.setEnabled(true);
        jBtnTMModify.setEnabled(true);
        jRBtnTMComplete.setEnabled(true);        
        jRBtnTMActive.setEnabled(true);
        jRBtnTMInActive.setEnabled(true);
        jBtnTMActivate.setEnabled(true);
        jRBtnTMComplete.setSelected(true);
    }//GEN-LAST:event_jBtnTMCancelActionPerformed

    private void jBtnTMSearchCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnTMSearchCloseActionPerformed
        // Add your handling code here:
        jPnlTMSearch.setVisible(false);
        jTblDisplay.requestFocus();
        jCboTMSearch.setSelectedIndex(0);
        jBtnTMSearch.setEnabled(true);
        jRBtnTMComplete.setEnabled(true);
        jRBtnTMActive.setEnabled(true);
        jRBtnTMInActive.setEnabled(true);
        if (jRBtnTMInActive.isSelected())
            jBtnTMModify.setEnabled(false);
        else
            jBtnTMModify.setEnabled(true);
        
    }//GEN-LAST:event_jBtnTMSearchCloseActionPerformed

    private void jBtnTMSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnTMSearchActionPerformed
        // Add your handling code here:
        searchPressed();
    }//GEN-LAST:event_jBtnTMSearchActionPerformed

    private void jBtnTMAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnTMAddActionPerformed
        // Add your handling code here:
        clearText();
        ModFlag=false;
        jPnlTMView.setVisible(false);
        jPnlTMAdd.setVisible(true);        
        jBtnTMAddSearch.setVisible(false);
        jTxtTMDescription.requestFocus();
        generateCode("TaxMaster",jTxtTMCode);
    }//GEN-LAST:event_jBtnTMAddActionPerformed

    private void jBtnTMInActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnTMInActivateActionPerformed
        // Add your handling code here:
       if (jTblDisplay.getSelectedColumn()!=-1){  
        activate("N","TaxMaster","TaxDesc");  
        jRBtnTMComplete.setSelected(true);
        jBtnTMAdd.setEnabled(true);
        jBtnTMModify.setEnabled(true);
        jBtnTMSearch.setEnabled(true);
        jBtnTMInActivate.setEnabled(true);
        jPnlTMSearch.setVisible(false);
        jRBtnTMComplete.setEnabled(true);
        jRBtnTMActive.setEnabled(true);
        jRBtnTMInActive.setEnabled(true);
       }
       else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jBtnTMInActivateActionPerformed

    private void jBtnTMModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnTMModifyActionPerformed
        // Add your handling code here:
       if(jTblDisplay.getSelectedColumn()!=-1){
            modify();   
            jBtnTMAddSearch.setVisible(true);
       }
       else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jBtnTMModifyActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
            jPnlTMSearch.setVisible(false);
            jPnlTMAdd.setVisible(false);
            jPnlTMView.setVisible(true);
            jBtnTMAdd.requestFocus();
            jRBtnTMComplete.setSelected(true);
            try{
                accessDB();
                String ss = "SELECT * FROM SemaPhores WHERE TableName = 'TaxMaster'";
                ResultSet res = stat.executeQuery(ss);
                if(!res.next()){
                    String ss1="Insert into SemaPhores (TableName,CtrName,MaxCtr) values('TaxMaster','TM_',1)";
                   stat.executeUpdate(ss1);               
                }
                con.close();
           }
           catch(Exception ex){
               System.out.println("Error in form window opened "+ex);
           }
    }//GEN-LAST:event_formWindowOpened

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
  
    /** To display data from the Respective table on to the JTable */
    public void displayData(String TableName,String OrderBy){       
       try{
           accessDB();
           sel="Select * from "+TableName+" ORDER BY "+OrderBy ;
           ResultSet res=stat.executeQuery(sel);
           columnCount(res);
           rowCount(TableName);     
           tableData=new Object [RowCount][ColCount-1];
                   
          for(int row=1;res.next();row++)
          {
              for(int col=1;col<=ColCount-1;col++)
              {                  
                  tableData [row-1][col-1]=res.getString(col+1);
              }
          }      
           con.close();
      }
      catch(Exception ex){
           System.out.println("Error in display Data 1 "+ex);
       }
       getModel();
   }
    
    /** To display data from the Respective table on to the JTable with the Conditon Active or Not*/
    public void displayData(String TableName,String Condition,String Active,String OrderBy){
        try{
            accessDB();
           sel="Select * from "+TableName+" where "+Condition+"='"+Active+"' ORDER BY "+OrderBy ;
           ResultSet res=stat.executeQuery(sel);
           columnCount(res);
           rowCount(TableName,Condition,Active);     
           tableData=new Object [RowCount][ColCount-1];
                   
          for(int row=1;res.next();row++)
          {
              for(int col=1;col<=ColCount-1;col++)
              {                  
                  tableData [row-1][col-1]=res.getString(col+1);
              }
          }      
           con.close();
      }
      catch(Exception ex){
           System.out.println("Error in DisplayData 2 "+ex);          
       }
       getModel();
    }
   
    /** To Initialize the tableModel called in displayData*/
    public void getModel(){
         for(int i=0;i<RowCount;i++){
          tableData[i][2] = new Integer(""+tableData[i][2]  );
         }
        jTblDisplay.setModel(new javax.swing.table.DefaultTableModel(tableData,new String [] {"Code","Description","Percentage","Activate"})
       {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        h=jTblDisplay.getRowHeight()*(RowCount+1);
            if(h<290)
                jSPTMTable.setSize(600,h+5);
            else
                jSPTMTable.setSize(600,290);
    }
    
    
   /** To record the count of the Column in the table */ 
   public void columnCount(ResultSet r){     
       accessDB();
       try{
           ResultSetMetaData rMeta=r.getMetaData();
           ColCount=rMeta.getColumnCount();           
       }
       catch(Exception ex){
           System.out.println("Error in columnCount "+ ex);
       }
                   
   }
   
   /** To record the count of the Row in the Jtable */
   public void rowCount(String TableName){
       try{
           sel="Select Count(*) from "+TableName;
           ResultSet res=stat.executeQuery(sel);
           RowCount=0;
           res.next();
               RowCount=Integer.parseInt(res.getString(1));           
       }
       catch(Exception ex)
       {
           System.out.println("Error in rowCount 1 "+ex);
       }
   }
   
   /** To record the count of the Row in the Jtable with conditon active or not*/
   public void rowCount(String TableName,String Condition,String Active){
       try{
            sel="Select Count(*) from "+TableName+" where "+Condition+"='"+Active+"'";
           ResultSet res=stat.executeQuery(sel);
           RowCount=0;           
           res.next();
               RowCount=Integer.parseInt(res.getString(1));
       }
       catch(Exception ex)
       {
           System.out.println("Error in rowCount 2 "+ex);
       }
   }
   
   /** Establishing the Connection to the Database */
    public void accessDB(){
       try
       { 
        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
        con=DriverManager.getConnection("jdbc:odbc:sha");
        stat=con.createStatement();
       }
       catch(Exception ex)
       {
           System.out.println("Error in accessDB "+ex);
       }   
    }
    
    /** Save New record to the Database */
    public void newSaveDB(){
         try{
                String ins;
                ins="Insert into TaxMaster (TaxCode,TaxDesc,Percentage,Active)";
                ins+=" values('"+jTxtTMCode.getText()+"','"+jTxtTMDescription.getText()+"'";
                ins+=","+jTxtTMPercentage.getText()+",'Y')";
                stat.executeUpdate(ins);
                NoNewSaveError=true;
                con.close();
            }
            catch(Exception ex)
            {
                NoNewSaveError=false;
                System.out.println("Error in newSaveDB "+ex);
            }   
    }
    
    /** Save Modified record to the Database */
    public void modifySaveDB(){
        try{
                
                String upd;
                upd="Update TaxMaster set TaxDesc='"+jTxtTMDescription.getText()+"',Percentage="+jTxtTMPercentage.getText();
                upd+=" where TaxCode='"+jTxtTMCode.getText()+"'";
                stat.executeUpdate(upd);                
                con.close();
            }
            catch(Exception ex)
            {
                System.out.println("Error in modifySaveDB "+ex);
            }
    }
    
    /** To Automatic generate next code after click of Add Button */
     private void generateCode(String TableName,javax.swing.JTextField jTxtCode){
     try{
         accessDB();
         String ss = "SELECT * FROM SemaPhores WHERE TableName = '"+TableName+"'";
         ResultSet res = stat.executeQuery(ss);
         res.next();
         ctr = Integer.parseInt(res.getString(4));
         if(ctr < 10)
            jTxtCode.setText(res.getString(3)+"00"+ctr);  
         else if(ctr >= 10 && ctr < 100)
            jTxtCode.setText(res.getString(3)+"0"+ctr); 
         else if(ctr >= 100 && ctr < 1000)
            jTxtCode.setText(res.getString(3)+""+ctr);    
         con.close();
     }
     catch(Exception e){
         System.out.println("Error in generateCode"+e+"\n1043");
     }
   }
 
   /** To update the counter in the table SemaPhores after of Save Button*/   
   private void updateCode(String TableName){
      try{
          accessDB();
          ctr++;
          String ss1 = "UPDATE SemaPhores SET  MaxCtr = "+ctr+" WHERE TableName ='"+TableName+"'";
          stat.executeUpdate(ss1);          
          con.close();
      } 
      catch(Exception e){
         System.out.println("Error in updateCode"+e+"\n1057");
      }
    }
    
      
    /**Disables all the control or components in the form */    
    public void lockControl(){
       
        jTxtTMCode.disable(); jTxtTMDescription.disable(); jTxtTMPercentage.disable();        
    }
    
    /** Enables all the control or components in the form */    
    public void openLock(){
        
        jTxtTMCode.enable(); jTxtTMDescription.enable(); jTxtTMPercentage.enable(); 
    }
    
    /** set the Component fields to null*/
    public void clearText(){
        jTxtTMCode.setText(""); jTxtTMDescription.setText(""); jTxtTMPercentage.setText(""); 
    }    
    
    /** Checking each component for null entry in the form */
     public void componentNull(){
        
        if (jTxtTMCode.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Code field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtTMCode.requestFocus();
            
        }  
        else if (jTxtTMDescription.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Description field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtTMDescription.requestFocus();
        }  
        else if (jTxtTMPercentage.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Percentage field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtTMPercentage.requestFocus();
        }  
        else{
        getError="NoError";
        }
    }
     
     /** To Activate Or Inactivate the particular row in the Table */
     public void activate(String Activate,String TableName,String OrderBy){
        accessDB();
        tableRow=jTblDisplay.getSelectedRow();
                
            if (tableRow==-1)
                  tableRow=0;
                 
        try{
          stat.executeUpdate("Update "+TableName+" set Active='"+Activate+"' where TaxCode='"+tableData [tableRow][0]+"'");
          con.close();
          displayData(TableName,OrderBy); 
        }
        catch(Exception ex)
        {
            System.out.println("Error in activate "+ex);
        }
     }

      /** sorts the Strings in alphabatic order and used in search method below */
      public void sortStrings(Object [][] rawData,int rows,int colNo,javax.swing.JList listSearch){
         list.removeAllElements();
         sorted=new String[rows];
         unsorted=new String[rows]; 
         
         for(j=0;j<rows;j++){
            unsorted[j]=((String)(rawData[j][colNo])).trim();
            sorted[j]=unsorted[j];  
         }
         for (j=0;j<rows;j++){
             for(i=j+1;i<rows;i++){
                 if (sorted[i].compareToIgnoreCase(sorted[j])<0){
                     String temp=sorted[j];
                     sorted[j]=sorted[i];
                     sorted[i]=temp;                     
                 }
             }
         }
         for(j=0;j<rows;j++){
             list.addElement(sorted[j]);
             listSearch.setListData(list);
         }
     }
     
     /** method supporting the search method below*/
     public void displaySearch(javax.swing.JList listSearch){
         for(i=0;i<sorted.length;i++){
             if (sorted[i].regionMatches(true,0,key,0,key.length())){
                 listSearch.setSelectedValue(sorted[i],true);
                 eleFound=true;
                 break;
             }
         }
         if(!eleFound)
             JOptionPane.showMessageDialog(this,"No match found","Sorry",JOptionPane.ERROR_MESSAGE);
         
         eleFound=false;
     }
     
      /** display the text in the jListSearch in the alphabatic order */
     public void search(javax.swing.JList listSearch){
      if(RowCount>=1){
        if (jRBtnTMComplete.isSelected()){
             displayData("TaxMaster","TaxDesc");
             list = new Vector(RowCount);
             if(jCboTMSearch.getSelectedItem().equals("Code"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);

             displaySearch(listSearch);
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListTMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);                  
        }
        else if(jRBtnTMActive.isSelected()){
            displayData("TaxMaster","Active","Y","TaxDesc");
             list = new Vector(RowCount);
             if(jCboTMSearch.getSelectedItem().equals("Code"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);

             displaySearch(listSearch);
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListTMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);                   
        }
        else if(jRBtnTMInActive.isSelected()){
            displayData("TaxMaster","Active","N","TaxDesc");
             list = new Vector(RowCount);
             if(jCboTMSearch.getSelectedItem().equals("Code"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);

             displaySearch(listSearch);
            jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListTMSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);                 
        }
      }
     }
    
     /** action to be performed on click of modify */
     public void modify(){
         ModFlag=true;
          if (selrow==-1)
             selrow=0;
         
      if(jTblDisplay.getValueAt(selrow,3).equals("N"))
           JOptionPane.showMessageDialog(this,"Cannot Modify the InActivate Record","Information",JOptionPane.INFORMATION_MESSAGE);         
      else if (!jRBtnTMInActive.isSelected()){ 
            jBtnTMModify.setEnabled(false);
            jPnlTMAdd.setVisible(true); 
            jPnlTMView.setVisible(false);            
            clearText();           
             tableRow=jTblDisplay.getSelectedRow();

                if (tableRow==-1)
                      tableRow=0;

            jTxtTMCode.setText((String)(tableData [tableRow][0]));
            jTxtTMDescription.setText((String)(tableData [tableRow][1]));
            jTxtTMPercentage.setText(""+tableData [tableRow][2]);
            jTxtTMDescription.selectAll();
            jTxtTMDescription.requestFocus();            
       }
        else
           jBtnTMModify.setEnabled(false); 
     }
     
      /** To get the row Count of the Jtable on selection of an item in listSearch */   
      private int searchElement(String key, String[] a) {
        int indx=-1;
        for(i=0;i<a.length;i++){
            if( key.equals(a[i]) )
                indx=i;
        }            
        return indx;
    }
     
     /** Changes to be performed on click of Search Button */
     private void searchPressed(){
       if(RowCount==0){
           JOptionPane.showMessageDialog(this,"Database is Empty, Add new Data","Search",JOptionPane.INFORMATION_MESSAGE);
       }      
       else{        
        jPnlTMSearch.setVisible(true);
        jPnlTMAdd.setVisible(false);
        jPnlTMView.setVisible(true);
        jCboTMSearch.setSelectedItem("Code");  
        jListTMSearch.setSelectedIndex(0);
        jTblDisplay.clearSelection();
        int rowIndex=searchElement(  (String)( jListTMSearch.getSelectedValue() )  ,unsorted   );        
        jBtnTMModify.setEnabled(false);
        jBtnTMSearch.setEnabled(false);
        jTxtTMSearch.requestFocus();
        jTxtTMSearch.setText(""+jListTMSearch.getSelectedValue());
        jTxtTMSearch.selectAll();
        jTblDisplay.changeSelection( rowIndex ,0,true,false);       
        jRBtnTMComplete.setEnabled(false);
        jRBtnTMActive.setEnabled(false);
        jRBtnTMInActive.setEnabled(false);        
       }
     }
     
      /** Allow Only Numbers to be entered in the text field */
      public void numberOnly(java.awt.event.KeyEvent num,javax.swing.JTextField jTxt){
         int KeyCode= num.getKeyCode();
         char KeyChar=num.getKeyChar();
         String KeyEntered="";
         StringBuffer StoreString;
         if(KeyCode==num.VK_SHIFT){            
           JOptionPane.showMessageDialog(this,"Enter Only Numbers","Number Only",JOptionPane.ERROR_MESSAGE);
         }
         else if (KeyCode >= 48 && KeyCode <= 57 || KeyCode==46 ){
             // Key Code of Numbers  
            KeyEntered+=String.valueOf(KeyChar);
            KeyEntered=KeyEntered.trim();
         }
         else if (KeyCode >= 96 && KeyCode <= 105 || KeyCode==110){
             KeyEntered+=String.valueOf(KeyChar);
             KeyEntered=KeyEntered.trim();;//Side Pallete Numbers and Dot
         }
         else if (KeyCode >= 37 && KeyCode <= 40){
             ;//up,down,right,left arrows    
         }
         else if (KeyCode >= 0 && KeyCode <= 32 || KeyCode==127){
             ;//Key code of non printable characters  
         }
        
         else{
             //System.out.println(KeyCode);
              StoreString=new StringBuffer(KeyEntered);
            if (StoreString.length()>0){
            StoreString.setLength(StoreString.length()-1);
            }
              KeyEntered=StoreString.toString();
              JOptionPane.showMessageDialog(this,"Enter Only Numbers","Number Only",JOptionPane.ERROR_MESSAGE);
              jTxt.setText(KeyEntered);
         }  
     }  
     
    /**
    * @param args the command line arguments
    */
    /*public static void main(String args[]) {
        new TaxMaster().show();
    }//*/


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnTMAdd;
    private javax.swing.JPanel jPnlViewOption;
    private javax.swing.JScrollPane jSPTMTable;
    private javax.swing.JTextField jTxtTMCode;
    private javax.swing.JScrollPane jSPTMSearch;
    private javax.swing.JButton jBtnTMSave;
    private javax.swing.JPanel jPnlTMAdd;
    private javax.swing.JButton jBtnTMSearch;
    private javax.swing.JTextField jTxtTMSearch;
    private javax.swing.JRadioButton jRBtnTMActive;
    private javax.swing.JPanel jPnlTMView;
    private javax.swing.JTextField jTxtTMDescription;
    private javax.swing.JButton jBtnTMModify;
    private javax.swing.JButton jBtnTMSearchClose;
    private javax.swing.JRadioButton jRBtnTMComplete;
    private javax.swing.ButtonGroup BtnGroup;
    private javax.swing.JTextField jTxtTMPercentage;
    private javax.swing.JLabel jLblMain;
    private javax.swing.JButton jBtnTMActivate;
    private javax.swing.JLabel jLblTMDescription;
    private javax.swing.JPanel jPnlTMSearch;
    private javax.swing.JTable jTblDisplay;
    private javax.swing.JButton jBtnTMInActivate;
    private javax.swing.JLabel jLblTMPercentage;
    private javax.swing.JList jListTMSearch;
    private javax.swing.JComboBox jCboTMSearch;
    private javax.swing.JLabel jLblTMCode;
    private javax.swing.JButton jBtnTMExit;
    private javax.swing.JButton jBtnTMAddSearch;
    private javax.swing.JRadioButton jRBtnTMInActive;
    private javax.swing.JButton jBtnTMCancel;
    // End of variables declaration//GEN-END:variables
    Object tableData [][];
    Connection con;
    Statement stat;
    int RowCount=0,ColCount=0,tableRow=0,j=0,i=0,ctr=0,h=0,selrow=0;    
    String sel="",getError="",key="",unsorted[],sorted[];        
    Vector v=new Vector(); 
    Vector list;    
    boolean eleFound=false,add=false,ModFlag=false,clickH=false,NoNewSaveError=false;  
    StringBuffer sb;   
}

