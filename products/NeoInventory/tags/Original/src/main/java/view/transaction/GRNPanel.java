/*
 * GRN.java
 *
 * Created on 02 December 2002, 14:29
 */

package view.transaction;
import java.sql.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.util.*;
import usefulClasses.databaseOperations.LinkDB;
/**
 *
 * @author  Shanmugam
 */
public class GRNPanel extends javax.swing.JPanel {

    /** Creates new form GRN */
    public GRNPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
     
    private void initComponents() {//GEN-BEGIN:initComponents
        jLblGRNMain = new javax.swing.JLabel();
        jPnlGRNView = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTblGRNHeader = new javax.swing.JTable();
        jLblGRNFromDate = new javax.swing.JLabel();
        jCboGRNFromDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            jCboGRNFromDD.addItem("0"+i);

            else
            jCboGRNFromDD.addItem(""+i);
        }//end DDMM for loop

        jCboGRNFromMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            jCboGRNFromMM.addItem("0"+i);

            else
            jCboGRNFromMM.addItem(""+i);

        }//end DDMM for loop

        jLblGRNPONo = new javax.swing.JLabel();
        jCboGRNPONo = new javax.swing.JComboBox();
        jCboGRNPONo.addItem("[All Items]");
        try{
            accessDB();
            String ss = "SELECT POM_No FROM PurchaseOrderHead where Cancelled='N' ORDER BY POM_No";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNPONo.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch
        jCboGRNPONo.setSelectedIndex(0 );

        jLblGRNFromDMY = new javax.swing.JLabel();
        jCboGRNFromYYYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        jCboGRNFromYYYY.addItem(""+i);

        jLblGRNToDate = new javax.swing.JLabel();
        jCboGRNToDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            jCboGRNToDD.addItem("0"+i);

            else
            jCboGRNToDD.addItem(""+i);

        }//end DDMM for loop

        jCboGRNToDD.setSelectedItem("31");

        jCboGRNToMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            jCboGRNToMM.addItem("0"+i);

            else
            jCboGRNToMM.addItem(""+i);

        }//end DDMM for loop

        jCboGRNToMM.setSelectedItem("12");

        jCboGRNToYYYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        jCboGRNToYYYY.addItem(""+i);

        jCboGRNToYYYY.setSelectedItem("2100");
        jLblGRNSupplier = new javax.swing.JLabel();
        jCboGRNSupplier = new javax.swing.JComboBox();
        jCboGRNSupplier.addItem("[All Items]");
        try{
            accessDB();
            String ss = "SELECT supName FROM SupplierMaster where Active='Y' ORDER BY SupName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNSupplier.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboGRNSupplier.setSelectedIndex(0 );
        jBtnGRNAdd = new javax.swing.JButton();
        jBtnGRNModify = new javax.swing.JButton();
        jBtnGRNSearch = new javax.swing.JButton();
        jBtnGRNCancelView = new javax.swing.JButton();
        jBtnGRNExit = new javax.swing.JButton();
        jPnlGRNSearch = new javax.swing.JPanel();
        jCboGRNSearch = new javax.swing.JComboBox();
        jTxtGRNSearch = new javax.swing.JTextField();
        jSPaneGRN = new javax.swing.JScrollPane();
        jListGRNSearch = new javax.swing.JList();
        jBtnGRNSearchClose = new javax.swing.JButton();
        jPnlGRNAdd = new javax.swing.JPanel();
        jLblGRNCode = new javax.swing.JLabel();
        jTxtGRNCode = new javax.swing.JTextField();
        jLblGRNDate = new javax.swing.JLabel();
        jTxtGRNBillNo = new javax.swing.JTextField();
        jTxtGRNMisc = new javax.swing.JTextField();
        jLblGRNSupplierName = new javax.swing.JLabel();
        jLblGRNDCNo = new javax.swing.JLabel();
        jLblGRNBillDate = new javax.swing.JLabel();
        jLblGRNPONO = new javax.swing.JLabel();
        jLblGRNAuthBy = new javax.swing.JLabel();
        jLblGRNBillNo = new javax.swing.JLabel();
        jLblGRNMisc = new javax.swing.JLabel();
        jLblGRNDiscount = new javax.swing.JLabel();
        jLblGRNTax = new javax.swing.JLabel();
        jCboGRNSupplierName = new javax.swing.JComboBox();
        jCboGRNSupplierName.addItem("Select one");

        try{
            accessDB();
            String ss = "SELECT supName FROM SupplierMaster where Active='Y' ORDER BY SupName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNSupplierName.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboGRNPONO = new javax.swing.JComboBox();
        jCboGRNPONO.addItem("Select one" );
        try{
            accessDB();
            String ss = "SELECT POM_No FROM PurchaseOrderHead where Cancelled='N' ORDER BY POM_No";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNPONO.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboGRNAuthBy = new javax.swing.JComboBox();
        jCboGRNAuthBy.addItem("Select one");

        try{
            accessDB();
            String ss = "SELECT EmpName FROM EmployeeMaster  where Active='Y' ORDER BY EmpName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNAuthBy.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboGRNDateDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            jCboGRNDateDD.addItem("0"+i);

            else
            jCboGRNDateDD.addItem(""+i);

        }//end DDMM for loop

        jCboGRNDateMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            jCboGRNDateMM.addItem("0"+i);

            else
            jCboGRNDateMM.addItem(""+i);

        }//end DDMM for loop

        jCboGRNDateYYYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        jCboGRNDateYYYY.addItem(""+i);

        jCboGRNBillDateDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            jCboGRNBillDateDD.addItem("0"+i);

            else
            jCboGRNBillDateDD.addItem(""+i);

        }//end DDMM for loop

        jCboGRNBillDateMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            jCboGRNBillDateMM.addItem("0"+i);

            else
            jCboGRNBillDateMM.addItem(""+i);

        }//end DDMM for loop

        jCboGRNBillDateYYYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        jCboGRNBillDateYYYY.addItem(""+i);

        jLblGRNDMY = new javax.swing.JLabel();
        jScrPaneGRNRemarks = new javax.swing.JScrollPane();
        jTxtAreaGRNRemarks = new javax.swing.JTextArea();
        jTxtGRNDCNo = new javax.swing.JTextField();
        jCboGRNTax = new javax.swing.JComboBox();
        jCboGRNTax.addItem("0%");

        try{
            accessDB();
            String ss = "SELECT TaxDesc,Percentage FROM TaxMaster where Active='Y' ORDER BY TaxDesc ";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNTax.addItem(res.getString(1)+"-"+res.getString(2)+"%");
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboGRNDiscount = new javax.swing.JComboBox();
        jCboGRNDiscount.addItem("0%");

        try{
            accessDB();
            String ss = "SELECT DM_Name,DM_Value FROM DiscountMaster where Active='Y' ORDER BY DM_Name";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNDiscount.addItem(res.getString(1)+"-"+res.getString(2)+"%");
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jLblGRNStoreID = new javax.swing.JLabel();
        jCboGRNStoreID = new javax.swing.JComboBox();
        jCboGRNStoreID.addItem("Select one");

        try{
            accessDB();
            String ss = "SELECT StoreName FROM StoreMaster  where Active='Y' ORDER BY StoreName";       ;
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNStoreID.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jPnlGRNDetails = new javax.swing.JPanel();
        jScrPaneGRNItem = new javax.swing.JScrollPane();
        jPnlGRNAddItem = new javax.swing.JPanel();
        jLblGRNSlNo = new javax.swing.JLabel();
        jLblGRNItemName = new javax.swing.JLabel();
        jLblGRNIBatchNo = new javax.swing.JLabel();
        jLblGRNExpiryDate = new javax.swing.JLabel();
        jLblGRNBulkCP = new javax.swing.JLabel();
        jLblGRNPackCP = new javax.swing.JLabel();
        jLblGRNLooseCP = new javax.swing.JLabel();
        jLblGRNCurrency = new javax.swing.JLabel();
        jLblGRNBulkQty = new javax.swing.JLabel();
        jLblGRNPackQty = new javax.swing.JLabel();
        jLblGRNDiscountDetail = new javax.swing.JLabel();
        jLblGRNTaxDetail = new javax.swing.JLabel();
        jLblGRNLooseSP = new javax.swing.JLabel();
        jTxtGRNSlNo = new javax.swing.JTextField();
        jTxtGRNBulkCP = new javax.swing.JTextField();
        jTxtGRNPackCP = new javax.swing.JTextField();
        jTxtGRNLooseCP = new javax.swing.JTextField();
        jTxtGRNBulkQty = new javax.swing.JTextField();
        jTxtGRNPackQty = new javax.swing.JTextField();
        jTxtGRNLooseSP = new javax.swing.JTextField();
        jTblGRNDetails = new javax.swing.JTable();
        jCboGRNItemName = new javax.swing.JComboBox();
        jTxtGRNBatchNo = new javax.swing.JTextField();
        jCboGRNExDateDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            jCboGRNExDateDD.addItem("0"+i);

            else
            jCboGRNExDateDD.addItem(""+i);

        }
        jCboGRNExDateMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            jCboGRNExDateMM.addItem("0"+i);

            else
            jCboGRNExDateMM.addItem(""+i);

        }
        jCboGRNExDateYYYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        jCboGRNExDateYYYY.addItem(""+i);

        jCboGRNCurrency = new javax.swing.JComboBox();
        jCboGRNCurrency.addItem("Select one");

        try{
            accessDB();
            String ss = "SELECT CM_Name FROM CurrencyMaster where Active='Y' Order By CM_Name";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNCurrency.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jLblGRNLooseQty = new javax.swing.JLabel();
        jTxtGRNLooseQty = new javax.swing.JTextField();
        jLblGRNFreeBQty = new javax.swing.JLabel();
        jTxtGRNFreeBQty = new javax.swing.JTextField();
        jLblGRNFreePQty = new javax.swing.JLabel();
        jTxtGRNFreePQty = new javax.swing.JTextField();
        jLblGRNFreeLQty = new javax.swing.JLabel();
        jTxtGRNFreeLQty = new javax.swing.JTextField();
        jLblGRNBulkSP = new javax.swing.JLabel();
        jTxtGRNBulkSP = new javax.swing.JTextField();
        jLblGRNPackSP = new javax.swing.JLabel();
        jTxtGRNPackSP = new javax.swing.JTextField();
        jLblGRNItemTot = new javax.swing.JLabel();
        jTxtGRNItemTot = new javax.swing.JTextField();
        jCboGRNDiscountDetail = new javax.swing.JComboBox();
        jCboGRNDiscountDetail.addItem("0%");

        try{
            accessDB();
            String ss = "SELECT DM_Name,DM_Value FROM DiscountMaster where Active='Y' ORDER BY DM_Name";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNDiscountDetail.addItem(res.getString(1)+"-"+res.getString(2)+"%");
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboGRNTaxDetail = new javax.swing.JComboBox();
        jCboGRNTaxDetail.addItem("0%");

        try{
            accessDB();
            String ss = "SELECT TaxDesc,Percentage FROM TaxMaster where Active='Y' ORDER BY TaxDesc";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNTaxDetail.addItem(res.getString(1)+"-"+res.getString(2)+"%");
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jBtnGRNFinish = new javax.swing.JButton();
        jBtnGRNEditItem = new javax.swing.JButton();
        jBtnGRNRemoveItem = new javax.swing.JButton();
        jBtnGRNAddItem = new javax.swing.JButton();
        jBtnGRNSaveEdit = new javax.swing.JButton();
        jBtnGRNSave = new javax.swing.JButton();
        jBtnGRNBack = new javax.swing.JButton();
        jLblGRNRemarks = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLblGRNMain.setFont(new java.awt.Font("Dialog", 1, 24));
        jLblGRNMain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLblGRNMain.setText("Goods Receipt Note");
        add(jLblGRNMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 300, -1));

        jPnlGRNView.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlGRNView.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPnlGRNViewComponentShown(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(204, 255, 255));
        jScrollPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane1ComponentResized(evt);
            }
        });

        jTblGRNHeader.setToolTipText("alt + t");
        jTblGRNHeader.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        displayData();
        jTblGRNHeader.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTblGRNHeaderKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTblGRNHeaderKeyReleased(evt);
            }
        });

        jTblGRNHeader.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblGRNHeaderMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTblGRNHeader);

        jPnlGRNView.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 580, 320));

        jLblGRNFromDate.setBackground(new java.awt.Color(255, 255, 102));
        jLblGRNFromDate.setText("From Date");
        jPnlGRNView.add(jLblGRNFromDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, 20));

        jCboGRNFromDD.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNFromDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNFromDDActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jCboGRNFromDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 50, 20));

        jCboGRNFromMM.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNFromMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNFromMMActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jCboGRNFromMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 50, 20));

        jLblGRNPONo.setText("PO No");
        jPnlGRNView.add(jLblGRNPONo, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, -1, 20));

        jCboGRNPONo.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNPONo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNPONoActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jCboGRNPONo, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 30, 220, 20));

        jLblGRNFromDMY.setFont(new java.awt.Font("Dialog", 1, 10));
        jLblGRNFromDMY.setText("  DD          /  MM        /  YYYY");
        jPnlGRNView.add(jLblGRNFromDMY, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 170, 30));

        jCboGRNFromYYYY.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNFromYYYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNFromYYYYActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jCboGRNFromYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 70, 20));

        jLblGRNToDate.setBackground(new java.awt.Color(255, 255, 102));
        jLblGRNToDate.setText("To Date");
        jPnlGRNView.add(jLblGRNToDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 20));

        jCboGRNToDD.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNToDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNToDDActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jCboGRNToDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 50, 20));

        jCboGRNToMM.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNToMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNToMMActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jCboGRNToMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 50, 20));

        jCboGRNToYYYY.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNToYYYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNToYYYYActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jCboGRNToYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, 70, 20));

        jLblGRNSupplier.setText("Supplier");
        jPnlGRNView.add(jLblGRNSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 60, -1, 20));

        jCboGRNSupplier.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNSupplierActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jCboGRNSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 60, 220, 20));

        jBtnGRNAdd.setMnemonic('A');
        jBtnGRNAdd.setText("Add");
        jBtnGRNAdd.setToolTipText(" ");
        jBtnGRNAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNAddActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jBtnGRNAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 420, 100, -1));

        jBtnGRNModify.setMnemonic('M');
        jBtnGRNModify.setText("Modify");
        jBtnGRNModify.setToolTipText(" ");
        jBtnGRNModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNModifyActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jBtnGRNModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 420, 100, -1));

        jBtnGRNSearch.setMnemonic('s');
        jBtnGRNSearch.setText("Search");
        jBtnGRNSearch.setToolTipText(" ");
        jBtnGRNSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNSearchActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jBtnGRNSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 420, 100, -1));

        jBtnGRNCancelView.setMnemonic('C');
        jBtnGRNCancelView.setText("Cancel");
        jBtnGRNCancelView.setToolTipText(" ");
        jBtnGRNCancelView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNCancelViewActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jBtnGRNCancelView, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 420, 100, -1));

        jBtnGRNExit.setMnemonic('x');
        jBtnGRNExit.setText("Exit");
        jBtnGRNExit.setToolTipText(" ");
        jBtnGRNExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNExitActionPerformed(evt);
            }
        });

        jPnlGRNView.add(jBtnGRNExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 420, 100, -1));

        jPnlGRNSearch.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlGRNSearch.setBorder(new javax.swing.border.TitledBorder(null, "Search", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 0, 14)));
        jPnlGRNSearch.setVisible(false);
        jCboGRNSearch.addItem("GRN No");
        jCboGRNSearch.addItem("GRN Date");
        jCboGRNSearch.addItem("Supplier Name");
        jCboGRNSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNSearchActionPerformed(evt);
            }
        });

        jPnlGRNSearch.add(jCboGRNSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 150, 20));

        jTxtGRNSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtGRNSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtGRNSearchKeyReleased(evt);
            }
        });

        jPnlGRNSearch.add(jTxtGRNSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 150, 20));

        jListGRNSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListGRNSearchKeyReleased(evt);
            }
        });

        jListGRNSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListGRNSearchMouseClicked(evt);
            }
        });

        jSPaneGRN.setViewportView(jListGRNSearch);

        jPnlGRNSearch.add(jSPaneGRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 150, 300));

        jBtnGRNSearchClose.setIcon(new javax.swing.ImageIcon("C:\\Program Files\\Microsoft Visual Studio\\Common\\Graphics\\Bitmaps\\TlBr_W95\\BACK.BMP"));
        jBtnGRNSearchClose.setMnemonic('e');
        jBtnGRNSearchClose.setText("Search Cancel");
        jBtnGRNSearchClose.setToolTipText(" ");
        jBtnGRNSearchClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNSearchCloseActionPerformed(evt);
            }
        });

        jPnlGRNSearch.add(jBtnGRNSearchClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 150, -1));

        jPnlGRNView.add(jPnlGRNSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, 170, 430));

        add(jPnlGRNView, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 1030, 550));

        jPnlGRNAdd.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlGRNAdd.setVisible(false);
        jPnlGRNAdd.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jPnlGRNAddComponentHidden(evt);
            }
        });

        jLblGRNCode.setText("GRN NO");
        jPnlGRNAdd.add(jLblGRNCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 50, 20));

        jTxtGRNCode.setEnabled(false);
        jPnlGRNAdd.add(jTxtGRNCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 120, 20));

        jLblGRNDate.setText("Date");
        jPnlGRNAdd.add(jLblGRNDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, 40, 20));

        jPnlGRNAdd.add(jTxtGRNBillNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 120, 20));

        jTxtGRNMisc.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNMisc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtGRNMiscKeyPressed(evt);
            }
        });

        jPnlGRNAdd.add(jTxtGRNMisc, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 120, 20));

        jLblGRNSupplierName.setText("Supplier ");
        jPnlGRNAdd.add(jLblGRNSupplierName, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 70, 60, 20));

        jLblGRNDCNo.setText("DC No");
        jPnlGRNAdd.add(jLblGRNDCNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 40, 20));

        jLblGRNBillDate.setText("Bill Date");
        jPnlGRNAdd.add(jLblGRNBillDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, 50, 20));

        jLblGRNPONO.setText("PO No");
        jPnlGRNAdd.add(jLblGRNPONO, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 50, 20));

        jLblGRNAuthBy.setText("Auth  By");
        jPnlGRNAdd.add(jLblGRNAuthBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 100, 60, 20));

        jLblGRNBillNo.setText("Bill No");
        jPnlGRNAdd.add(jLblGRNBillNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 40, 20));

        jLblGRNMisc.setText("Misc");
        jPnlGRNAdd.add(jLblGRNMisc, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 50, 20));

        jLblGRNDiscount.setText("Discount%");
        jPnlGRNAdd.add(jLblGRNDiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, -1, 20));

        jLblGRNTax.setText("Tax% ");
        jPnlGRNAdd.add(jLblGRNTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, 50, 20));

        jCboGRNSupplierName.setFont(new java.awt.Font("Dialog", 0, 12));
        jPnlGRNAdd.add(jCboGRNSupplierName, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 70, 220, 20));

        jCboGRNPONO.setFont(new java.awt.Font("Dialog", 0, 12));
        jPnlGRNAdd.add(jCboGRNPONO, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, 170, 20));

        jCboGRNAuthBy.setFont(new java.awt.Font("Dialog", 0, 12));
        jPnlGRNAdd.add(jCboGRNAuthBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 100, 220, 20));

        jCboGRNDateDD.setFont(new java.awt.Font("Dialog", 0, 12));

        jCboGRNDateDD.setSelectedIndex(curDate.getDate()-1);

        jPnlGRNAdd.add(jCboGRNDateDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 50, 20));

        jCboGRNDateMM.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNDateMM.setSelectedIndex(curDate.getMonth());

        jPnlGRNAdd.add(jCboGRNDateMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 40, 50, 20));

        jCboGRNDateYYYY.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNDateYYYY.setSelectedIndex( curDate.getYear()-50 );

        jCboGRNDateYYYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNDateYYYYActionPerformed(evt);
            }
        });

        jPnlGRNAdd.add(jCboGRNDateYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 40, 70, 20));

        jCboGRNBillDateDD.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNBillDateDD.setSelectedIndex(curDate.getDate()-1);
        jPnlGRNAdd.add(jCboGRNBillDateDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, 50, 20));

        jCboGRNBillDateMM.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNBillDateMM.setSelectedIndex(curDate.getMonth());

        jPnlGRNAdd.add(jCboGRNBillDateMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 100, 50, 20));

        jCboGRNBillDateYYYY.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNBillDateYYYY.setSelectedIndex( curDate.getYear()-50 );
        jCboGRNBillDateYYYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNBillDateYYYYActionPerformed(evt);
            }
        });

        jPnlGRNAdd.add(jCboGRNBillDateYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, 70, 20));

        jLblGRNDMY.setFont(new java.awt.Font("Dialog", 1, 10));
        jLblGRNDMY.setText("   DD         /  MM        / YYYY");
        jPnlGRNAdd.add(jLblGRNDMY, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 170, 30));

        jTxtAreaGRNRemarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtAreaGRNRemarksKeyPressed(evt);
            }
        });

        jScrPaneGRNRemarks.setViewportView(jTxtAreaGRNRemarks);

        jPnlGRNAdd.add(jScrPaneGRNRemarks, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 130, 220, 50));

        jPnlGRNAdd.add(jTxtGRNDCNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 120, 20));

        jCboGRNTax.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNTax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCboGRNTaxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jCboGRNTaxKeyReleased(evt);
            }
        });

        jPnlGRNAdd.add(jCboGRNTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 130, 170, 20));

        jCboGRNDiscount.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCboGRNDiscountKeyPressed(evt);
            }
        });

        jPnlGRNAdd.add(jCboGRNDiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 160, 170, 20));

        jLblGRNStoreID.setText("Store ");
        jPnlGRNAdd.add(jLblGRNStoreID, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 40, -1, 20));

        jCboGRNStoreID.setFont(new java.awt.Font("Dialog", 0, 12));
        jPnlGRNAdd.add(jCboGRNStoreID, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 40, 220, 20));

        jPnlGRNDetails.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlGRNDetails.setBorder(new javax.swing.border.TitledBorder(null, "GRN Details", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 18), new java.awt.Color(0, 0, 204)));
        jPnlGRNAddItem.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlGRNAddItem.setBackground(new java.awt.Color(205, 206, 255));
        jLblGRNSlNo.setText("Sl. No.");
        jPnlGRNAddItem.add(jLblGRNSlNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 40, -1));

        jLblGRNItemName.setText("Item Name");
        jPnlGRNAddItem.add(jLblGRNItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, -1, -1));

        jLblGRNIBatchNo.setText("Batch No");
        jPnlGRNAddItem.add(jLblGRNIBatchNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, -1, -1));

        jLblGRNExpiryDate.setText("Expiry Date");
        jPnlGRNAddItem.add(jLblGRNExpiryDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, -1));

        jLblGRNBulkCP.setText("Bulk CP");
        jPnlGRNAddItem.add(jLblGRNBulkCP, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, -1, -1));

        jLblGRNPackCP.setText("Pack CP");
        jPnlGRNAddItem.add(jLblGRNPackCP, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, -1, -1));

        jLblGRNLooseCP.setText("Loose CP");
        jPnlGRNAddItem.add(jLblGRNLooseCP, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, -1, -1));

        jLblGRNCurrency.setText("Currency");
        jPnlGRNAddItem.add(jLblGRNCurrency, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 10, 70, -1));

        jLblGRNBulkQty.setText("Bulk Qty.");
        jPnlGRNAddItem.add(jLblGRNBulkQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 10, -1, -1));

        jLblGRNPackQty.setText("Pack Qty.");
        jPnlGRNAddItem.add(jLblGRNPackQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 10, -1, -1));

        jLblGRNDiscountDetail.setText("Discount");
        jPnlGRNAddItem.add(jLblGRNDiscountDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1360, 10, -1, -1));

        jLblGRNTaxDetail.setText("Tax");
        jPnlGRNAddItem.add(jLblGRNTaxDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1480, 10, -1, -1));

        jLblGRNLooseSP.setText("Loose SP");
        jPnlGRNAddItem.add(jLblGRNLooseSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1750, 10, 60, -1));

        jTxtGRNSlNo.setEditable(false);
        jTxtGRNSlNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPnlGRNAddItem.add(jTxtGRNSlNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 90, 20));

        jTxtGRNBulkCP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNBulkCP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNBulkCPFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNBulkCP, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, 70, 20));

        jTxtGRNPackCP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNPackCP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNPackCPFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNPackCP, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 30, 90, 20));

        jTxtGRNLooseCP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNLooseCP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNLooseCPFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNLooseCP, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 30, 100, 20));

        jTxtGRNBulkQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNBulkQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtGRNBulkQtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNBulkQtyFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNBulkQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 30, 100, 20));

        jTxtGRNPackQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNPackQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtGRNPackQtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNPackQtyFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNPackQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 30, 90, 20));

        jTxtGRNLooseSP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNLooseSP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNLooseSPFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNLooseSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1730, 30, 90, 20));

        jTblGRNDetails.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTblGRNDetails.setSelectionBackground(new java.awt.Color(204, 255, 255));
        //displayDetailsTbl();
        jTblGRNDetails.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTblGRNDetailsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTblGRNDetailsKeyReleased(evt);
            }
        });

        jTblGRNDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblGRNDetailsMouseClicked(evt);
            }
        });

        jPnlGRNAddItem.add(jTblGRNDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 56, 1910, -1));

        jCboGRNItemName.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboGRNItemName.addItem("Select one");
        try{
            accessDB();
            String ss = "SELECT itemName FROM Item_M where Active='Y' ORDER BY itemName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboGRNItemName.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboGRNItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboGRNItemNameActionPerformed(evt);
            }
        });

        jPnlGRNAddItem.add(jCboGRNItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 100, 20));

        jTxtGRNBatchNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNBatchNoFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNBatchNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 80, 20));

        jCboGRNExDateDD.setFont(new java.awt.Font("Dialog", 0, 10));
        jPnlGRNAddItem.add(jCboGRNExDateDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 30, 40, 20));

        jCboGRNExDateMM.setFont(new java.awt.Font("Dialog", 0, 10));
        jPnlGRNAddItem.add(jCboGRNExDateMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 40, 20));

        jCboGRNExDateYYYY.setFont(new java.awt.Font("Dialog", 0, 10));
        jPnlGRNAddItem.add(jCboGRNExDateYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 30, 60, 20));

        jCboGRNCurrency.setFont(new java.awt.Font("Dialog", 0, 12));
        jPnlGRNAddItem.add(jCboGRNCurrency, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 30, 90, 20));

        jLblGRNLooseQty.setText("Loose Qty.");
        jPnlGRNAddItem.add(jLblGRNLooseQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 10, -1, -1));

        jTxtGRNLooseQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNLooseQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtGRNLooseQtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNLooseQtyFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNLooseQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 30, 100, 20));

        jLblGRNFreeBQty.setText("Free B Qty.");
        jPnlGRNAddItem.add(jLblGRNFreeBQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 10, -1, -1));

        jTxtGRNFreeBQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNFreeBQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtGRNFreeBQtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNFreeBQtyFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNFreeBQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 30, 90, 20));

        jLblGRNFreePQty.setText("Free P Qty.");
        jPnlGRNAddItem.add(jLblGRNFreePQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 10, -1, -1));

        jTxtGRNFreePQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNFreePQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtGRNFreePQtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNFreePQtyFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNFreePQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 30, 100, 20));

        jLblGRNFreeLQty.setText("Free L Qty.");
        jPnlGRNAddItem.add(jLblGRNFreeLQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 10, -1, -1));

        jTxtGRNFreeLQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNFreeLQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtGRNFreeLQtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNFreeLQtyFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNFreeLQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 30, 100, 20));

        jLblGRNBulkSP.setText("Bulk SP");
        jPnlGRNAddItem.add(jLblGRNBulkSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1560, 10, -1, -1));

        jTxtGRNBulkSP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNBulkSP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNBulkSPFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNBulkSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1540, 30, 90, 20));

        jLblGRNPackSP.setText("Pack SP");
        jPnlGRNAddItem.add(jLblGRNPackSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1650, 10, -1, -1));

        jTxtGRNPackSP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNPackSP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNPackSPFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNPackSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1630, 30, 100, 20));

        jLblGRNItemTot.setText("Qty In Loose");
        jPnlGRNAddItem.add(jLblGRNItemTot, new org.netbeans.lib.awtextra.AbsoluteConstraints(1830, 10, 80, -1));

        jTxtGRNItemTot.setEditable(false);
        jTxtGRNItemTot.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtGRNItemTot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtGRNItemTotFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtGRNItemTot, new org.netbeans.lib.awtextra.AbsoluteConstraints(1820, 30, 100, 20));

        jCboGRNDiscountDetail.setFont(new java.awt.Font("Dialog", 0, 10));
        jPnlGRNAddItem.add(jCboGRNDiscountDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1350, 30, 90, 20));

        jCboGRNTaxDetail.setFont(new java.awt.Font("Dialog", 0, 10));
        jPnlGRNAddItem.add(jCboGRNTaxDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1440, 30, 100, 20));

        jScrPaneGRNItem.setViewportView(jPnlGRNAddItem);

        jPnlGRNDetails.add(jScrPaneGRNItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 770, 220));

        jBtnGRNFinish.setMnemonic('F');
        jBtnGRNFinish.setText("Finish");
        jBtnGRNFinish.setToolTipText(" ");
        jBtnGRNFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNFinishActionPerformed(evt);
            }
        });

        jBtnGRNFinish.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtnGRNFinishKeyPressed(evt);
            }
        });

        jPnlGRNDetails.add(jBtnGRNFinish, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 240, 100, -1));

        jBtnGRNEditItem.setMnemonic('D');
        jBtnGRNEditItem.setText("Edit Item");
        jBtnGRNEditItem.setToolTipText(" ");
        jBtnGRNEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNEditItemActionPerformed(evt);
            }
        });

        jPnlGRNDetails.add(jBtnGRNEditItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 240, 100, -1));

        jBtnGRNRemoveItem.setMnemonic('R');
        jBtnGRNRemoveItem.setText("Rem Item");
        jBtnGRNRemoveItem.setToolTipText(" ");
        jBtnGRNRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNRemoveItemActionPerformed(evt);
            }
        });

        jPnlGRNDetails.add(jBtnGRNRemoveItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 240, 100, -1));

        jBtnGRNAddItem.setMnemonic('I');
        jBtnGRNAddItem.setText("Add Item");
        jBtnGRNAddItem.setToolTipText(" ");
        jBtnGRNAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNAddItemActionPerformed(evt);
            }
        });

        jPnlGRNDetails.add(jBtnGRNAddItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 240, 100, -1));

        jBtnGRNSaveEdit.setText("Save Edit");
        jBtnGRNSaveEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNSaveEditActionPerformed(evt);
            }
        });

        jPnlGRNDetails.add(jBtnGRNSaveEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 240, 100, -1));

        jPnlGRNAdd.add(jPnlGRNDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 790, 270));

        jBtnGRNSave.setMnemonic('S');
        jBtnGRNSave.setText("Save");
        jBtnGRNSave.setToolTipText(" ");
        jBtnGRNSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNSaveActionPerformed(evt);
            }
        });

        jPnlGRNAdd.add(jBtnGRNSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 100, -1));

        jBtnGRNBack.setMnemonic('B');
        jBtnGRNBack.setText("Back");
        jBtnGRNBack.setToolTipText(" ");
        jBtnGRNBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGRNBackActionPerformed(evt);
            }
        });

        jPnlGRNAdd.add(jBtnGRNBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 450, 100, -1));

        jLblGRNRemarks.setText("Remarks");
        jPnlGRNAdd.add(jLblGRNRemarks, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 130, 60, 20));

        add(jPnlGRNAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1050, 750));

    }//GEN-END:initComponents

    private void jCboGRNTaxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCboGRNTaxKeyReleased
        // Add your handling code here:
            int KeyCode=evt.getKeyCode();
        if (KeyCode==evt.VK_TAB)           
                jCboGRNDiscount.requestFocus();
    }//GEN-LAST:event_jCboGRNTaxKeyReleased

    private void jCboGRNDiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCboGRNDiscountKeyPressed
        // Add your handling code here:
        int KeyCode=evt.getKeyCode();
        if (KeyCode==evt.VK_TAB)           
                jTxtAreaGRNRemarks.requestFocus();
    }//GEN-LAST:event_jCboGRNDiscountKeyPressed

    private void jCboGRNTaxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCboGRNTaxKeyPressed
        // Add your handling code here:
     
    }//GEN-LAST:event_jCboGRNTaxKeyPressed

    private void jBtnGRNFinishKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtnGRNFinishKeyPressed
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
         if (KeyCode==evt.VK_TAB)  {   
             if(jBtnGRNSaveEdit.isVisible())
                jBtnGRNSaveEdit.requestFocus();
             else 
                 jBtnGRNBack.requestFocus();
         }
    }//GEN-LAST:event_jBtnGRNFinishKeyPressed

    private void jTblGRNDetailsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblGRNDetailsKeyReleased
        // Add your handling code here:
          int KeyCode=evt.getKeyCode();
         if (KeyCode==evt.VK_ALT_GRAPH){
            clickD=true;
            selrowD=jTblGRNDetails.getSelectedRow();  
        }
        else if(KeyCode==evt.VK_UP && KeyCode==evt.VK_DOWN){
            clickD=true;
            selrowD=jTblGRNDetails.getSelectedRow(); 
            System.out.println(selrow); 
        }          
    }//GEN-LAST:event_jTblGRNDetailsKeyReleased

    private void jTblGRNDetailsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblGRNDetailsKeyPressed
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
         if (KeyCode==evt.VK_TAB)           
                jBtnGRNAddItem.requestFocus();          
        
    }//GEN-LAST:event_jTblGRNDetailsKeyPressed

    private void jTxtGRNFreeLQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNFreeLQtyFocusGained
        // Add your handling code here:
        if(jCboGRNItemName.getSelectedIndex()==0) 
        {
            JOptionPane.showMessageDialog(this,"Please Select the Item Name","GRNDetail",JOptionPane.ERROR_MESSAGE);
            jCboGRNItemName.requestFocus();
        }
          BulkQty=Long.parseLong(jTxtGRNBulkQty.getText());
          PackQty=Long.parseLong(jTxtGRNPackQty.getText());
          LooseQty=Long.parseLong(jTxtGRNLooseQty.getText());
          FreeBQty=Long.parseLong(jTxtGRNFreeBQty.getText());
          FreePQty=Long.parseLong(jTxtGRNFreePQty.getText());
    }//GEN-LAST:event_jTxtGRNFreeLQtyFocusGained

    private void jTxtGRNFreePQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNFreePQtyFocusGained
        // Add your handling code here:
        if(jCboGRNItemName.getSelectedIndex()==0) 
        {
            JOptionPane.showMessageDialog(this,"Please Select the Item Name","GRNDetail",JOptionPane.ERROR_MESSAGE);
            jCboGRNItemName.requestFocus();
        }
          BulkQty=Long.parseLong(jTxtGRNBulkQty.getText());
          PackQty=Long.parseLong(jTxtGRNPackQty.getText());
          LooseQty=Long.parseLong(jTxtGRNLooseQty.getText());
          FreeBQty=Long.parseLong(jTxtGRNFreeBQty.getText());
          FreeLQty=Long.parseLong(jTxtGRNFreeLQty.getText());
    }//GEN-LAST:event_jTxtGRNFreePQtyFocusGained

    private void jTxtGRNFreeBQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNFreeBQtyFocusGained
        // Add your handling code here:
         if(jCboGRNItemName.getSelectedIndex()==0) 
        {
            JOptionPane.showMessageDialog(this,"Please Select the Item Name","GRNDetail",JOptionPane.ERROR_MESSAGE);
            jCboGRNItemName.requestFocus();
        }
          BulkQty=Long.parseLong(jTxtGRNBulkQty.getText());
          PackQty=Long.parseLong(jTxtGRNPackQty.getText());
          LooseQty=Long.parseLong(jTxtGRNLooseQty.getText());
          FreePQty=Long.parseLong(jTxtGRNFreePQty.getText());
          FreeLQty=Long.parseLong(jTxtGRNFreeLQty.getText());
    }//GEN-LAST:event_jTxtGRNFreeBQtyFocusGained

    private void jCboGRNBillDateYYYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNBillDateYYYYActionPerformed
        // Add your handling code here:
        initializeDate();
        System.out.println(GRNDate.getMonth());  
        System.out.println(GRNDate);
    }//GEN-LAST:event_jCboGRNBillDateYYYYActionPerformed

    private void jCboGRNDateYYYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNDateYYYYActionPerformed
        // Add your handling code here:
        initializeDate();
        System.out.println(GRNDate);
        System.out.println(GRNDate.getMonth());  
          
    }//GEN-LAST:event_jCboGRNDateYYYYActionPerformed

    private void jTxtGRNBatchNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNBatchNoFocusLost
        // Add your handling code here:
        if(rowTblDetails >= 1 && (!editPressed )){            
            for(i=0;i<rowTblDetails;i++){                
                if(dataDetailsShown[i][1].equals(jCboGRNItemName.getSelectedItem()) && dataDetailsShown[i][2].equals(jTxtGRNBatchNo.getText()) ){
                    //jCboGRNItemName.setSelectedIndex(0);
                    jTxtGRNBatchNo.requestFocus();
                    jTxtGRNBatchNo.setText("");
                    JOptionPane.showMessageDialog(this,"Selected ItemName with Batch No already exists in the list","Error!",JOptionPane.ERROR_MESSAGE);                        
                    break;
                }
            }          
        }
    }//GEN-LAST:event_jTxtGRNBatchNoFocusLost

    private void jTblGRNHeaderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblGRNHeaderKeyReleased
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
         if (KeyCode==evt.VK_ALT_GRAPH){
            clickH=true;
            selrow=jTblGRNHeader.getSelectedRow();  
        }
        else if(KeyCode==evt.VK_UP && KeyCode==evt.VK_DOWN){
            clickH=true;
            selrow=jTblGRNHeader.getSelectedRow(); 
            System.out.println(selrow); 
        }            
    }//GEN-LAST:event_jTblGRNHeaderKeyReleased

    private void jTxtGRNLooseQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNLooseQtyFocusGained
        // Add your handling code here:
         if(jCboGRNItemName.getSelectedIndex()==0) 
        {
            JOptionPane.showMessageDialog(this,"Please Select the Item Name","GRNDetail",JOptionPane.ERROR_MESSAGE);
            jCboGRNItemName.requestFocus();
        }
          BulkQty=Long.parseLong(jTxtGRNBulkQty.getText());
          PackQty=Long.parseLong(jTxtGRNPackQty.getText());
          FreeBQty=Long.parseLong(jTxtGRNFreeBQty.getText());
          FreePQty=Long.parseLong(jTxtGRNFreePQty.getText());
          FreeLQty=Long.parseLong(jTxtGRNFreeLQty.getText());
    }//GEN-LAST:event_jTxtGRNLooseQtyFocusGained

    private void jTxtGRNPackQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNPackQtyFocusGained
        // Add your handling code here:
         if(jCboGRNItemName.getSelectedIndex()==0) 
        {
            JOptionPane.showMessageDialog(this,"Please Select the Item Name","GRNDetail",JOptionPane.ERROR_MESSAGE);
            jCboGRNItemName.requestFocus();
        }
         BulkQty=Long.parseLong(jTxtGRNBulkQty.getText());
         LooseQty=Long.parseLong(jTxtGRNLooseQty.getText());
         FreeBQty=Long.parseLong(jTxtGRNFreeBQty.getText());
         FreePQty=Long.parseLong(jTxtGRNFreePQty.getText());
         FreeLQty=Long.parseLong(jTxtGRNFreeLQty.getText());
    }//GEN-LAST:event_jTxtGRNPackQtyFocusGained

    private void jTxtGRNBulkQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNBulkQtyFocusGained
        // Add your handling code here:
        if(jCboGRNItemName.getSelectedIndex()==0) 
        {
            JOptionPane.showMessageDialog(this,"Please Select the Item Name","GRNDetail",JOptionPane.ERROR_MESSAGE);
            jCboGRNItemName.requestFocus();
        }
        PackQty=Long.parseLong(jTxtGRNPackQty.getText());
        LooseQty=Long.parseLong(jTxtGRNLooseQty.getText());
        FreeBQty=Long.parseLong(jTxtGRNFreeBQty.getText());
        FreePQty=Long.parseLong(jTxtGRNFreePQty.getText());
        FreeLQty=Long.parseLong(jTxtGRNFreeLQty.getText());
    }//GEN-LAST:event_jTxtGRNBulkQtyFocusGained

    private void jCboGRNItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNItemNameActionPerformed
        // Add your handling code here:
     //  if(rowTblDetails >= 1 && (!editPressed )){            
     //       for(i=0;i<rowTblDetails;i++){                
     //           if(dataDetailsShown[i][1].equals(jCboGRNItemName.getSelectedItem())){
    //                jCboGRNItemName.setSelectedIndex(0);
    //                JOptionPane.showMessageDialog(this,"Selected Item already exists in the list","Error!",JOptionPane.ERROR_MESSAGE);                        
    //               break;
      //          }
     //       }          
     //   }
    }//GEN-LAST:event_jCboGRNItemNameActionPerformed

    private void jTblGRNDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblGRNDetailsMouseClicked
        // Add your handling code here:
        clickD=true;
        if(jTblGRNDetails.isEnabled())
          selrowD=jTblGRNDetails.getSelectedRow(); 
    }//GEN-LAST:event_jTblGRNDetailsMouseClicked

    private void jTxtGRNItemTotFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNItemTotFocusLost
        // Add your handling code here:
         ItemTot=validEntry(jTxtGRNItemTot,ItemTot,"Item Total");
    }//GEN-LAST:event_jTxtGRNItemTotFocusLost

    private void jTxtGRNLooseSPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNLooseSPFocusLost
        // Add your handling code here:
         LooseSP=validEntry(jTxtGRNLooseSP,LooseSP,"Loose Selling Price");
    }//GEN-LAST:event_jTxtGRNLooseSPFocusLost

    private void jTxtGRNPackSPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNPackSPFocusLost
        // Add your handling code here:
        PackSP=validEntry(jTxtGRNPackSP,PackSP,"Pack Selling Price");
    }//GEN-LAST:event_jTxtGRNPackSPFocusLost

    private void jTxtGRNBulkSPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNBulkSPFocusLost
        // Add your handling code here:
        BulkSP=validEntry(jTxtGRNBulkSP,BulkSP,"Bulk Selling Price");
    }//GEN-LAST:event_jTxtGRNBulkSPFocusLost

    private void jTxtGRNFreeLQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNFreeLQtyFocusLost
        // Add your handling code here:
        FreeLQty=validEntry(jTxtGRNFreeLQty,FreeLQty,"Free Loose Qty");
         if(ValidEntry){
          ItemTot=ItemTotal();
          jTxtGRNItemTot.setText(""+ItemTot);
        }
    }//GEN-LAST:event_jTxtGRNFreeLQtyFocusLost

    private void jTxtGRNFreePQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNFreePQtyFocusLost
        // Add your handling code here:
        FreePQty=validEntry(jTxtGRNFreePQty,FreePQty,"Free Pack Qty");
        if(ValidEntry){
          ItemTot=ItemTotal();
          jTxtGRNItemTot.setText(""+ItemTot);
        }
    }//GEN-LAST:event_jTxtGRNFreePQtyFocusLost

    private void jTxtGRNFreeBQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNFreeBQtyFocusLost
        // Add your handling code here:
        FreeBQty=validEntry(jTxtGRNFreeBQty,FreeBQty,"Free Bulk Qty");
        if(ValidEntry){
          ItemTot=ItemTotal();
          jTxtGRNItemTot.setText(""+ItemTot);
        }
    }//GEN-LAST:event_jTxtGRNFreeBQtyFocusLost

    private void jTxtGRNLooseQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNLooseQtyFocusLost
        // Add your handling code here:      
        LooseQty=validEntry(jTxtGRNLooseQty,LooseQty,"Loose Qty");
         if(ValidEntry){
          ItemTot=ItemTotal();
          jTxtGRNItemTot.setText(""+ItemTot);
        }
    }//GEN-LAST:event_jTxtGRNLooseQtyFocusLost

    private void jTxtGRNPackQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNPackQtyFocusLost
        // Add your handling code here:              
        PackQty=validEntry(jTxtGRNPackQty,PackQty,"Pack Qty"); 
        if(ValidEntry){
          ItemTot=ItemTotal();
          jTxtGRNItemTot.setText(""+ItemTot);
        }
        
    }//GEN-LAST:event_jTxtGRNPackQtyFocusLost

    private void jTxtGRNBulkQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNBulkQtyFocusLost
        // Add your handling code here:       
        BulkQty=validEntry(jTxtGRNBulkQty,BulkQty,"Bulk Qty");  
        if(ValidEntry){
          ItemTot=ItemTotal();
          jTxtGRNItemTot.setText(""+ItemTot);
        }
    }//GEN-LAST:event_jTxtGRNBulkQtyFocusLost

    private void jTxtGRNLooseCPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNLooseCPFocusLost
        // Add your handling code here:
        validEntry(jTxtGRNLooseCP,LooseCP,"Loose Cost Price");
    }//GEN-LAST:event_jTxtGRNLooseCPFocusLost

    private void jTxtGRNPackCPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNPackCPFocusLost
        // Add your handling code here:
        PackCP=validEntry(jTxtGRNPackCP,PackCP,"Pack Cost Price");
    }//GEN-LAST:event_jTxtGRNPackCPFocusLost

    private void jTxtGRNBulkCPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtGRNBulkCPFocusLost
        // Add your handling code here:
       BulkCP= validEntry(jTxtGRNBulkCP,BulkCP,"Bulk Cost Price");
        System.out.println("Bulk Cost price is "+BulkCP);
    }//GEN-LAST:event_jTxtGRNBulkCPFocusLost

    private void jBtnGRNSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNSaveActionPerformed
        // Add your handling code here:
          initializeDate();
          dateCheck(jCboGRNDateYYYY,jCboGRNDateMM,jCboGRNDateDD,"GRN Date");
                if(!dateCheckRequired)  
                    dateCheck(jCboGRNBillDateYYYY,jCboGRNBillDateMM,jCboGRNBillDateDD,"Bill Date");                  
          
             if (!dateCheckRequired){ 
                 checkHeaderValidation();
                 if (headerIsValid)
                  {                  
                       if (ModFlag==false) 
                       {  
                          int ansSave=JOptionPane.showConfirmDialog(this,"       Are u confirm to save","Save",JOptionPane.YES_NO_OPTION);
                          if (ansSave==0){ 
                               try{
                                  combineAdd();
                                  if(NoDetailError && NoHeaderError && NoSaveStoreError)
                                      updateCode("GRN_M");
                               }
                               catch(Exception ex){
                                   System.out.println("Error in save while saving new record"+ex);
                               }
                          }
                       }
                       else 
                       {
                           int ansModify=JOptionPane.showConfirmDialog(this,"      Are u confirm to Modify","Save",JOptionPane.YES_NO_OPTION);
                           if (ansModify==0){  
                              try{
                                combineModify();  
                              }
                               catch(Exception ex){
                                   System.out.println("Error in save while saving modified record"+ex);
                               }
                           }
                       }
                        
                        resetHeader();
                        resetDetails();
                        searchClosePressed();
                  }   
                 else
                  {
                     headerIsValid = false;
                  }
               }
               else
               {
                     dateCheckRequired=false;
               }     
        
    }//GEN-LAST:event_jBtnGRNSaveActionPerformed

    private void jBtnGRNBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNBackActionPerformed
        // Add your handling code here:
       if(RemoveItem && rowTblDetails<1 && !AddItem){
           JOptionPane.showMessageDialog(this,"Atleast one Row of GRN Details Should be there","GRN Details" ,JOptionPane.ERROR_MESSAGE);
       }
       else{            
           searchClosePressed();
       }     

    }//GEN-LAST:event_jBtnGRNBackActionPerformed

    private void jScrollPane1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane1ComponentResized
        // Add your handling code here:
        h=jTblGRNHeader.getRowHeight()*(rowShown+1);
            if(h<320)
                jScrollPane1.setSize(580,h+5);
            else
                jScrollPane1.setSize(580,320);
    }//GEN-LAST:event_jScrollPane1ComponentResized

    private void jListGRNSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListGRNSearchMouseClicked
        // Add your handling code here:
         int keyCode=evt.getClickCount();
           if(keyCode==1){
             jTblGRNHeader.clearSelection();      
             int index=searchElement(  (String)( jListGRNSearch.getSelectedValue() )  ,unsorted   );
             jTblGRNHeader.changeSelection( index ,0,true,false);
             jTxtGRNSearch.setText(""+jListGRNSearch.getSelectedValue());
             jTxtGRNSearch.requestFocus();
             jTxtGRNSearch.selectAll();
           }
           else{
             jTblGRNHeader.clearSelection();      
             int index=searchElement(  (String)( jListGRNSearch.getSelectedValue() )  ,unsorted   );
             jTblGRNHeader.changeSelection( index ,0,true,false);
             selrow=jTblGRNHeader.getSelectedRow();
             clickH=true;
             resetDetails();
             resetHeader(); 
             modify();                 
             headerUnEditable();
             RemoveItem=false;
             AddItem=false;
             if(jPnlGRNAdd.isVisible())
                jBtnGRNEditItem.requestFocus();
             else
                 jTxtGRNSearch.requestFocus();
           }
    }//GEN-LAST:event_jListGRNSearchMouseClicked

    private void jTxtGRNSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtGRNSearchKeyReleased
        // Add your handling code here:
        int keyCode=evt.getKeyCode();        
        if(keyCode==evt.VK_DOWN||keyCode==evt.VK_UP){   
            jListGRNSearch.requestFocus();
        }
    }//GEN-LAST:event_jTxtGRNSearchKeyReleased

    private void jTxtGRNSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtGRNSearchKeyPressed
        // Add your handling code here:
        char keyChar=evt.getKeyChar();
        int keyCode=evt.getKeyCode();
        
         if(keyCode==evt.VK_BACK_SPACE||keyCode==evt.VK_DELETE){
            sb=new StringBuffer(key);
            if (sb.length()>0){
            sb.setLength(sb.length()-1);
            }
            key=sb.toString();          
        }
        else if(keyCode==evt.VK_ENTER){
            selrow=jTblGRNHeader.getSelectedRow();       
            jTxtGRNSearch.setText("");
            jCboGRNSearch.setSelectedItem("GRN NO");
            list.removeAllElements();            
             clickH=true;
             modify();
             headerUnEditable();
              if(jPnlGRNAdd.isVisible())
                jBtnGRNEditItem.requestFocus();
             else
                 jTxtGRNSearch.requestFocus();
        }//end else if 1
        else if(keyCode==evt.VK_DOWN||keyCode==evt.VK_UP){ 
            ;
        }//end else if 3
        else if(keyCode==evt.VK_ALT || keyCode==evt.VK_CONTROL || keyCode==evt.VK_SHIFT){ 
            ;
        }//end else if 3        
        else if(keyCode>=32&&keyCode<=93||keyCode>=95&&keyCode<=126){
            key+=String.valueOf(keyChar); 
            key=key.trim();
        }//end else if 2
        else
            JOptionPane.showMessageDialog(this," Enter valid chararters ","ERROR!",JOptionPane.ERROR_MESSAGE);
        
        search(jListGRNSearch);
    }//GEN-LAST:event_jTxtGRNSearchKeyPressed

    private void jTxtAreaGRNRemarksKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtAreaGRNRemarksKeyPressed
        // Add your handling code here:
        int KeyCode=evt.getKeyCode();
        if (KeyCode==evt.VK_TAB)           
                jCboGRNDiscount.requestFocus();
           
    }//GEN-LAST:event_jTxtAreaGRNRemarksKeyPressed

    private void jTblGRNHeaderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblGRNHeaderKeyPressed
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
        if (KeyCode==evt.VK_TAB){
            if(jPnlGRNSearch.isVisible())
                jCboGRNSearch.requestFocus();
            else
                jBtnGRNAdd.requestFocus();
        }
        else if (KeyCode==evt.VK_ALT_GRAPH){
            clickH=true;
            selrow=jTblGRNHeader.getSelectedRow();  
        }
        else if(KeyCode==evt.VK_UP && KeyCode==evt.VK_DOWN){
            clickH=true;
            selrow=jTblGRNHeader.getSelectedRow(); 
            System.out.println(jTblGRNHeader.getSelectedRow()); 
        }            
    }//GEN-LAST:event_jTblGRNHeaderKeyPressed

    private void jListGRNSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListGRNSearchKeyReleased
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_UP||KeyCode==evt.VK_DOWN){                         
             jTxtGRNSearch.selectAll();
             jTblGRNHeader.clearSelection();    
             jTxtGRNSearch.setText(""+jListGRNSearch.getSelectedValue());
             int index=searchElement(  (String)( jListGRNSearch.getSelectedValue() )  ,unsorted   );
             jTblGRNHeader.changeSelection( index ,0,true,false);  
             selrow=index;
        }  
        else if(KeyCode==evt.VK_ENTER){
             clickH=true;
             resetDetails();
             resetHeader();
             modify();                                 
             headerUnEditable();
             RemoveItem=false;
             AddItem=false;
              if(jPnlGRNAdd.isVisible())
                jBtnGRNEditItem.requestFocus();
             else
                 jTxtGRNSearch.requestFocus();         
        }        
    }//GEN-LAST:event_jListGRNSearchKeyReleased

    private void jCboGRNSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNSearchActionPerformed
        // Add your handling code here:
       key=""; 
       
       search(jListGRNSearch); 
       
       jTxtGRNSearch.setText(""+jListGRNSearch.getSelectedValue());
       jTxtGRNSearch.requestFocus();
       jTxtGRNSearch.selectAll();
    }//GEN-LAST:event_jCboGRNSearchActionPerformed

    private void jBtnGRNSearchCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNSearchCloseActionPerformed
        // Add your handling code here:
         searchClosePressed();       
    }//GEN-LAST:event_jBtnGRNSearchCloseActionPerformed

    private void jBtnGRNSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNSearchActionPerformed
        // Add your handling code here:
         searchPressed();   
    }//GEN-LAST:event_jBtnGRNSearchActionPerformed

    private void jPnlGRNSearchComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlGRNSearchComponentShown
        // Add your handling code here:        
        jPnlGRNView.setLocation(40,70);  
        displayData(); 
        searchPressed();
    }//GEN-LAST:event_jPnlGRNSearchComponentShown

    private void jBtnGRNSaveEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNSaveEditActionPerformed
        // Add your handling code here:  
        try{
            jTblGRNDetails.setEnabled(true);
            modDetails();
            detailsEditable();                        
            clickD=false;
        }
        catch(Exception ex)
        {
            System.out.println("Error in save edit"+ex);
        }
    }//GEN-LAST:event_jBtnGRNSaveEditActionPerformed

    private void jBtnGRNCancelViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNCancelViewActionPerformed
        // Add your handling code here:
        cancelGRN("GRN_M");
        displayData();
        
    }//GEN-LAST:event_jBtnGRNCancelViewActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // Add your handling code here:
      //  JOptionPane.showMessageDialog(this,"The Active is triggered","Error!",JOptionPane.ERROR_MESSAGE);
        
    }//GEN-LAST:event_formWindowActivated

    private void jCboGRNToYYYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNToYYYYActionPerformed
        // Add your handling code here:
        
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The GRN DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNToYYYY.setSelectedItem("2100");
        }
    }//GEN-LAST:event_jCboGRNToYYYYActionPerformed

    private void jCboGRNToMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNToMMActionPerformed
        // Add your handling code here:        
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The GRN DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNToMM.setSelectedIndex(11);
        }
    }//GEN-LAST:event_jCboGRNToMMActionPerformed

    private void jCboGRNToDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNToDDActionPerformed
        // Add your handling code here:       
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The GRN DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNToDD.setSelectedIndex(30);
        }
        
    }//GEN-LAST:event_jCboGRNToDDActionPerformed

    private void jCboGRNFromYYYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNFromYYYYActionPerformed
        // Add your handling code here:
        
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The GRN DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNFromYYYY.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboGRNFromYYYYActionPerformed

    private void jCboGRNFromMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNFromMMActionPerformed
        // Add your handling code here:
       
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The GRN DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNFromMM.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboGRNFromMMActionPerformed

    private void jTblGRNHeaderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblGRNHeaderMouseClicked
        // Add your handling code here:
        clickH=true;
        selcol=jTblGRNHeader.getSelectedColumn();
        selrow=jTblGRNHeader.getSelectedRow();
    }//GEN-LAST:event_jTblGRNHeaderMouseClicked

    private void jCboGRNFromDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNFromDDActionPerformed
        // Add your handling code here:
        
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The GRN DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNFromDD.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboGRNFromDDActionPerformed

    private void jCboGRNPONoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNPONoActionPerformed
        // Add your handling code here:
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The GRN DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNPONo.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboGRNPONoActionPerformed

    private void jCboGRNSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboGRNSupplierActionPerformed
        // Add your handling code here:
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The GRN DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNSupplier.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboGRNSupplierActionPerformed

    private void jPnlGRNViewComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlGRNViewComponentShown
        // Add your handling code here:        
        displayData();        
        jBtnGRNAdd.requestFocus();
        
    }//GEN-LAST:event_jPnlGRNViewComponentShown

    private void jPnlGRNAddComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlGRNAddComponentHidden
        // Add your handling code here:
         for(i=0;i<rowTblDetails;i++)
            for(j=0;j<colAdd.length;j++)
                dataAdd[i][j]="";
         
        resetDetails();
        rowTblDetails=0;
        displayDetailsTbl();
        AddItem=false;
        RemoveItem=false;        
        displayData();
    }//GEN-LAST:event_jPnlGRNAddComponentHidden

    private void jBtnGRNRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNRemoveItemActionPerformed
        // Add your handling code here:
        try{            
            removeItem();
        }
        catch(Exception ex){
            System.out.println("Error in RemoveItem Action Performed"+ex);
        }
    }//GEN-LAST:event_jBtnGRNRemoveItemActionPerformed

    private void jBtnGRNFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNFinishActionPerformed
        // Add your handling code here:        
        if(rowTblDetails<1)
        {
            JOptionPane.showMessageDialog(this,"GRN Details Table Cannot be Empty","GRN Details",JOptionPane.ERROR_MESSAGE);
        }
        else{
           int finish=JOptionPane.showConfirmDialog(this,"Are u sure to Finish, AddItem or RemoveItem to the GRNDetails ","Finish GRN",JOptionPane.YES_NO_OPTION);
           if(finish==0){
                jBtnGRNSave.setEnabled(true);
                jBtnGRNEditItem.setEnabled(false);
                jBtnGRNAddItem.setEnabled(false);
                jBtnGRNRemoveItem.setEnabled(false);
                jBtnGRNFinish.setEnabled(false);
                jBtnGRNBack.setEnabled(false);
                jBtnGRNSaveEdit.setEnabled(false);
           }
           else{
                jBtnGRNSave.setEnabled(false);
                if(ModFlag)
                    jBtnGRNEditItem.setEnabled(true);
                else
                    jBtnGRNEditItem.setEnabled(false);
                jBtnGRNAddItem.setEnabled(true);
                jBtnGRNRemoveItem.setEnabled(true);
                jBtnGRNFinish.setEnabled(true);
                jBtnGRNBack.setEnabled(true);
                jBtnGRNSaveEdit.setEnabled(false);
           }           
        }
    }//GEN-LAST:event_jBtnGRNFinishActionPerformed

    private void jBtnGRNEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNEditItemActionPerformed
        // Add your handling code here: 
        try{            
            editPressed=true;            
            detailsModify();            
            clickD=false;            
            //editPressed = false;            
        }
        catch(Exception ex)
        {
            System.out.println("Error in edit item"+ex);
        }
    }//GEN-LAST:event_jBtnGRNEditItemActionPerformed

    private void jTxtGRNMiscKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtGRNMiscKeyPressed
        // Add your handling code here:
        numberOnly(evt,jTxtGRNMisc,Misc);
    }//GEN-LAST:event_jTxtGRNMiscKeyPressed

    private void jBtnGRNAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNAddItemActionPerformed
        // Add your handling code here:
        dateCheck(jCboGRNExDateYYYY,jCboGRNExDateMM,jCboGRNExDateDD,"Expiry Date");
        if(!dateCheckRequired){
           checkDetailsValidation();
            if(detailsAreValid){
                rowTblDetails ++ ;
                displayDetailsTbl();
                jTxtGRNSlNo.setText(""+(rowTblDetails+1));
                resetDetails();
                jBtnGRNFinish.setEnabled(true);
                jBtnGRNSave.setEnabled(false);

            }
        }
       if (rowTblDetails<=1 && ModFlag){
           jBtnGRNRemoveItem.setEnabled(false);
           jBtnGRNFinish.setEnabled(false);
       }
       else if(rowTblDetails<1 && !ModFlag){
           jBtnGRNRemoveItem.setEnabled(false);
           jBtnGRNFinish.setEnabled(false);
       }
       else {
           jBtnGRNRemoveItem.setEnabled(true);
           jBtnGRNFinish.setEnabled(true);
       }
       
    }//GEN-LAST:event_jBtnGRNAddItemActionPerformed

    private void jBtnGRNExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNExitActionPerformed
        // Add your handling code here:
this.setVisible(false);
    }//GEN-LAST:event_jBtnGRNExitActionPerformed

    private void jTxtGRNTaxDetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtGRNTaxDetailKeyPressed
        // Add your handling code here:
      //  numberOnly(evt,jCboGRNTaxDetail);
    }//GEN-LAST:event_jTxtGRNTaxDetailKeyPressed

    private void jTxtGRNDiscountDetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtGRNDiscountDetailKeyPressed
        // Add your handling code here:
        //numberOnly(evt,jTxtGRNDiscountDetail);
    }//GEN-LAST:event_jTxtGRNDiscountDetailKeyPressed

    private void jBtnGRNCancelAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNCancelAddActionPerformed
        // Add your handling code here:
        
    }//GEN-LAST:event_jBtnGRNCancelAddActionPerformed

    private void jBtnGRNAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNAddActionPerformed
        // Add your handling code here:    
        detailsEditable();
        headerEditable();
        AddItem=true;
        jPnlGRNView.setVisible(false);
        jPnlGRNAdd.setVisible(true);
        jBtnGRNEditItem.setEnabled(false);
        jBtnGRNSave.setEnabled(false);        
        jBtnGRNFinish.setEnabled(false);
        jBtnGRNSaveEdit.setEnabled(false);
        jBtnGRNRemoveItem.setEnabled(false);           
        jBtnGRNAddItem.setEnabled(true);
        jBtnGRNBack.setEnabled(true);
        
        jBtnGRNAddItem.setVisible(true);
        jBtnGRNEditItem.setVisible(true);              
        jBtnGRNFinish.setVisible(true);
        jBtnGRNRemoveItem.setVisible(true);
        jCboGRNDateDD.requestFocus();
        resetDetails();
        resetHeader();
        ModFlag=false;       
        generateCode("GRN_M",jTxtGRNCode);
    }//GEN-LAST:event_jBtnGRNAddActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Add your handling code here:        
        jPnlGRNAdd.setVisible(false);
        jPnlGRNSearch.setVisible(false); 
        jPnlGRNView.setVisible(true); 
       
             try{
                accessDB();
                String ss = "SELECT * FROM SemaPhores WHERE TableName = 'GRN_M'";            
                ResultSet res = stat.executeQuery(ss);            
                if(!res.next()){
                    String ss1="Insert into SemaPhores (TableName,CtrName,MaxCtr) values('GRN_M','GRN_',1)";
                   stat.executeUpdate(ss1);               
                }
                con.close();
            }
            catch(Exception ex){
                System.out.println("Error in form Window Opened"+ex);
            }
        
        checkForEmptyDataBase("StoreMaster");
        checkForEmptyDataBase("SupplierMaster");
        checkForEmptyDataBase("EmployeeMaster");
        checkForEmptyDataBase("PurchaseOrderHead");
        checkForEmptyDataBase("DiscountMaster");
        checkForEmptyDataBase("TaxMaster");
        checkForEmptyDataBase("Item_M");
        checkForEmptyDataBase("Item_G");       
    }//GEN-LAST:event_formWindowOpened

    private void jBtnGRNModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGRNModifyActionPerformed
        // Add your handling code here:
        resetDetails();
        resetHeader();
       modify();
       headerUnEditable();
       RemoveItem=false;
       AddItem=false;
    }//GEN-LAST:event_jBtnGRNModifyActionPerformed
    
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

     /** @ Establish the Connection to the database */
    public void accessDB(){
       try
       { 
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            con=DriverManager.getConnection("jdbc:odbc:sha");
            stat=con.createStatement();
       }
       catch(Exception ex)
       {
            System.out.println("Error in accessDB"+ex);
       }   
    }
    
    /** @ combining both the Header and Detail save to TABLE(GRN_M and GRN_D) and TABLE(Store_n) */
    public void combineAdd()throws SQLException{
        try{
           accessDB();
           //con.setAutoCommit(false);
            newSaveStoreDB();
            if(NoSaveStoreError){
                newSaveDetailDB();
                 if(NoDetailError)
                   newSaveHeaderDB();
            }
           //con.commit();
           con.close();         
        }
        catch(Exception ex){
            //con.rollback();
            //con.setAutoCommit(true);
            System.out.println("Error in CombineAdd header and Detail"+ex);
        }        
    }
    
     /** @ combining both the Header and Detail modify and save to TABLE(GRN_M and GRN_D) and TABLE(Store_n) */
    public void combineModify()throws SQLException{
        try{
           accessDB();
           //con.setAutoCommit(false);
            modifySaveStoreDB();
            if(NoSaveStoreError){
                modifySaveDetailDB();                
            }
           //con.commit();
           con.close();         
        }
        catch(Exception ex){
            //con.rollback();
            //con.setAutoCommit(true);
            System.out.println("Error in CombineModify header and Detail"+ex);
        }
    }
       
    /** @ Save new  Header or Master record to the Table GRN_M */
    public void newSaveHeaderDB()throws SQLException{
           String TaxNameHeader="",TaxCodeHeader="",DisCodeHeader="",DisNameHeader="",ValueInHTax="",ValueInHDis="",insHeader="";
                 
           String GRNDate=jCboGRNDateDD.getSelectedItem()+"/"+jCboGRNDateMM.getSelectedItem()+"/"+jCboGRNDateYYYY.getSelectedItem();
           String BillDate=jCboGRNBillDateDD.getSelectedItem()+"/"+jCboGRNBillDateMM.getSelectedItem()+"/"+jCboGRNBillDateYYYY.getSelectedItem();
           
           ValueInHTax=""+jCboGRNTax.getSelectedItem();
           ValueInHDis=""+jCboGRNDiscount.getSelectedItem();
           String SupplierCode="",EmployeeCode="",StoreCode="";  
          
      try{ 
           SupplierCode=returnCode("SupplierMaster","SupCode","supName",""+jCboGRNSupplierName.getSelectedItem());
            if(jCboGRNAuthBy.getSelectedIndex()>0)
                EmployeeCode=returnCode("EmployeeMaster","EmpCode","EmpName",""+jCboGRNAuthBy.getSelectedItem());
            else
                EmployeeCode="";
           StoreCode=returnCode("StoreMaster","StoreID","StoreName",""+jCboGRNStoreID.getSelectedItem());
           
           DisCodeHeader=getCode(DisNameHeader,ValueInHDis,"DM_ID","DiscountMaster","DM_Name");          
           TaxCodeHeader=getCode(TaxNameHeader,ValueInHTax,"TaxCode","TaxMaster","TaxDesc"); 
           insHeader="Insert into GRN_M (GRN_No,GRN_Date,Store_ID,Supplier_ID,AuthBy_ID,DC_No,";
           insHeader+="PO_No,Bill_No,Bill_Date,Disc_Percentage,Tax_Percentage,Misc_Charges,Remarks,Cancelled)";
           insHeader+=" values('"+jTxtGRNCode.getText()+"','"+GRNDate+"','"+StoreCode+"','"+SupplierCode+"'";
           insHeader+=",'"+EmployeeCode+"','"+jTxtGRNDCNo.getText()+"'";
           insHeader+=",'"+jCboGRNPONO.getSelectedItem()+"','"+jTxtGRNBillNo.getText()+"','"+BillDate+"'";
           insHeader+=",'"+DisCodeHeader+"','"+TaxCodeHeader+"',"+jTxtGRNMisc.getText();
           insHeader+=",'"+jTxtAreaGRNRemarks.getText()+"','N')";           
           stat.executeUpdate(insHeader);           
           NoHeaderError=true;
          }
        catch(Exception ex)
          {     
                NoHeaderError=false;
                //con.rollback();
                System.out.println("Error in newSaveHeader"+ex);
          }   
    }
    
    /** @ Save new  Detail record to the Table GRN_D */
    public void newSaveDetailDB()throws SQLException{        
        String insDetail="",ItemNo="",DisNameDetail="";
        String TaxNameDetail="",TaxCodeDetail="",DisCodeDetail="",CurrencyID="";  
        String ValueInDTblTax="",ValueInDTblDis="";
       
      try{
          for(i=0 ; i<rowTblDetails ; i++){                         
              ItemNo=returnCode("Item_M","itemNo","itemName",(String)dataDetailsShown[i][1]);
              CurrencyID=returnCode("CurrencyMaster","CM_ID","CM_Name",(String)dataDetailsShown[i][7]);
              ValueInDTblDis=""+jTblGRNDetails.getValueAt(i,14);
              ValueInDTblTax=""+jTblGRNDetails.getValueAt(i,15);
              DisCodeDetail=getCode(DisNameDetail,ValueInDTblDis,"DM_ID","DiscountMaster","DM_Name");          
              TaxCodeDetail=getCode(TaxNameDetail,ValueInDTblTax,"TaxCode","TaxMaster","TaxDesc");              
              insDetail="Insert into GRN_D (GRN_No,Slno,Item_Code,Batch_No,Expiry_Date,";
              insDetail+="CP_Bulk,CP_Pack,CP_Loose,Curr_ID,Qty_Bulk,Qty_Pack,Qty_Loose,Free_Qty_Bulk,";
              insDetail+="Free_Qty_Pack,Free_Qty_Loose,Disc_Perc,Tax_Perc,SP_Bulk,SP_Pack,SP_Loose,Item_Tot)";
              insDetail+=" values('"+jTxtGRNCode.getText()+"','"+String.valueOf(jTblGRNDetails.getValueAt(i,0))+"','"+ItemNo+"'";
              insDetail+=",'"+String.valueOf(jTblGRNDetails.getValueAt(i,2))+"','"+String.valueOf(jTblGRNDetails.getValueAt(i,3))+"'";
              insDetail+=","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,4)))+","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,5)));
              insDetail+=","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,6)))+",'"+CurrencyID+"'";
              insDetail+=","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,8)))+","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,9)));
              insDetail+=","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,10)))+","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,11)));
              insDetail+=","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,12)))+","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,13)));
              insDetail+=",'"+DisCodeDetail+"','"+TaxCodeDetail+"'";
              insDetail+=","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,16)))+","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,17)));
              insDetail+=","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,18)))+","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,19)))+")";                                      
               System.out.println(insDetail);
              stat.executeUpdate(insDetail);
              NoDetailError=true;              
          }  
        }
        catch(Exception ex){
             //con.rollback();
             NoDetailError=false;
            System.out.println("Error in newSaveDetail"+ex);
        }        
    }
    
     /** @ Save new record or Update to the Table StoreMaster */
    public void newSaveStoreDB()throws SQLException{   
        String modStoreDetail="",ItemNoS="",StoreCode="";        
        int closingStk=0;
        long ItemLoosePerPack=0,ItemPackPerBulk=0;
        StoreCode=returnCode("StoreMaster","StoreID","StoreName",""+jCboGRNStoreID.getSelectedItem());
        try{ 
            for(int row=0 ; row<(rowTblDetails) ; row++){
                ItemNoS=returnCode("Item_M","itemNo","itemName",(String)dataDetailsShown[row][1]); 
                ResultSet res=stat.executeQuery("Select itemLooseperPack,itemPackperBulk from Item_M where itemNo='"+ItemNoS+"'");
                res.next();
                //closingStk=0;
                ItemLoosePerPack=Long.parseLong(res.getString(1));
                ItemPackPerBulk=Long.parseLong(res.getString(2));
               // for(int col=8 ; col<14 ; col++){
               //   if(col==8 || col==11){
               //     if(Long.parseLong(""+dataDetailsShown[row][col])!=0)
               //       closingStk+=Long.parseLong(""+dataDetailsShown[row][col])*ItemLoosePerPack*ItemPackPerBulk;
               //     else
               //      closingStk+=0;
               //   }
               //   else if(col==9 || col==12){
               //      if(Long.parseLong(""+dataDetailsShown[row][col])!=0)
               //        closingStk+=Long.parseLong(""+dataDetailsShown[row][col])*ItemLoosePerPack;
               //      else
               //        closingStk+=0;
               //   }
               //    else if(col==10 || col==13){
               //      if(Long.parseLong(""+dataDetailsShown[row][col])!=0)
               //        closingStk+=Long.parseLong(""+dataDetailsShown[row][col]);
               //      else
               //        closingStk+=0;
               //   }                  
               // }               
                                  
                ResultSet resStoreTest=stat.executeQuery("Select * from Store_"+StoreCode+" where ItemNo='"+ItemNoS+"' and BatchNo='"+(String)dataDetailsShown[row][2]+"'");
                if(resStoreTest.next()){
                    modStoreDetail="";
                    modStoreDetail+="Update Store_"+StoreCode+" set StoreID='"+StoreCode+"',";                    
                    modStoreDetail+="Reciepts=Reciepts+"+Long.parseLong(""+dataDetailsShown[row][19])+",";                                    
                    modStoreDetail+="ExpiryDate='"+dataDetailsShown[row][3]+"'";
                    modStoreDetail+=",ClosingStock=ClosingStock+"+Long.parseLong(""+dataDetailsShown[row][19])+" where ItemNo='"+ItemNoS+"' and BatchNo='"+(String)dataDetailsShown[row][2]+"'";
                    stat.executeUpdate(modStoreDetail);
                    NoSaveStoreError=true;
                }
                else{
                    modStoreDetail="";
                    modStoreDetail+="Insert into Store_"+StoreCode+" (StoreID,ItemNo,OpeningStock,Reciepts,"; 
                    modStoreDetail+="Issues,BatchNo,ExpiryDate,LoosePerPack,PackperBulk,ClosingStock)";
                    modStoreDetail+=" values('"+StoreCode+"','"+ItemNoS+"',";
                    modStoreDetail+=""+Long.parseLong(""+dataDetailsShown[row][19])+","+Long.parseLong(""+dataDetailsShown[row][19])+",";                   
                    modStoreDetail+="0,'"+(String)dataDetailsShown[row][2]+"','"+(String)dataDetailsShown[row][3]+"',";
                    modStoreDetail+=""+ItemLoosePerPack+","+ItemPackPerBulk+","+Long.parseLong(""+dataDetailsShown[row][19])+")";
                    stat.executeUpdate(modStoreDetail);
                    NoSaveStoreError=true;
                }
            }
        }
        catch(Exception ex)
        {
            //con.rollback();           
            NoSaveStoreError=false;
            System.out.println("Error in newSaveStoreDB "+ex);
        }
    }
  
     /** @ modify and save the Details to the Table GRN_D */   
    public void modifySaveDetailDB()throws SQLException{
         String modDetail="",CurrencyID="",ItemNoM="";
         String TaxNameMDetail="",TaxCodeMDetail="",DisCodeMDetail="",DisNameMDetail="",ValueInDTblTaxM="",ValueInDTblDisM="";
        
      try{     
         for(i=0 ; i<(rowTblDetails) ; i++){ 
              ItemNoM=returnCode("Item_M","itemNo","itemName",(String)dataDetailsShown[i][1]);  
              CurrencyID=returnCode("CurrencyMaster","CM_ID","CM_Name",(String)dataDetailsShown[i][7]);
              ValueInDTblDisM=""+dataDetailsShown[i][14];
              ValueInDTblTaxM=""+dataDetailsShown[i][15];
              
              DisCodeMDetail=getCode(DisNameMDetail,ValueInDTblDisM,"DM_ID","DiscountMaster","DM_Name");          
              TaxCodeMDetail=getCode(TaxNameMDetail,ValueInDTblTaxM,"TaxCode","TaxMaster","TaxDesc");
             
             ResultSet resTest=stat.executeQuery("Select * from GRN_D where GRN_No='"+jTxtGRNCode.getText()+"' and Item_Code='"+ItemNoM+"' and Batch_No='"+dataDetailsShown[i][2]+"'");
             if(resTest.next()){           
              modDetail="UPDATE GRN_D set Slno='"+dataDetailsShown[i][0]+"'";
              modDetail+=",Expiry_Date='"+dataDetailsShown[i][3]+"'";
              modDetail+=",CP_Bulk="+Double.parseDouble(""+dataDetailsShown[i][4])+",CP_Pack="+Double.parseDouble(""+dataDetailsShown[i][5])+",";
              modDetail+="CP_Loose="+Double.parseDouble(""+dataDetailsShown[i][6])+",Curr_ID='"+CurrencyID+"',";
              modDetail+="Qty_Bulk="+Long.parseLong(""+dataDetailsShown[i][8])+",Qty_Pack="+Long.parseLong(""+dataDetailsShown[i][9])+",";
              modDetail+="Qty_Loose="+Long.parseLong(""+dataDetailsShown[i][10])+",Free_Qty_Bulk="+Long.parseLong(""+dataDetailsShown[i][11])+",";
              modDetail+="Free_Qty_Pack="+Long.parseLong(""+dataDetailsShown[i][12])+",Free_Qty_Loose="+Long.parseLong(""+dataDetailsShown[i][13])+",";
              modDetail+="Disc_Perc='"+DisCodeMDetail+"',Tax_Perc='"+TaxCodeMDetail+"',";
              modDetail+="SP_Bulk="+Double.parseDouble(""+dataDetailsShown[i][16])+",SP_Pack="+Double.parseDouble(""+dataDetailsShown[i][17])+",";
              modDetail+="SP_Loose="+Double.parseDouble(""+dataDetailsShown[i][18])+",Item_Tot="+Long.parseLong(""+dataDetailsShown[i][19]);
              modDetail+=" where GRN_No='"+jTxtGRNCode.getText()+"' and Item_Code='"+ItemNoM+"' and Batch_No='"+String.valueOf(dataDetailsShown[i][2])+"'";              
              stat.executeUpdate(modDetail);  
              System.out.println("end Modify");
             }
             else{              
              modDetail="Insert into GRN_D (GRN_No,Slno,Item_Code,Batch_No,Expiry_Date,";
              modDetail+="CP_Bulk,CP_Pack,CP_Loose,Curr_ID,Qty_Bulk,Qty_Pack,Qty_Loose,Free_Qty_Bulk,";
              modDetail+="Free_Qty_Pack,Free_Qty_Loose,Disc_Perc,Tax_Perc,SP_Bulk,SP_Pack,SP_Loose,Item_Tot)";
              modDetail+=" values('"+jTxtGRNCode.getText()+"','"+String.valueOf(jTblGRNDetails.getValueAt(i,0))+"','"+ItemNoM+"'";
              modDetail+=",'"+String.valueOf(jTblGRNDetails.getValueAt(i,2))+"','"+String.valueOf(jTblGRNDetails.getValueAt(i,3))+"'";
              modDetail+=","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,4)))+","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,5)));
              modDetail+=","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,6)))+",'"+CurrencyID+"'";
              modDetail+=","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,8)))+","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,9)));
              modDetail+=","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,10)))+","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,11)));
              modDetail+=","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,12)))+","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,13)));
              modDetail+=",'"+DisCodeMDetail+"','"+TaxCodeMDetail+"'";
              modDetail+=","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,16)))+","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,17)));
              modDetail+=","+Double.parseDouble(String.valueOf(jTblGRNDetails.getValueAt(i,18)))+","+Long.parseLong(String.valueOf(jTblGRNDetails.getValueAt(i,19)))+")";                                      
              stat.executeUpdate(modDetail);               
             }
          }   
        }
        catch(Exception ex){
            //con.rollback();
            System.out.println("Error in ModifySaveDetail"+ex);
        }        
    }
    
     /** @ modify or to add new record to the Table StoreMaster */
     public void modifySaveStoreDB()throws SQLException{                   
        String modStoreDetail="",ItemNoS="",StoreCode="";           
        int closingStk=0;
        long ItemLoosePerPack=0,ItemPackPerBulk=0;
        StoreCode=returnCode("StoreMaster","StoreID","StoreName",""+jCboGRNStoreID.getSelectedItem()); 
        
        try{ 
            // valueBeforeModify[i][colCount]
           for(int rowBeforeModify=0 ; rowBeforeModify < valueBeforeModifyCount ; rowBeforeModify++){                
              //  ResultSet res=stat.executeQuery("Select itemLooseperPack,itemPackperBulk from Item_M where itemNo='"+(String)valueBeforeModify[rowBeforeModify][0]+"'");
              //  res.next();
              //  ItemLoosePerPack=Long.parseLong(res.getString(1));
              //  ItemPackPerBulk=Long.parseLong(res.getString(2));
               // for(int col=2 ; col<8 ; col++){
               //   if(col==2 || col==5){
               //     if(Long.parseLong(""+valueBeforeModify[rowBeforeModify][col])!=0)
               //       closingStk=Long.parseLong(""+valueBeforeModify[rowBeforeModify][col])*ItemLoosePerPack*ItemPackPerBulk;
               //     else
               //      closingStk+=0;
               //   }
               //   else if(col==3 || col==6){
               //      if(Long.parseLong(""+valueBeforeModify[rowBeforeModify][col])!=0)
               //        closingStk+=Long.parseLong(""+valueBeforeModify[rowBeforeModify][col])*ItemLoosePerPack;
               //      else
               //        closingStk+=0;
               //   }
               //    else if(col==4 || col==7){
               //      if(Long.parseLong(""+valueBeforeModify[rowBeforeModify][col])!=0)
               //        closingStk+=Long.parseLong(""+valueBeforeModify[rowBeforeModify][col]);
               //      else
               //        closingStk+=0;
               //   }                  
               // }       
                
                ResultSet resStore=stat.executeQuery("Select * from Store_"+StoreCode+" where ItemNo='"+(String)valueBeforeModify[rowBeforeModify][0]+"' and BatchNo='"+(String)valueBeforeModify[rowBeforeModify][1]+"'");
                if(resStore.next()){
                    modStoreDetail="Update Store_"+StoreCode+"";                    
                    modStoreDetail+=" set Reciepts=Reciepts-"+Long.parseLong(""+valueBeforeModify[rowBeforeModify][2])+",";
                   // modStoreDetail+="RcptP=RcptP-"+Long.parseLong(""+valueBeforeModify[rowBeforeModify][3])+",";
                  //  modStoreDetail+="RcptB=RcptB-"+Long.parseLong(""+valueBeforeModify[rowBeforeModify][2])+",";                   
                    modStoreDetail+="ClosingStock=ClosingStock-"+Long.parseLong(""+valueBeforeModify[rowBeforeModify][2])+" where ItemNo='"+(String)valueBeforeModify[rowBeforeModify][0]+"' and BatchNo='"+(String)valueBeforeModify[rowBeforeModify][1]+"'";                   
                    stat.executeUpdate(modStoreDetail);
                }
           }
            closingStk=0;
            for(int row=0 ; row<(rowTblDetails) ; row++){
                ItemNoS=returnCode("Item_M","itemNo","itemName",(String)dataDetailsShown[row][1]); 
                ResultSet res1=stat.executeQuery("Select itemLooseperPack,itemPackperBulk from Item_M where itemNo='"+ItemNoS+"'");
                res1.next();
                ItemLoosePerPack=Long.parseLong(res1.getString(1));
                ItemPackPerBulk=Long.parseLong(res1.getString(2));
               // for(int colN=8 ; colN<14 ; colN++){
               //   if(colN==8 || colN==11){
               //     if(Long.parseLong(""+dataDetailsShown[row][colN])!=0)
               //       closingStk=Long.parseLong(""+dataDetailsShown[row][colN])*ItemLoosePerPack*ItemPackPerBulk;
               //     else
               //      closingStk+=0;
               //   }
               //   else if(colN==9 || colN==12){
               //      if(Long.parseLong(""+dataDetailsShown[row][colN])!=0)
               //        closingStk+=Long.parseLong(""+dataDetailsShown[row][colN])*ItemLoosePerPack;
               //      else
               //        closingStk+=0;
               //   }
               //    else if(colN==10 || colN==13){
               //      if(Long.parseLong(""+dataDetailsShown[row][colN])!=0)
               //        closingStk+=Long.parseLong(""+dataDetailsShown[row][colN]);
               //      else
               //        closingStk+=0;
               //   }                  
               // }               
                                  
                ResultSet resStoreTest=stat.executeQuery("Select * from Store_"+StoreCode+" where ItemNo='"+ItemNoS+"' and BatchNo='"+(String)dataDetailsShown[row][2]+"'");
                if(resStoreTest.next()){
                    modStoreDetail="";
                    modStoreDetail="Update Store_"+StoreCode+" set StoreID='"+StoreCode+"',";                    
                    modStoreDetail+="Reciepts=Reciepts+"+Long.parseLong(""+dataDetailsShown[row][19])+",";
                   // modStoreDetail+="RcptP=RcptP+"+Long.parseLong(""+dataDetailsShown[row][9])+",";
                   // modStoreDetail+="RcptB=RcptB+"+Long.parseLong(""+dataDetailsShown[row][8])+",";                   
                    modStoreDetail+="ExpiryDate='"+dataDetailsShown[row][3]+"'";
                    modStoreDetail+=",ClosingStock=ClosingStock+"+Long.parseLong(""+dataDetailsShown[row][19])+" where ItemNo='"+ItemNoS+"' and BatchNo='"+(String)dataDetailsShown[row][2]+"'";
                    stat.executeUpdate(modStoreDetail);
                    NoSaveStoreError=true;
                }
                else{
                    modStoreDetail="";
                    modStoreDetail="Insert into Store_"+StoreCode+" (StoreID,ItemNo,OpeningStock,Reciepts,"; 
                    modStoreDetail+="Issues,BatchNo,ExpiryDate,LoosePerPack,PackperBulk,ClosingStock)";
                    modStoreDetail+=" values('"+StoreCode+"','"+ItemNoS+"',";
                    modStoreDetail+=""+Long.parseLong(""+dataDetailsShown[row][19])+","+Long.parseLong(""+dataDetailsShown[row][19])+",";
                   // modStoreDetail+=""+Long.parseLong(""+dataDetailsShown[row][9])+","+Long.parseLong(""+dataDetailsShown[row][8])+",";
                    modStoreDetail+="0,'"+(String)dataDetailsShown[row][2]+"','"+(String)dataDetailsShown[row][3]+"',";
                    modStoreDetail+=""+ItemLoosePerPack+","+ItemPackPerBulk+","+Long.parseLong(""+dataDetailsShown[row][19])+")";
                    stat.executeUpdate(modStoreDetail);
                    NoSaveStoreError=true;
                }
            }
        }
        catch(Exception ex)
        {
            //con.rollback();           
            NoSaveStoreError=false;
            System.out.println("Error in modifySaveStoreDB "+ex);
        }
    }
  
     /** @ Method to get the code for Tax and Discount (Description and percentage)
      *  by passing the Respective tableName
      */
     public String getCode(String name,String fromText,String TableCode,String Table,String TableName){
         String codeofName="";
        try{              
             if(fromText.equals("0%")){ 
                codeofName= "000";
                name="";               
             }
             else{
                StringBuffer sb = new StringBuffer(fromText);
                for(j=1;j<=sb.length();j++){
                    if(sb.charAt(sb.length()-j)=='-')
                    {
                        name=sb.substring(0,sb.length()-j); 
                        name.trim();
                        break;
                    }
                }               
               ResultSet res=stat.executeQuery("SELECT "+TableCode+"  FROM "+Table+" WHERE "+TableName+" = '"+name+"'");
               System.out.println("SELECT "+TableCode+"  FROM "+Table+" WHERE "+TableName+" = '"+name+"'");
               res.next();
               codeofName=res.getString(1);
               System.out.println(codeofName);              
             }
        }
        catch(Exception ex){
             System.out.println("Error in getCode of "+Table+" "+ex );
        }
        return codeofName;
    }
    
     /** Method to get the code by passing the Table,TableCode,TableName and the whereCondition */
     public String returnCode(String Table,String TableCode,String WhereCondition,String forWhere){
         String Code="";
         try{
           ResultSet res=stat.executeQuery("Select "+TableCode+" from "+Table+" where "+WhereCondition+"='"+forWhere+"'"); 
           res.next();
           Code=res.getString(1);
         }
         catch(Exception ex){             
             System.out.println("Error in returnCode of "+Table+""+ex);
         }
         return Code;
     }
     
    /** @ Method called on click of Add Button to generate the next code from the Table SemaPhores
     *  by passing particular TableName 
     */
    private void generateCode(String TableName,javax.swing.JTextField jTxtCode){
     try{
         accessDB();
         String ss = "SELECT * FROM SemaPhores WHERE TableName = '"+TableName+"'";
         ResultSet res = stat.executeQuery(ss);
         res.next();
         ctr = Long.parseLong(res.getString(4));
         if(ctr < 10)
            jTxtCode.setText(res.getString(3)+"00"+ctr);  
         else if(ctr >= 10 && ctr < 100)
            jTxtCode.setText(res.getString(3)+"0"+ctr); 
         else if(ctr >= 100 && ctr < 1000)
            jTxtCode.setText(res.getString(3)+""+ctr);    
         con.close();
     }
     catch(Exception e){        
         System.out.println("Error in generateCode"+e+"\n2080");
     }
   }
 
   /** @ Method called on click of Save Button to update the ctr++ in the Table SemaPhores
    *  by passing particular TableName 
    */ 
   private void updateCode(String TableName){
      try{
          accessDB();
          ctr++;
          String ss1 = "UPDATE SemaPhores SET  MaxCtr = "+ctr+" WHERE TableName ='"+TableName+"'";
          stat.executeUpdate(ss1);          
          con.close();
      } 
      catch(Exception e){
         System.out.println("Error in updateCode"+e+"\n2773");
      }
    }
    
    /** @ Method to check the Masters Table for null entry */
    private void checkForEmptyDataBase(String table){        
        try{
            accessDB();
            String ss = "SELECT * FROM "+table;            
            ResultSet res = stat.executeQuery(ss);            
            if(!res.next()){
                JOptionPane.showMessageDialog(this," Table "+table+" in the Database has no entry.\n Make suitable entries in the Table to run this Form.  ","From Database:",JOptionPane.ERROR_MESSAGE);                    
                System.exit(0);
            }
            con.close();
        }
        catch(Exception e){
        } 
    }    
    
    /** @ Method to display the data in the jTable in jPnlGRNView */
    private void displayData(){        
        try{            
            accessDB( );            
            if(jCboGRNSupplier.getSelectedIndex()==0 && jCboGRNPONo.getSelectedIndex()==0  ){
                String ss1="SELECT COUNT(*) FROM GRN_M";               
                ResultSet res1 = stat.executeQuery(ss1);                
                res1.next();
                try{
                    rowSpecific=Integer.parseInt(res1.getString(1));
                }//end try
                catch(Exception e){
                    System.out.println("Error in displayData rowSpecific"+e);
                }//end catch
                
                dataSpecific= new Object[rowSpecific][colsShownH.length];
                //String ss2="SELECT GRN_No,GRN_Date,Supplier_Id,Cancelled FROM GRN_M ORDER BY GRN_Date";
                String ss2="SELECT GRN_M.GRN_No,GRN_M.GRN_Date,SupplierMaster.supName,GRN_M.Cancelled FROM GRN_M,SupplierMaster where GRN_M.Supplier_ID=SupplierMaster.SupCode ORDER BY GRN_M.GRN_Date";
                ResultSet res2 = stat.executeQuery(ss2);
                
                for(i=0;res2.next();i++)
                    for(j=0;j<colsShownH.length;j++)                       
                        dataSpecific[i][j]=res2.getString(j+1);                      
            }//end if            
            else if(jCboGRNPONo.getSelectedIndex()>0 && jCboGRNSupplier.getSelectedIndex()==0 ){
                
                
                //String ss=" SELECT * FROM GRN_M WHERE PO_No = (SELECT POM_No FROM PurchaseOrderHead WHERE POM_No = '" + jCboGRNPONo.getSelectedItem()+"')";
                String ss=" SELECT * FROM GRN_M WHERE PO_No = '"+jCboGRNPONo.getSelectedItem()+"'";
                System.out.println(ss);
                ResultSet res = stat.executeQuery(ss);                
                if(!res.next()){
                    JOptionPane.showMessageDialog(this,"The Purchase Order No '"+ jCboGRNPONo.getSelectedItem() +"' is currently not there in GRN.","Sorry!",JOptionPane.ERROR_MESSAGE);
                    jCboGRNPONo.setSelectedIndex(0);
                    displayData();
                }                
                else{
                    pono=true;
                    supplier = false;
                    String ss1="SELECT COUNT(*) FROM GRN_M WHERE PO_No = '" + jCboGRNPONo.getSelectedItem()+"' ";
                    ResultSet res1 = stat.executeQuery(ss1);
                    
                    res1.next();
                    try{
                        rowSpecific=Integer.parseInt(res1.getString(1));
                    }//end try
                    catch(Exception e){
                        System.out.println("Error in displayData rowSpecific 1"+e);
                    }//end catch
                    String ss2 = "SELECT GRN_M.GRN_No,GRN_M.GRN_Date,SupplierMaster.supName,GRN_M.Cancelled FROM GRN_M,SupplierMaster WHERE GRN_M.Supplier_ID=SupplierMaster.SupCode and GRN_M.PO_No = '" + jCboGRNPONo.getSelectedItem()+"' ORDER BY GRN_M.GRN_Date";
                    ResultSet res2 = stat.executeQuery(ss2);
                    dataSpecific = new Object[rowSpecific][colsShownH.length];
                    rowShown=rowSpecific;
                    for(i=0;res2.next();i++)
                        for(j=0;j<colsShownH.length;j++)
                            dataSpecific[i][j]=res2.getString(j+1);
                }//end else
            }//end else if  
            
            else if(jCboGRNSupplier.getSelectedIndex()>0 && jCboGRNPONo.getSelectedIndex()==0  ){ 
                
                //String ss=" SELECT * FROM GRN_M WHERE Supplier_ID = (SELECT SupCode FROM SupplierMaster WHERE SupName = '" + jCboGRNSupplier.getSelectedItem()+"')";
                
                
                String ss=" SELECT * FROM GRN_M WHERE Supplier_ID = '"+SupplierMaster.queryOneEle("SupCode", "WHERE SupName = '" + jCboGRNSupplier.getSelectedItem()+"'")+"'" ;
                ResultSet res = stat.executeQuery(ss);                               
                if(!res.next()){
                    JOptionPane.showMessageDialog(this,"The Supplier Name  '"+ jCboGRNSupplier.getSelectedItem() +"'  is currently not there in the Database.","Sorry!",JOptionPane.ERROR_MESSAGE);
                    jCboGRNSupplier.setSelectedIndex(0);
                    displayData();
                }                
                else{
                    pono=false;
                    supplier = true;
                    String ss1="SELECT COUNT(*) FROM GRN_M WHERE Supplier_ID = '" + SupplierMaster.queryOneEle("SupCode", "WHERE SupName = '" + jCboGRNSupplier.getSelectedItem()+"'")+"' ";
                    ResultSet res1 = stat.executeQuery(ss1);
                    System.out.println("SEGMENT   A  2 ");
                    res1.next();
                    try{
                        rowSpecific=Integer.parseInt(res1.getString(1));
                    }//end try
                    catch(Exception e){
                        System.out.println("Error in displayData rowSpecific 2"+e);
                    }//end catch
                    String ss2 = "SELECT GRN_M.GRN_No,GRN_M.GRN_Date,SupplierMaster.supName,GRN_M.Cancelled FROM GRN_M,SupplierMaster WHERE GRN_M.Supplier_ID=SupplierMaster.SupCode and GRN_M.Supplier_ID = '" + SupplierMaster.queryOneEle("SupCode", "WHERE SupName = '" + jCboGRNSupplier.getSelectedItem()+"'")+"' ORDER BY GRN_M.GRN_Date";
                    ResultSet res2 = stat.executeQuery(ss2);
                    System.out.println("SEGMENT   A  3");
                    dataSpecific = new Object[rowSpecific][colsShownH.length];
                    rowShown=rowSpecific;
                    for(i=0;res2.next();i++)
                        for(j=0;j<colsShownH.length;j++)
                            dataSpecific[i][j]=res2.getString(j+1);
                }//end else
            }//end else if
            
            else{//main else
                System.out.println("SEGMENT   B  0");
                
                if(pono== true && supplier == false){//if Purchase Order
                    
                    System.out.println("SEGMENT   B  0.1");
                    String ss=" SELECT * FROM GRN_M WHERE Supplier_ID =  '" + SupplierMaster.queryOneEle("SupCode", "WHERE SupName = '" + jCboGRNSupplier.getSelectedItem()+"'")+"' ";
                    ResultSet res = stat.executeQuery(ss);
                    System.out.println("SEGMENT   B  1");
                    
                    if(!res.next()){
                        JOptionPane.showMessageDialog(this,"The Supplier Name  '"+ jCboGRNSupplier.getSelectedItem() +"'  is currently not there in the Database.","Sorry!",JOptionPane.ERROR_MESSAGE);
                        jCboGRNSupplier.setSelectedIndex(0);
                        displayData();
                    }
                    else{
                        //String ss1="SELECT COUNT(*) FROM GRN_M WHERE Supplier_ID = (SELECT SupCode FROM SupplierMaster WHERE SupName = '" + jCboGRNSupplier.getSelectedItem()+"' )  AND  PO_No = (SELECT POM_No FROM PurchaseOrderHead WHERE POM_No = '" + jCboGRNPONo.getSelectedItem()+"')";
                        
                        String ss1="SELECT COUNT(*) FROM GRN_M WHERE Supplier_ID = '" + SupplierMaster.queryOneEle("SupCode", "WHERE SupName = '" + jCboGRNSupplier.getSelectedItem()+"'")+"'  AND  PO_No = '" + jCboGRNPONo.getSelectedItem()+"'";
                        ResultSet res1 = stat.executeQuery(ss1);
                        System.out.println("SEGMENT   B  2 ");
                        res1.next();
                        try{
                            rowSpecific=Integer.parseInt(res1.getString(1));
                        }//end try
                        catch(Exception e){
                            System.out.println("Error in displayData rowSpecific 3"+e);
                        }//end catch
                        
                        if(rowSpecific==0){
                            JOptionPane.showMessageDialog(this,"There are no items corresponding to your selection in the Database.","Sorry!",JOptionPane.ERROR_MESSAGE);
                            jCboGRNSupplier.setSelectedIndex(0);
                            displayData();
                            pono=true;
                            supplier=false;
                            
                        }//end if(rowSpecific==0)
                        else{// else (rowSpecific==0)
                            String ss2 = "SELECT GRN_M.GRN_No,GRN_M.GRN_Date,SupplierMaster.supName,GRN_M.Cancelled FROM GRN_M,SupplierMaster WHERE GRN_M.Supplier_ID=SupplierMaster.SupCode and GRN_M.Supplier_ID = '" + SupplierMaster.queryOneEle("SupCode", "WHERE SupName = '" + jCboGRNSupplier.getSelectedItem()+"'")+"'   AND  GRN_M.PO_No = '" + jCboGRNPONo.getSelectedItem()+"'";
                            ResultSet res2 = stat.executeQuery(ss2);
                            System.out.println("SEGMENT   B  3");
                            dataSpecific = new Object[rowSpecific][colsShownH.length];
                            rowShown=rowSpecific;
                            for(i=0;res2.next();i++)
                                for(j=0;j<colsShownH.length;j++)
                                    dataSpecific[i][j]=res2.getString(j+1);
                        }// else (rowSpecific==0)
                        
                    }
                }//end if store                
                
                else if (pono==false && supplier==true){//else Purchase Order
                    
                    String ss=" SELECT * FROM GRN_M WHERE PO_No = '" + jCboGRNPONo.getSelectedItem()+"'";
                    ResultSet res = stat.executeQuery(ss);
                    
                    if(!res.next()){
                        JOptionPane.showMessageDialog(this,"The PONo  '"+ jCboGRNPONo.getSelectedItem() +"'  is currently not there in the Database.","Sorry!",JOptionPane.ERROR_MESSAGE);
                        jCboGRNPONo.setSelectedIndex(0);
                        displayData();
                    }
                    else{
                        String ss1="SELECT COUNT(*) FROM GRN_M WHERE Supplier_ID = '" + SupplierMaster.queryOneEle("SupCode", "WHERE SupName = '" + jCboGRNSupplier.getSelectedItem()+"'")+"'   AND  PO_No = '" + jCboGRNPONo.getSelectedItem()+"'";
                        ResultSet res1 = stat.executeQuery(ss1);
                        System.out.println("SEGMENT   B  2 ");
                        res1.next();
                        try{
                            rowSpecific=Integer.parseInt(res1.getString(1));
                        }//end try
                        catch(Exception e){
                            System.out.println("Error in displayData rowSpecific 4"+e);
                        }//end catch
                        
                        System.out.println("LINE   778");
                        if(rowSpecific==0){
                            JOptionPane.showMessageDialog(this,"There are no items corresponding to your selection in the Database.","Sorry!",JOptionPane.ERROR_MESSAGE);
                            jCboGRNPONo.setSelectedIndex(0);
                            System.out.println("LINE   782");
                            displayData();
                            pono=false;
                            supplier=true;
                        }//end if(rowSpecific==0)
                        else{// else (rowSpecific==0)
                            
                            String ss2 = "SELECT GRN_M.GRN_No,GRN_M.GRN_Date,SupplierMaster.supName,GRN_M.Cancelled FROM GRN_M,SupplierMaster WHERE GRN_M.Supplier_ID=SupplierMaster.SupCode and GRN_M.Supplier_ID = '" + SupplierMaster.queryOneEle("SupCode", "WHERE SupName = '" + jCboGRNSupplier.getSelectedItem()+"'")+"'   AND  GRN_M.PO_No = '" + jCboGRNPONo.getSelectedItem()+"'";
                            ResultSet res2 = stat.executeQuery(ss2);
                            System.out.println("SEGMENT   B  3");
                            dataSpecific = new Object[rowSpecific][colsShownH.length];
                            rowShown=rowSpecific;
                            for(i=0;res2.next();i++)
                                for(j=0;j<colsShownH.length;j++)
                                    dataSpecific[i][j]=res2.getString(j+1);
                        }
                        
                        
                    }
                }
            }
            
            
            con.close();
            
            if(rowSpecific!=0)
                dateConstraint(dataSpecific,rowSpecific);
            
            rowShown=rowDateSpecific;
            
            dataShown = new Object[rowShown][colsShownH.length];
            
            if(rowSpecific!=0)
                dataShown=dataDateSpecific;
           
            jTblGRNHeader.setModel(new javax.swing.table.DefaultTableModel(dataShown,colsShownH)
            {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        
            h=jTblGRNHeader.getRowHeight()*(rowShown+1);
            if(h<320)
                jScrollPane1.setSize(580,h+5);
            else
                jScrollPane1.setSize(580,320);
            
        }      
        catch(Exception ex){
            System.out.println("Error in displayData"+ex);
            JOptionPane.showMessageDialog(this,"Please check for the Database Exclusively open","Sorry!",JOptionPane.ERROR_MESSAGE); 
        }
    }
    
     /** @ Method used in displayData method to display the data with in (fromDate and toDate)  */
     private void dateConstraint(Object[][] raw,int row){
        
        int frDD=Integer.parseInt( jCboGRNFromDD.getSelectedItem().toString() );
        int  frMM=Integer.parseInt( jCboGRNFromMM.getSelectedItem().toString() )-1;
        int frYY=Integer.parseInt( jCboGRNFromYYYY.getSelectedItem().toString() )-1900;
        
        int toDD=Integer.parseInt( jCboGRNToDD.getSelectedItem().toString() );
        int toMM=Integer.parseInt( jCboGRNToMM.getSelectedItem().toString() )-1;
        int toYY=Integer.parseInt( jCboGRNToYYYY.getSelectedItem().toString() )-1900;
        
        fromDate = new java.util.Date(frYY,frMM,frDD);
        toDate = new java.util.Date(toYY,toMM,toDD);
        rowDateSpecific=0;
        
        Object temp[][] = new Object[row][colsShownH.length];
        
        boolean rangeMatching=false;
        for(i=0;i<row;i++){
            int s[] = new int[3];
            StringTokenizer st = new StringTokenizer(raw[i][1].toString() , "/");
            int k=0;
            while( st.hasMoreTokens() ){
                s[k]=Integer.parseInt( st.nextToken() );
                k++;
            }//end while
            java.util.Date dataDate = new java.util.Date(s[2]-1900,s[1]-1,s[0]);
            if(fromDate.compareTo(dataDate)<=0 && toDate.compareTo(dataDate)>=0){//YYif
                for(j=0;j<4;j++){
                    temp[rowDateSpecific][j]=raw[i][j];
                    rangeMatching=true;
                }
                rowDateSpecific++;                
            }//end YYif            
        }//end for
                
        if(!rangeMatching){
            
            if(jCboGRNFromYYYY.getSelectedIndex()!=0)
                jCboGRNFromYYYY.setSelectedItem("1950");
            else
                jCboGRNToYYYY.setSelectedItem("2100");
            
            jCboGRNToMM.setSelectedItem("12");
            jCboGRNFromMM.setSelectedItem("01");
            jCboGRNFromDD.setSelectedItem("01");
            jCboGRNToDD.setSelectedItem("31");
            JOptionPane.showMessageDialog(this,"No items were found corresponding to your date-limit.","Sorry!",JOptionPane.ERROR_MESSAGE);
            displayData();
        }//*/
        else{
            
            dataDateSpecific = new Object[rowDateSpecific][colsShownH.length];
            dataDateSpecific=temp;
        }       
    }
    
    /** @ Method to display the data in the jTable in jPnlGRNAdd */ 
    private void displayDetailsTbl(){ 
        if(rowTblDetails == 0)
            jTxtGRNSlNo.setText(""+"1");
        
        dataDetailsShown = new Object[rowTblDetails][colAdd.length];
        
        for(i=0;i<(rowTblDetails - 1);i++)
            for(j=0;j<colAdd.length;j++)
                dataDetailsShown[i][j] = dataAdd[i][j];
        
        String ExpiryDate=jCboGRNExDateDD.getSelectedItem()+"/"+jCboGRNExDateMM.getSelectedItem()+"/"+jCboGRNExDateYYYY.getSelectedItem();
        if(rowTblDetails != 0 ){            
           
            dataDetailsShown[rowTblDetails - 1][0] = jTxtGRNSlNo.getText();
            dataDetailsShown[rowTblDetails - 1][1] = ""+jCboGRNItemName.getSelectedItem();
            dataDetailsShown[rowTblDetails - 1][2] = jTxtGRNBatchNo.getText();
            dataDetailsShown[rowTblDetails - 1][3] = ExpiryDate;
            dataDetailsShown[rowTblDetails - 1][4] = jTxtGRNBulkCP.getText() ;
            dataDetailsShown[rowTblDetails - 1][5] = jTxtGRNPackCP.getText();
            dataDetailsShown[rowTblDetails - 1][6] = jTxtGRNLooseCP.getText();
            dataDetailsShown[rowTblDetails - 1][7] = ""+jCboGRNCurrency.getSelectedItem();
            dataDetailsShown[rowTblDetails - 1][8] = jTxtGRNBulkQty.getText();
            dataDetailsShown[rowTblDetails - 1][9] = jTxtGRNPackQty.getText();
            dataDetailsShown[rowTblDetails - 1][10] = jTxtGRNLooseQty.getText();
            dataDetailsShown[rowTblDetails - 1][11] = jTxtGRNFreeBQty.getText();
            dataDetailsShown[rowTblDetails - 1][12] = jTxtGRNFreePQty.getText();
            dataDetailsShown[rowTblDetails - 1][13] = jTxtGRNFreeLQty.getText();
            dataDetailsShown[rowTblDetails - 1][14] = jCboGRNDiscountDetail.getSelectedItem();
            dataDetailsShown[rowTblDetails - 1][15] = ""+jCboGRNTaxDetail.getSelectedItem();
            dataDetailsShown[rowTblDetails - 1][16] = jTxtGRNBulkSP.getText();
            dataDetailsShown[rowTblDetails - 1][17] = jTxtGRNPackSP.getText(); 
            dataDetailsShown[rowTblDetails - 1][18] = jTxtGRNLooseSP.getText();
            dataDetailsShown[rowTblDetails - 1][19] = jTxtGRNItemTot.getText();
        }        
        dataAdd=dataDetailsShown ;
        grnDetailsModel();        
    }
    
    /** @ Method to set the Header fields to intial settings in jPnlGRNAdd, called on click of Add Button*/
    public void resetHeader(){
       // jTxtGRNCode.setText("") ;
        jCboGRNStoreID.setSelectedIndex(0);
        jCboGRNSupplierName.setSelectedIndex(0);
        jCboGRNPONO.setSelectedIndex(0);
        jCboGRNAuthBy.setSelectedIndex(0);
        jCboGRNDiscount.setSelectedIndex(0);
        jCboGRNTax.setSelectedIndex(0);
        jTxtGRNDCNo.setText("");
        jTxtGRNBillNo.setText("");
        jTxtGRNMisc.setText(""+0);
        jTxtAreaGRNRemarks.setText("");
        jCboGRNDateDD.setSelectedIndex(curDate.getDate()-1);
        jCboGRNDateMM.setSelectedIndex(curDate.getMonth());
        jCboGRNDateYYYY.setSelectedIndex( curDate.getYear()-50 );
        jCboGRNBillDateDD.setSelectedIndex(curDate.getDate()-1);
        jCboGRNBillDateMM.setSelectedIndex(curDate.getMonth());
        jCboGRNBillDateYYYY.setSelectedIndex( curDate.getYear()-50 );
    }
    
    /** @ Method to set the Detail fields to intial settings in jPnlGRNAdd, called on 
     *  click of AddItem Button and SaveEdit
     */
    public void resetDetails(){
        jCboGRNItemName.setSelectedIndex(0);
        jCboGRNCurrency.setSelectedIndex(0);
        jTxtGRNBatchNo.setText("");
        jTxtGRNBulkCP.setText("0");
        jTxtGRNPackCP.setText("0");
        jTxtGRNLooseCP.setText("0");
        jTxtGRNBulkSP.setText("0");
        jTxtGRNPackSP.setText("0");
        jTxtGRNLooseSP.setText("0");
        jTxtGRNBulkQty.setText("0");
        jTxtGRNLooseQty.setText("0");
        jTxtGRNPackQty.setText("0");
        jTxtGRNFreeBQty.setText("0");
        jTxtGRNFreePQty.setText("0");
        jTxtGRNFreeLQty.setText("0");
        jCboGRNDiscountDetail.setSelectedIndex(0);
        jCboGRNTaxDetail.setSelectedIndex(0);
        jTxtGRNItemTot.setText("0");
        jCboGRNExDateDD.setSelectedIndex(curDate.getDate()-1);
        jCboGRNExDateMM.setSelectedIndex(curDate.getMonth());
        jCboGRNExDateYYYY.setSelectedIndex( curDate.getYear()-50 );
        BulkQty=0;PackQty=0;LooseQty=0;FreeBQty=0;FreePQty=0;FreeLQty=0;
        BulkCP=0; PackCP=0; LooseCP=0; BulkSP=0; PackSP=0; LooseSP=0;
    }
    
    /** @ Method called on click of Modify Button*/
    public void modify(){                      
        ModFlag=true;        
        if(  rowSpecific==0   )
            JOptionPane.showMessageDialog(this," The Database is currently empty.","Sorry!",JOptionPane.ERROR_MESSAGE); 
        else if(jTblGRNHeader.getSelectedRow()==-1){
            JOptionPane.showMessageDialog(this," Select from the Table to modify the Database ","Sorry!",JOptionPane.ERROR_MESSAGE); 
            jTblGRNHeader.requestFocus();
        }
        else if(clickH){ 
           try{
                if(dataDateSpecific[selrow][3].equals("N")){
                    accessDB();
                    fillGRNAddHeader();            
                    fillGRNAddDetail();      
                    jBtnGRNAddItem.setVisible(true);
                    jBtnGRNEditItem.setVisible(true);              
                    jBtnGRNFinish.setVisible(true);
                    jBtnGRNRemoveItem.setVisible(true);                
                    jPnlGRNView.setVisible(false);
                    jPnlGRNAdd.setVisible(true);
                    jBtnGRNEditItem.setEnabled(true);
                    jBtnGRNSave.setEnabled(false);
                    jBtnGRNBack.setEnabled(true);
                    jBtnGRNSaveEdit.setVisible(false);
                    jBtnGRNFinish.setEnabled(false);
                   if(rowTblDetails<2) 
                     jBtnGRNRemoveItem.setEnabled(false);
                   else 
                     jBtnGRNRemoveItem.setEnabled(true);

                    jBtnGRNAddItem.setEnabled(true);
                    jTblGRNDetails.requestFocus();
                    con.close();
                }
                else{
                    
                    JOptionPane.showMessageDialog(this,"Cancelled GRN cannot be modified","Sorry!",JOptionPane.ERROR_MESSAGE); 
                }
           }
           catch(Exception ex){
                System.out.println("Error in Modify "+ex);
                //JOptionPane.showMessageDialog(this,"Please check for the Database Exclusively open","Sorry!",JOptionPane.ERROR_MESSAGE); 
           }        
       }
    }
    
     /** Method to fill the Header fields in jPnlGRNAdd from the Corresponding Table and 
      *  this method is called in modify Method(above)
      */
     public void fillGRNAddHeader(){
         try{                
                String addSupplier="",addAuthBy="",addStore="";
                String TableHeader = "SELECT * FROM GRN_M WHERE GRN_No = '"+dataDateSpecific[selrow][0]+"'";
                ResultSet res = stat.executeQuery(TableHeader);
                res.next() ;               
                   jTxtGRNCode.setText(res.getString(2));
                   int s[] = new int[3];
                   StringTokenizer st = new StringTokenizer(res.getString(3) , "/");
                   int k=0;
                      while( st.hasMoreTokens() )
                      {
                        s[k]=Integer.parseInt( st.nextToken() );
                        k++;
                      }//end while
                        jCboGRNDateDD.setSelectedIndex(s[0]-1);jCboGRNDateMM.setSelectedIndex(s[1]-1);jCboGRNDateYYYY.setSelectedIndex(s[2]-1950);                                               
                        addStore=res.getString(4);
                        addSupplier=res.getString(5);addAuthBy=res.getString(6);jTxtGRNDCNo.setText(res.getString(7));
                        jCboGRNPONO.setSelectedItem(res.getString(8)); jTxtGRNBillNo.setText(res.getString(9)); 
                                               
                        StringTokenizer st1 = new StringTokenizer(res.getString(10) , "/");
                        k=0;
                      while( st1.hasMoreTokens() )
                      {
                         s[k]=Integer.parseInt( st1.nextToken() );
                                k++;
                      }//end while
                        jCboGRNBillDateDD.setSelectedIndex(s[0]-1);jCboGRNBillDateMM.setSelectedIndex(s[1]-1);jCboGRNBillDateYYYY.setSelectedIndex(s[2]-1950);                                               
                        String Disc=res.getString(11);String Tax=res.getString(12);
                        jTxtGRNMisc.setText(res.getString(13));jTxtAreaGRNRemarks.setText(res.getString(14));
                        
                        if(Disc.equals("000"))
                            jCboGRNDiscount.setSelectedIndex(0) ;                            
                        else{
                            ResultSet resDNameValue=stat.executeQuery("Select DM_Name,DM_Value from DiscountMaster where DM_ID='"+Disc+"'");
                            resDNameValue.next();
                            String DiscNameValue=resDNameValue.getString(1)+"-"+resDNameValue.getString(2)+"%";                            
                            jCboGRNDiscount.setSelectedItem(DiscNameValue);
                        }
                        
                        if(Tax.equals("000"))
                            jCboGRNTax.setSelectedIndex(0) ;
                        else{
                            ResultSet resTNameValue=stat.executeQuery("Select TaxDesc,Percentage from TaxMaster where TaxCode='"+Tax+"'");
                            resTNameValue.next();
                            String TaxNameValue=resTNameValue.getString(1)+"-"+resTNameValue.getString(2)+"%";                            
                            jCboGRNTax.setSelectedItem(TaxNameValue);                            
                        }
                        
                String Sname=returnCode("SupplierMaster","SupName","Supcode",addSupplier);
                jCboGRNSupplierName.setSelectedItem(Sname);
                
                String Storename=returnCode("StoreMaster","StoreName","StoreID",addStore);
                jCboGRNStoreID.setSelectedItem(Storename);
                
                if(addAuthBy.trim().equals(""))
                    jCboGRNAuthBy.setSelectedIndex(0);
                else{
                    String Ename=returnCode("EmployeeMaster","EmpName","EmpCode",addAuthBy);
                    jCboGRNAuthBy.setSelectedItem(Ename);              
                }                  
         }
         catch(Exception ex){
             System.out.println("Error in fillGRNAddHeader" +ex);
             JOptionPane.showMessageDialog(this,"Please check for the Database Exclusively open","Sorry!",JOptionPane.ERROR_MESSAGE); 
         }
     }
     
     /** @ Method to fill the Detail fields in jPnlGRNAdd from the Corresponding Table and 
      *  this method is called in modify Method(above)
      */
     public void fillGRNAddDetail(){
       try
       {
         int CountOfTableDetails=0; 
         valueBeforeModifyCount=0;
         int colCount=0;
         String NoOfTableDetails=" SELECT COUNT(*) FROM GRN_D WHERE GRN_No = '"+dataDateSpecific[selrow][0]+"'";
         ResultSet resNTableDetails =   stat.executeQuery(NoOfTableDetails); 
         resNTableDetails.next(); 
          try{
            CountOfTableDetails=Integer.parseInt(resNTableDetails.getString(1));
          }//end try
          catch(Exception e){
             System.out.println("Error in fillGRNAddDetail CountOfTableDetails"+e);
          }//end catch*/
         System.out.println(CountOfTableDetails);
         if(CountOfTableDetails>=1){
            
                    rowTblDetails=CountOfTableDetails;
                   // initialRowsInDetTbl = rowTblDetails;
             
            dataDetailsShown = new Object[rowTblDetails][colAdd.length];
            valueBeforeModify= new Object[rowTblDetails][3];// 3 columns for ItemNo,BatchNo,ItemTot         
            String ItemCode[]= new String[rowTblDetails];
            String DisCode[] = new String[rowTblDetails];
            String TaxCode[] = new String[rowTblDetails];
            String CurID[] = new String[rowTblDetails];
            String TableDetails = "SELECT * FROM GRN_D WHERE GRN_No = '"+dataDateSpecific[selrow][0]+"'";
            ResultSet resTableDetails=stat.executeQuery(TableDetails);
        
            for(i=0;resTableDetails.next();i++){
                  colCount=0;
                for(j=0;j<colAdd.length;j++){
                    
                    if(j==1){
                        ItemCode[i] = resTableDetails.getString(4);
                        System.out.println("valueBeforeModify["+i+"]["+colCount+"]= "+valueBeforeModify[i][colCount]);
                         valueBeforeModify[i][colCount]=ItemCode[i] ;                            
                             colCount++;
                    }
                    else if(j==7)
                        CurID[i] = resTableDetails.getString(10);
                    else if(j==14)
                        DisCode[i] = resTableDetails.getString(17);                    
                    else if(j==15)
                        TaxCode[i] = resTableDetails.getString(18);                    
                    else{
                        dataDetailsShown[i][j] = resTableDetails.getString(j+3);
                        if(j==2){
                             System.out.println("valueBeforeModify["+i+"]["+colCount+"]= "+valueBeforeModify[i][colCount]);
                             valueBeforeModify[i][colCount]= dataDetailsShown[i][j];                            
                             colCount++;
                        }
                       // if(j>=8 && j<=13){
                       //     valueBeforeModify[i][colCount]= dataDetailsShown[i][j];                            
                       //      colCount++;
                       // }
                        else if(j==19){                           
                           valueBeforeModify[i][colCount]= dataDetailsShown[i][j];                            
                             colCount++;
                        }
                    }                      
                        System.out.println("dataDetailsShown["+i+"]["+j+"] = "+dataDetailsShown[i][j]);
              }            
                 valueBeforeModifyCount++;
            }            
           
            for(i=0;i<rowTblDetails;i++){
                String ICode="SELECT itemName FROM Item_M WHERE itemNo = '"+ItemCode[i]+ "'";
                ResultSet resItemCode = stat.executeQuery(ICode);
                resItemCode.next();
                dataDetailsShown[i][1] =  resItemCode.getString(1);
                
                String Cur_ID="SELECT CM_Name FROM CurrencyMaster WHERE CM_ID = '"+CurID[i]+ "'";
                ResultSet resCurCode = stat.executeQuery(Cur_ID);
                resCurCode.next();
                dataDetailsShown[i][7] =  resCurCode.getString(1);
                
                if (DisCode[i].equals("000"))
                    dataDetailsShown[i][14]="0%";
                else{
                    String DCode="SELECT DM_Name,DM_Value FROM DiscountMaster WHERE DM_ID = '"+DisCode[i]+ "'";
                    ResultSet resDCode=stat.executeQuery(DCode);
                    resDCode.next();
                    dataDetailsShown[i][14]=resDCode.getString(1)+"-"+resDCode.getString(2)+"%";
                }
                
                if (TaxCode[i].equals("000"))
                    dataDetailsShown[i][15]="0%";
                else{
                    String TCode="SELECT TaxDesc,Percentage FROM TaxMaster WHERE TaxCode = '"+TaxCode[i]+ "'";
                    ResultSet resTCode=stat.executeQuery(TCode);
                    resTCode.next();
                    dataDetailsShown[i][15]=resTCode.getString(1)+"-"+resTCode.getString(2)+"%";
                }
            }                  
         }
         else{
            JOptionPane.showMessageDialog(this,"No Details for this GRN NO","GRN Details",JOptionPane.INFORMATION_MESSAGE);
         }          
       }
       catch(Exception ex){
              System.out.println("Errorin fillGRNAddDetail"+ex); 
              System.out.println("i = "+i+"\nj = "+j);
       }
       finally{
            grnDetailsModel();
            dataAdd=dataDetailsShown ;
            jTxtGRNSlNo.setText(""+(Long.parseLong( dataDetailsShown[rowTblDetails-1][0].toString() ) + 1));
             
        }
            jPnlGRNView.setVisible(false);   
            jPnlGRNAdd.setVisible(true); 
            clickH=false;
            selrow=0;       
    }
     
     /** @ Method called on click of Edit Item, To fill the Values from the Particular Row
      *  in Details jTable to the Respective TextBox and ComboBox
      */
     private void detailsModify(){
         if(clickD){//main if]
            detailsUnEditable();
            jCboGRNCurrency.setSelectedItem(dataDetailsShown[selrowD][7]);
            jCboGRNItemName.setSelectedItem(dataDetailsShown[selrowD][1]);   
                
            jTxtGRNSlNo.setText(""+dataDetailsShown[selrowD][0]);
            jTxtGRNBatchNo.setText(""+dataDetailsShown[selrowD][2]);
            jTxtGRNBulkCP.setText(""+dataDetailsShown[selrowD][4]);
            jTxtGRNPackCP.setText(""+dataDetailsShown[selrowD][5]);
            jTxtGRNLooseCP.setText(""+dataDetailsShown[selrowD][6]);
            jTxtGRNBulkQty.setText(""+dataDetailsShown[selrowD][8]);
            jTxtGRNPackQty.setText(""+dataDetailsShown[selrowD][9]);
            jTxtGRNLooseQty.setText(""+dataDetailsShown[selrowD][10]);
            jTxtGRNFreeBQty.setText(""+dataDetailsShown[selrowD][11]);
            jTxtGRNFreePQty.setText(""+dataDetailsShown[selrowD][12]);
            jTxtGRNFreeLQty.setText(""+dataDetailsShown[selrowD][13]);            
            jTxtGRNBulkSP.setText(""+dataDetailsShown[selrowD][16]);
            jTxtGRNPackSP.setText(""+dataDetailsShown[selrowD][17]);
            jTxtGRNLooseSP.setText(""+dataDetailsShown[selrowD][18]);
            jTxtGRNItemTot.setText(""+dataDetailsShown[selrowD][19]);
            StringTokenizer st1 = new StringTokenizer(dataDetailsShown[selrowD][3].toString(), "/");
                     int s[] = new int[3];
                     int k=0;
                      while( st1.hasMoreTokens() )
                      {
                         s[k]=Integer.parseInt( st1.nextToken() );
                                k++;
                      }//end while
                        jCboGRNExDateDD.setSelectedIndex(s[0]-1);jCboGRNExDateMM.setSelectedIndex(s[1]-1);jCboGRNExDateYYYY.setSelectedIndex(s[2]-1950);                                               
                        
             if(dataDetailsShown[selrowD][14].equals(""+0))
                jCboGRNDiscountDetail.setSelectedIndex(0);
             else
               jCboGRNDiscountDetail.setSelectedItem(""+dataDetailsShown[selrowD][14]);
             
             if(dataDetailsShown[selrowD][15].equals(""+0))
                jCboGRNTaxDetail.setSelectedIndex(0);
             else
               jCboGRNTaxDetail.setSelectedItem(""+dataDetailsShown[selrowD][15]);
             
            jTxtGRNBatchNo.requestFocus();
            jTxtGRNBatchNo.selectAll();    
           
            jBtnGRNEditItem.setVisible(false);           
            jBtnGRNSave.setEnabled(false);
            jBtnGRNSaveEdit.setVisible(true);
            jBtnGRNFinish.setVisible(false);
            jBtnGRNRemoveItem.setVisible(false);
            jBtnGRNAddItem.setVisible(false);   
            jBtnGRNSaveEdit.setEnabled(true);
            jTblGRNDetails.clearSelection();
            jTblGRNDetails.setEnabled(false);
        }
        else{
            JOptionPane.showMessageDialog(this," Select a row from the GRN Details .","No rows selected!",JOptionPane.ERROR_MESSAGE); 
            jTblGRNDetails.requestFocus();
            jTblGRNDetails.setEnabled(true);
        }
     }
     
     /** @ Method to enable the Details Field for editing*/
     private void detailsEditable(){
            jCboGRNItemName.setEnabled(true); 
            jTxtGRNBatchNo.setEnabled(true);
     }

     /** @ Method to Dis-enable the Details Field for Non-editing*/
     private void detailsUnEditable(){
            jCboGRNItemName.setEnabled(false); 
            jTxtGRNBatchNo.setEnabled(false);
     }
     
      /** @ Method called on click of SaveEdit*/
     private void modDetails(){
        try{
            BulkCP=Float.parseFloat(jTxtGRNBulkCP.getText());BulkQty=Long.parseLong(jTxtGRNBulkQty.getText());
            BulkSP=Float.parseFloat(jTxtGRNBulkSP.getText());PackQty=Long.parseLong(jTxtGRNPackQty.getText());
            PackCP=Float.parseFloat(jTxtGRNPackCP.getText());LooseQty=Long.parseLong(jTxtGRNLooseQty.getText());
            PackSP=Float.parseFloat(jTxtGRNPackSP.getText());
            LooseCP=Float.parseFloat(jTxtGRNLooseCP.getText());
            LooseSP=Float.parseFloat(jTxtGRNLooseSP.getText());
        }
        catch(Exception ex)
        {
            System.out.println("Error in modDetails"+ex);
        }
        checkDetailsValidation();
         if(detailsAreValid){
            jBtnGRNAddItem.setVisible(true);
            jBtnGRNAddItem.setEnabled(true);
            jBtnGRNEditItem.setVisible(true);
            jBtnGRNRemoveItem.setVisible(true);
            jBtnGRNFinish.setVisible(true);
            if(rowTblDetails>1)
                jBtnGRNRemoveItem.setEnabled(true);
            else
                jBtnGRNRemoveItem.setEnabled(false);
            jBtnGRNFinish.setEnabled(true);
            jBtnGRNSaveEdit.setVisible(false);               
            fillDetailsTbl(selrowD);
            resetDetails();
            jTxtGRNSlNo.setText("" + (rowTblDetails+1)); 
            grnDetailsModel();
        }
      }
 
       /** @ Method called in modDetails Method above to fill the details jTable after doing some modifications*/
      private void fillDetailsTbl(int r){
       if(r==-1)
           JOptionPane.showMessageDialog(this,"Do Not Choose Item from GRN Detail while Save Edit","Save Edit",JOptionPane.ERROR_MESSAGE);
       else{    
        String ExpiryDate=jCboGRNExDateDD.getSelectedItem()+"/"+jCboGRNExDateMM.getSelectedItem()+"/"+jCboGRNExDateYYYY.getSelectedItem();  
        dataDetailsShown[r][0] = jTxtGRNSlNo.getText();
        dataDetailsShown[r][1] =""+jCboGRNItemName.getSelectedItem();
        dataDetailsShown[r][2] =jTxtGRNBatchNo.getText();
        dataDetailsShown[r][3] =ExpiryDate;
        dataDetailsShown[r][4] = jTxtGRNBulkCP.getText() ;
        dataDetailsShown[r][5] = jTxtGRNPackCP.getText();
        dataDetailsShown[r][6] = jTxtGRNLooseCP.getText();
        dataDetailsShown[r][7] = ""+jCboGRNCurrency.getSelectedItem();
        dataDetailsShown[r][8] = jTxtGRNBulkQty.getText();
        dataDetailsShown[r][9] = jTxtGRNPackQty.getText();
        dataDetailsShown[r][10] = jTxtGRNLooseQty.getText();
        dataDetailsShown[r][11] = jTxtGRNFreeBQty.getText();
        dataDetailsShown[r][12] = jTxtGRNFreePQty.getText();
        dataDetailsShown[r][13] = jTxtGRNFreeLQty.getText();
        dataDetailsShown[r][14] = jCboGRNDiscountDetail.getSelectedItem();
        dataDetailsShown[r][15] = jCboGRNTaxDetail.getSelectedItem();
        dataDetailsShown[r][16] = jTxtGRNBulkSP.getText();
        dataDetailsShown[r][17] = jTxtGRNPackSP.getText(); 
        dataDetailsShown[r][18] = jTxtGRNLooseSP.getText();
        dataDetailsShown[r][19] = jTxtGRNItemTot.getText();
       }
     }
     
     /** @ Method to Dis-enable the Header Field for Non-editing*/
     private void headerUnEditable(){
        jCboGRNDateDD.setEnabled(false);     jCboGRNDateMM.setEnabled(false);
        jCboGRNDateYYYY.setEnabled(false);   jCboGRNSupplierName.setEnabled(false);
        jCboGRNPONO.setEnabled(false);       jCboGRNBillDateDD.setEnabled(false);
        jCboGRNBillDateMM.setEnabled(false); jCboGRNBillDateYYYY.setEnabled(false);
        jCboGRNDiscount.setEnabled(false);   jCboGRNTax.setEnabled(false);
        jCboGRNAuthBy.setEnabled(false);     jTxtAreaGRNRemarks.setEnabled(false);
        jTxtGRNDCNo.setEnabled(false);       jTxtGRNBillNo.setEnabled(false);
        jTxtGRNMisc.setEnabled(false);       jTxtGRNCode.setEnabled(false);    
        jCboGRNStoreID.setEnabled(false);
     }
      
     /** @ Method to enable the Header Field for editing*/
     private void headerEditable(){
        jCboGRNDateDD.setEnabled(true);     jCboGRNDateMM.setEnabled(true);
        jCboGRNDateYYYY.setEnabled(true);   jCboGRNSupplierName.setEnabled(true);
        jCboGRNPONO.setEnabled(true);       jCboGRNBillDateDD.setEnabled(true);
        jCboGRNBillDateMM.setEnabled(true); jCboGRNBillDateYYYY.setEnabled(true);
        jCboGRNDiscount.setEnabled(true);   jCboGRNTax.setEnabled(true);
        jCboGRNAuthBy.setEnabled(true);     jTxtAreaGRNRemarks.setEnabled(true);
        jTxtGRNDCNo.setEnabled(true);       jTxtGRNBillNo.setEnabled(true);
        jTxtGRNMisc.setEnabled(true);       jTxtGRNCode.setEnabled(false);
        jCboGRNStoreID.setEnabled(true);
     }
      
     /** @ Method to Cancel the GRN called on click of Cancel Button and to view in jPnlGRNView jTable*/
     private void cancelGRN(String TableName){
        if(clickH){
            try{
                accessDB();
                String cancelUpd = "UPDATE "+TableName+" SET Cancelled = 'Y' WHERE GRN_No = '"+dataShown[selrow][0]+"'";                
                stat.executeUpdate(cancelUpd);
                con.close();
            }
            catch(Exception e){
                System.out.println(e+"\n2397");
            }
            clickH=false;
            jTblGRNHeader.clearSelection();
        }
        else
            JOptionPane.showMessageDialog(this," Select from the Table to cancel the GRN ","Cancel GRN",JOptionPane.ERROR_MESSAGE);             
    }
     
      /** @ Method called on click of Search Button in jPnlGRNView */
     private void searchPressed() {
     if(  rowShown==0   )
            JOptionPane.showMessageDialog(this," The Database is currently empty.","Sorry!",JOptionPane.ERROR_MESSAGE);
     else{
            jPnlGRNSearch.setVisible(true);
            jCboGRNSearch.setSelectedIndex(0);
            jListGRNSearch.setSelectedIndex(0);
            int rowIndex=searchElement(  (String)( jListGRNSearch.getSelectedValue() )  ,unsorted   );
            
            // index 0 corresponds to the 1st item of combo box
            jCboGRNFromDD.setEnabled(false);     jCboGRNToDD.setEnabled(false);   
            jCboGRNFromMM.setEnabled(false);     jCboGRNToMM.setEnabled(false);
            jCboGRNFromYYYY.setEnabled(false);   jCboGRNToYYYY.setEnabled(false); 
            
            jCboGRNPONo.setEnabled(false);
            jCboGRNSupplier.setEnabled(false);
            
            jBtnGRNAdd.setEnabled(false);
            jBtnGRNModify.setEnabled(false);
            jBtnGRNSearch.setEnabled(false);
            jBtnGRNCancelView.setEnabled(false);
            jBtnGRNExit.setEnabled(false);
            jTblGRNHeader.clearSelection();
            jTxtGRNSearch.setText(""+jListGRNSearch.getSelectedValue());
            jTxtGRNSearch.requestFocus();
            jTxtGRNSearch.selectAll();
            jTblGRNHeader.changeSelection( rowIndex ,0,true,false);
        }
     }
      
      /** @ Method called on click of SearchCancel and Back Button in jPnlGRNSearch*/     
      private void searchClosePressed() {          
        if(rowShown>=1){     
            jCboGRNSearch.setSelectedItem("GRN NO");
            try{
            if(!list.isEmpty())
            list.removeAllElements();
            }
            catch(Exception e){
                System.out.println("Exception in searchClosePressed():\t"+e);
            }
        }
            
            jPnlGRNView.setVisible(true);
            jPnlGRNAdd.setVisible(false);
            jPnlGRNSearch.setVisible(false);
            jTblGRNHeader.clearSelection();
            jTxtGRNSearch.setText("");
        
            jCboGRNFromDD.setEnabled(true);     jCboGRNToDD.setEnabled(true);   
            jCboGRNFromMM.setEnabled(true);     jCboGRNToMM.setEnabled(true);
            jCboGRNFromYYYY.setEnabled(true);   jCboGRNToYYYY.setEnabled(true); 
            
            jCboGRNPONo.setEnabled(true);
            jCboGRNSupplier.setEnabled(true);
            
            jBtnGRNAdd.setEnabled(true);
            jBtnGRNModify.setEnabled(true);
            jBtnGRNSearch.setEnabled(true);
            jBtnGRNCancelView.setEnabled(true); 
            jBtnGRNExit.setEnabled(true);        
     }
      
     /** @ Method called on click of Combo Search in jPnlGRNSearch to sort the strings*/      
     private void search(javax.swing.JList listSearch) {
       if(rowShown>=1){  
            list=new Vector(rowShown);
            if( "GRN No".equals( jCboGRNSearch.getSelectedItem() ) )
                sortStrings(dataShown,rowShown,0,listSearch);
            else if("GRN Date".equals( jCboGRNSearch.getSelectedItem() ) )
                sortStrings(dataShown,rowShown,1,listSearch);
            else
                sortStrings(dataShown,rowShown,2,listSearch);
            displaySearch(jListGRNSearch);        
            jTxtGRNSearch.requestFocus();     
       }
     }
    
     /** @ Method called in Search Method (above) to sort the strings in the ListBox and display*/     
     public void sortStrings(Object[][] rawData, int rows, int colNo,javax.swing.JList listSearch) {        
        try{
            list.removeAllElements();  
        } 
        catch(Exception e){
            System.out.println(e);
        }
        //SORTS THE CONTENTS IN ASCENDING ORDER
        sorted=new String[rows];        
        unsorted=new String[rows];       
        
        for(j=0;j<rows;j++){
            unsorted[j]=((String)(rawData[j][colNo])).trim();
            sorted[j]=unsorted[j];            
        } 
        
        for(j=0;j<rows;j++){       
            for(i=j+1;i<rows;i++){ 
                if(sorted[i].compareToIgnoreCase(sorted[j]) <0){                    
                    String temp = sorted[j];
                    sorted[j]=sorted[i];
                    sorted[i]=temp;
                }
            }            
        }
        
        for(j=0;j<rows;j++){
            list.addElement(sorted[j]);
            listSearch.setListData(list);
            
        }     
    }
     
    /** @ Method called in Search Method (above)  to display the search element 
    *  corresponding to String typed in the Search TextBox, that in the Listbox
     */     
    public void displaySearch(javax.swing.JList listSearch) {        
        for(i=0;i<sorted.length;i++){            
            if( sorted[i].regionMatches( true,0,key,0,key.length() ) ){                
                listSearch.setSelectedValue(sorted[i],true);                
                jTblGRNHeader.clearSelection();                
                int index=searchElement(sorted[i],unsorted);                
                jTblGRNHeader.changeSelection( index ,0,true,false);                               
                eleFound=true;
                break;
            }            
        }
       
        if(!eleFound)
            JOptionPane.showMessageDialog(this," No match found. ","Sorry!",JOptionPane.ERROR_MESSAGE);
        
        eleFound=false;        
    }
    
    /** @ Method to get the index value of a particular String in the ListBox */
    private int searchElement(String key, String[] a) {
        int indx=-1;
        for(i=0;i<a.length;i++){
            if( key.equals(a[i]) )
                indx=i;
        }    
        
        return indx;
    }
      
    /** @ Method called on click of RemoveItem , Deletes the selected row from the Table GRN_D
     * and updates the Table Store_(Respective StoreID)
     */ 
    public void removeItem()throws SQLException{
        jBtnGRNSave.setEnabled(false);
        RemoveItem=true;
        jBtnGRNBack.setEnabled(true);
        String StoreCode="",ItemNoS="";           
        int closingStk=0,ItemLoosePerPack=0,ItemPackPerBulk=0;
         if(!clickD)
            JOptionPane.showMessageDialog(this,"Select the row you want to delete.","Error!",JOptionPane.ERROR_MESSAGE);
      
         else if(clickD){//item selected from Details Table
              if(ModFlag && rowTblDetails>1){
                  int Remove=JOptionPane.showConfirmDialog(this,"Are you sure Delete a Row in the Database","Delete",JOptionPane.YES_NO_OPTION);
                   if(Remove==0){
                        try{
                             accessDB(); 
                             //con.setAutoCommit(false);
                             ItemNoS=returnCode("Item_M","itemNo","itemName",(String)dataAdd[selrowD][1]); 
                             StoreCode=returnCode("StoreMaster","StoreID","StoreName",""+jCboGRNStoreID.getSelectedItem());
                             
                            //  ResultSet res=stat.executeQuery("Select itemLooseperPack,itemPackperBulk from Item_M where itemNo='"+ItemNoS+"'");
                            //    res.next();
                            //    ItemLoosePerPack=Long.parseLong(res.getString(1));
                            //    ItemPackPerBulk=Long.parseLong(res.getString(2));
                            //    for(int col=8 ; col<14 ; col++){
                           //       if(col==8 || col==11){
                            //        if(Long.parseLong(""+dataAdd[selrowD][col])!=0)
                            //          closingStk=Long.parseLong(""+dataAdd[selrowD][col])*ItemLoosePerPack*ItemPackPerBulk;
                            //        else
                             //        closingStk+=0;
                            //      }
                            //      else if(col==9 || col==12){
                            //         if(Long.parseLong(""+dataAdd[selrow][col])!=0)
                           //            closingStk+=Long.parseLong(""+dataAdd[selrowD][col])*ItemLoosePerPack;
                            //         else
                            //           closingStk+=0;
                           //       }
                           //        else if(col==10 || col==13){
                           //          if(Long.parseLong(""+dataAdd[selrowD][col])!=0)
                            //           closingStk+=Long.parseLong(""+dataAdd[selrowD][col]);
                           //          else
                           //            closingStk+=0;
                            //      }                  
                            //    }
                                
                              String ss = ""; 
                              
                              ResultSet resD=stat.executeQuery("Select * from Store_"+StoreCode+" where BatchNo='"+dataAdd[selrowD][2]+"' and ItemNo='"+ItemNoS+"'");
                                if(resD.next()){                                    
                                    ss="Update Store_"+StoreCode+" set StoreID='"+StoreCode+"',";                    
                                    ss+="Reciepts=Reciepts-"+Long.parseLong(""+dataAdd[selrowD][19])+",";
                                   // ss+="RcptP=RcptP-"+Long.parseLong(""+dataAdd[selrowD][9])+",";
                                   // ss+="RcptB=RcptB-"+Long.parseLong(""+dataAdd[selrowD][8])+","; 
                                    ss+="ClosingStock=ClosingStock-"+Long.parseLong(""+dataAdd[selrowD][19])+" where ItemNo= '"+ItemNoS+ "' and BatchNo='"+dataAdd[selrowD][2] + "'";
                                    stat.executeUpdate(ss);                                  
                                }                             
                            
                             String ss1 = "DELETE FROM GRN_D WHERE GRN_No = '"+jTxtGRNCode.getText()+"' and Item_Code = '"+ItemNoS+ "' and Batch_No='"+dataAdd[selrowD][2] + "'";
                             System.out.println("No Error in Update 3309");
                             stat.executeUpdate(ss1);
                             //con.commit();
                             con.close();
                          }//end try
                          catch(Exception e){                              
                              //con.rollback();
                              //con.setAutoCommit(true);
                              System.out.println("Error in Remove Item "+e+"\t3315");
                          }//end catch
                        
                            resetDetails();
                            for(i=0;i<rowTblDetails;i++)
                                for(j=0;j<colAdd.length;j++){
                                    if( i >= selrowD && (i < rowTblDetails-1) ){
                                        if(j==0)
                                            dataAdd[i][j] ="" + (i+1);
                                        else
                                            dataAdd[i][j] = dataAdd[i+1][j];
                                    }
                                }//end for

                            rowTblDetails --;
                            dataDetailsShown = new Object[rowTblDetails][colAdd.length];
                            for(i=0;i<rowTblDetails;i++)
                                for(j=0;j<colAdd.length;j++)
                                    dataDetailsShown[i][j] = dataAdd[i][j];
                            dataAdd=dataDetailsShown ;
                            jTxtGRNSlNo.setText("" + (rowTblDetails+1));
                            grnDetailsModel();

                   }//end if
                   else{
                       ;
                   }
              }//end if
              else if(!ModFlag && rowTblDetails>=1){
                       resetDetails();
                        for(i=0;i<rowTblDetails;i++)
                            for(j=0;j<colAdd.length;j++){
                                if( i >= selrowD && (i < rowTblDetails-1) ){
                                    if(j==0)
                                        dataAdd[i][j] ="" + (i+1);
                                    else
                                        dataAdd[i][j] = dataAdd[i+1][j];
                                }
                            }//end for

                        rowTblDetails --;
                        dataDetailsShown = new Object[rowTblDetails][colAdd.length];
                        for(i=0;i<rowTblDetails;i++)
                            for(j=0;j<colAdd.length;j++)
                                dataDetailsShown[i][j] = dataAdd[i][j];
                        dataAdd=dataDetailsShown ;
                        jTxtGRNSlNo.setText("" + (rowTblDetails+1));
                        grnDetailsModel();
              }         
            
        }//end else if
         
        if(selrowD==1 && rowTblDetails==1 && ModFlag){
            //JOptionPane.showMessageDialog(this,"The GRN Details Table cannot be empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jBtnGRNRemoveItem.setEnabled(false);
            jBtnGRNFinish.setEnabled(true);
            jBtnGRNBack.setEnabled(true);
        }
        else if(selrowD==0 && rowTblDetails==0 && !ModFlag){
            JOptionPane.showMessageDialog(this,"The GRN Details Table cannot be empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jBtnGRNRemoveItem.setEnabled(false);
            jBtnGRNFinish.setEnabled(false);
            jBtnGRNBack.setEnabled(true);
        }
        jTblGRNDetails.clearSelection();
        clickD=false;
    }
    
     /** @ Method to Validate the Date entered in GRNDate, BillDate and ExpiryDate and make sure to enter the valid Date */
     public void dateCheck(javax.swing.JComboBox jCboYY,javax.swing.JComboBox jCboMM,javax.swing.JComboBox jCboDD,String Date){         
                 
        if( jCboMM.getSelectedIndex()==1 && Long.parseLong(""+jCboYY.getSelectedItem())%4==0 &&  Long.parseLong(""+jCboDD.getSelectedItem())>29){
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }
        else if( jCboMM.getSelectedIndex()==1 && Long.parseLong(""+jCboYY.getSelectedItem())%4!=0 && Long.parseLong(""+jCboDD.getSelectedItem())>28){
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }
        else if( jCboMM.getSelectedIndex()==3 && Long.parseLong(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Long.parseLong(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else if( jCboMM.getSelectedIndex()==5 && Long.parseLong(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Long.parseLong(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else if( jCboMM.getSelectedIndex()==8 && Long.parseLong(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Long.parseLong(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else if( jCboMM.getSelectedIndex()==10 && Long.parseLong(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Long.parseLong(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else {
            getError="NoError";
            dateCheckRequired=false;
        }
    }
     
    /** @ Method to initialize the Date entered in the GRNDate,BillDate and ExpiryDate */   
    public void initializeDate(){
        int cboGRNYear=Integer.parseInt(String.valueOf(jCboGRNDateYYYY.getSelectedItem()));
        int cboGRNDate=Integer.parseInt(String.valueOf(jCboGRNDateDD.getSelectedItem()));
        int cboGRNMonth=Integer.parseInt(String.valueOf(jCboGRNDateMM.getSelectedItem()));
        
          GRNDate.setDate(cboGRNDate);
          GRNDate.setMonth(cboGRNMonth-1);
          GRNDate.setYear(cboGRNYear-1900);
        int cboBYear=Integer.parseInt(String.valueOf(jCboGRNBillDateYYYY.getSelectedItem()));
        int cboBDate=Integer.parseInt(String.valueOf(jCboGRNBillDateDD.getSelectedItem()));
        int cboBMonth=Integer.parseInt(String.valueOf(jCboGRNBillDateMM.getSelectedItem()));
        
            BillDate.setDate(cboBDate);
            BillDate.setMonth(cboBMonth-1);
            BillDate.setYear(cboBYear-1900);
        int cboEYear=Integer.parseInt(String.valueOf(jCboGRNExDateYYYY.getSelectedItem()));
        int cboEDate=Integer.parseInt(String.valueOf(jCboGRNExDateDD.getSelectedItem()));
        int cboEMonth=Integer.parseInt(String.valueOf(jCboGRNExDateMM.getSelectedItem()));
        
            ExpiryDate.setDate(cboEDate);
            ExpiryDate.setMonth(cboEMonth-1);
            ExpiryDate.setYear(cboEYear-1900);  
            
           curDate.setDate(curDate.getDate());
           curDate.setMonth(curDate.getMonth());
           curDate.setYear(curDate.getYear());
    }
    
    /** @ Method to validate the entry in the Details jTable in the jPnlGRNAdd */ 
    private void checkDetailsValidation(){        
        detailsAreValid=false;
        initializeDate();
           System.out.println(curDate);
        System.out.println(ExpiryDate);
       
        if(jCboGRNItemName.getSelectedIndex()==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Select an item from the Item List.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNItemName.requestFocus();
        }
        else if(jTxtGRNBatchNo.getText().equals("")){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Batch No field should not be empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtGRNBatchNo.requestFocus();
        }
        else if(ExpiryDate.before(curDate)){           
            JOptionPane.showMessageDialog(this,"Expiry Date should be on or after Current Date","Date",JOptionPane.INFORMATION_MESSAGE);            
            jCboGRNExDateDD.requestFocus();
            detailsAreValid=false;
        }
        else if(BulkCP==0 && PackCP==0 && LooseCP==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"All Three Bulk Cost Price,Pack Cost Price and Loose CostPrice field should not be 0","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtGRNBulkCP.requestFocus();
        }       
        else if(jCboGRNCurrency.getSelectedIndex()==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Select an Currency from the Item List.!","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNCurrency.requestFocus();
        }
        else if(BulkQty==0 && PackQty==0 && LooseQty==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"All three Bulk Qty,Pack Qty and Loose Qty Field cannot be 0!","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtGRNBulkQty.requestFocus();
        }
        
        else if(BulkSP==0 && PackSP==0 && LooseSP==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"All three Bulk Selling Price,Pack Selling Price and Loose Selling Price  field cannot be 0!","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtGRNBulkSP.requestFocus();
        } 
        else if(BulkQty==0 && BulkCP!=0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Bulk Qty field cannot be 0 when the Bulk Cost Price has a value","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtGRNBulkQty.requestFocus();
        } 
        else if(BulkSP==0 && BulkCP!=0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Bulk Selling Price field cannot be 0 when the Bulk Cost Price has a value!","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtGRNBulkSP.requestFocus();
        } 
        else if(PackQty==0 && PackCP!=0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Pack Qty field cannot be 0 when the Pack Cost Price has a value","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtGRNPackQty.requestFocus();
        } 
        else if(PackSP==0 && PackCP!=0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Pack Selling Price field cannot be 0 when the Pack Cost Price has a value!","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtGRNPackSP.requestFocus();
        } 
         else if(LooseQty==0 && LooseCP!=0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Loose Qty field cannot be 0 when the Loose Cost Price has a value","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtGRNLooseQty.requestFocus();
        } 
        else if(LooseSP==0 && LooseCP!=0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Loose Selling Price field cannot be 0 when the Loose Cost Price has a value!","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtGRNLooseSP.requestFocus();
        } 
        else {
            detailsAreValid=true;            
        } 
    }
    
      /** @ Method to validate the entry in the Header jTable in the jPnlGRNAdd */ 
     private void checkHeaderValidation(){
        headerIsValid=false;        
            String Code=jTxtGRNCode.getText().trim();         
        if(Code.equals("")){
            JOptionPane.showMessageDialog(this," The Code-field is empty ","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtGRNCode.setText("");
            jTxtGRNCode.requestFocus();
            headerIsValid=false;
        }              
        else if(jCboGRNStoreID.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(this,"Select Store Name!","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNStoreID.requestFocus();
            headerIsValid=false;
        }
        else if(jCboGRNPONO.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(this,"Select Purchase Order No!","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNPONO.requestFocus();
            headerIsValid=false;
        }
        else if(jCboGRNSupplierName.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(this,"Select Supplier Name!","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNSupplierName.requestFocus();
            headerIsValid=false;
        }
        else if(jCboGRNAuthBy.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(this,"Select Authorized By!","Error!",JOptionPane.ERROR_MESSAGE);
            jCboGRNAuthBy.requestFocus();
            headerIsValid=false;
        }            
        else if(rowTblDetails==0){
            JOptionPane.showMessageDialog(this,"The Details Table cannot be empty","Error!",JOptionPane.ERROR_MESSAGE);
            headerIsValid=false;
        }
        
        else{
            headerIsValid=true;
        }           
    }
        
   /** @ Method to set the Model of Details jTable in jPnlGRNAdd */  
   public void grnDetailsModel(){       
     for(int i=0;i<rowTblDetails;i++){
          dataDetailsShown[i][4] = new Double(""+dataDetailsShown[i][4]  );
          dataDetailsShown[i][5] = new Double(""+dataDetailsShown[i][5]  );
          dataDetailsShown[i][6] = new Double(""+dataDetailsShown[i][6]  );
          dataDetailsShown[i][8] = new Long(""+dataDetailsShown[i][8]  );
          dataDetailsShown[i][9] = new Long(""+dataDetailsShown[i][9]  );
          dataDetailsShown[i][10] = new Long(""+dataDetailsShown[i][10]  );
          dataDetailsShown[i][11] = new Long(""+dataDetailsShown[i][11]  );
          dataDetailsShown[i][12] = new Long(""+dataDetailsShown[i][12]  );
          dataDetailsShown[i][13] = new Long(""+dataDetailsShown[i][13]  );
          dataDetailsShown[i][16] = new Double(""+dataDetailsShown[i][16]  );
          dataDetailsShown[i][17] = new Double(""+dataDetailsShown[i][17]  );
          dataDetailsShown[i][18] = new Double(""+dataDetailsShown[i][18]  );
          dataDetailsShown[i][19] = new Long(""+dataDetailsShown[i][19]  );
     }
     
     jTblGRNDetails.setModel(new javax.swing.table.DefaultTableModel(
            dataDetailsShown ,colAdd
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    } //end of grnDetailModel
      
    /** @ Method to Validate the entry in TextBox,where only integer to be entered */ 
    public long validEntry(javax.swing.JTextField jTxtField,long Qty,String nameOfField){
         if(jTxtField.getText().trim().equals("")){
              jTxtField.setText("0");
              jTxtField.requestFocus();
              jTxtField.selectAll();
              JOptionPane.showMessageDialog(this,"The"+ nameOfField +"Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    
         }
         else {
            try{
                Qty=Long.parseLong(jTxtField.getText());
                ValidEntry=true;
                if(Qty<0){
                    jTxtField.setText("0");
                    jTxtField.requestFocus();
                    jTxtField.selectAll();
                    ValidEntry=false;
                    JOptionPane.showMessageDialog(this,"The"+ nameOfField +"cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
                }               
            }
            catch(NumberFormatException e){
                 jTxtField.setText("0");                 
                 jTxtField.requestFocus();
                 jTxtField.selectAll();
                 ValidEntry=false;
                 JOptionPane.showMessageDialog(this,"Enter a valid number(Integer) in the"+ nameOfField +"field!","Error!",JOptionPane.ERROR_MESSAGE);    
            }
         }
         
         return Qty;
    }
    
    /** @ Method to Validate the entry in TextBox,where only Float value to be entered */ 
     public double validEntry(javax.swing.JTextField jTxtField,double Qty,String nameOfField){
         if(jTxtField.getText().trim().equals("")){
              jTxtField.setText("0");
              jTxtField.requestFocus();
              jTxtField.selectAll();
              JOptionPane.showMessageDialog(this,"The"+ nameOfField +"Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    
         }
         else {
            try{
                Qty=Double.parseDouble(jTxtField.getText());
                ValidEntry=true;
                System.out.println(jTxtField.getText());                
                if(Qty<0){
                    jTxtField.setText("0");
                    jTxtField.requestFocus();
                    jTxtField.selectAll();
                    ValidEntry=false;
                    JOptionPane.showMessageDialog(this,"The"+ nameOfField +"cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
                }               
            }
            catch(NumberFormatException e){
                 jTxtField.setText("0");
                 jTxtField.requestFocus();
                 jTxtField.selectAll();
                 ValidEntry=false;
                 JOptionPane.showMessageDialog(this,"Enter a valid number(Integer) in the"+ nameOfField +"field!","Error!",JOptionPane.ERROR_MESSAGE);    
            }
         }
         return Qty;
    }
     
     
     public long ItemTotal()
     {
         try{ 
            accessDB();
             if(jCboGRNItemName.getSelectedIndex()>0){
                ResultSet res =stat.executeQuery("select itemLooseperPack,itemPackperBulk from Item_M where itemName='"+(String)jCboGRNItemName.getSelectedItem()+"'");
                res.next();
                long itemLpP=Long.parseLong(res.getString(1));
                long itemPPB=Long.parseLong(res.getString(2));
                
                ItemTot=BulkQty*itemLpP*itemPPB + PackQty*itemLpP + LooseQty + FreeBQty*itemLpP*itemPPB + FreePQty*itemLpP + FreeLQty ;                                
             }     
            con.close();
           }
           catch(Exception ex){
               System.out.println("Error in Bulk Qty Focus Lost"+ex);
           }
         return ItemTot;
     }
    
    /** @ Method to Validate the entry to be numeric values in the TextBox */ 
    public void numberOnly(java.awt.event.KeyEvent num,javax.swing.JTextField jTxt,double jTxtValue){
         int KeyCode= num.getKeyCode();
         char KeyChar=num.getKeyChar();         
         String KeyEntered="";
         StringBuffer StoreString;
         
         if (KeyCode >= 48 && KeyCode <= 57 || KeyCode==46 ){
             // Key Code of Numbers  
            KeyEntered+=String.valueOf(KeyChar);
            KeyEntered=KeyEntered.trim();
         }
         else if (KeyCode >= 96 && KeyCode <= 105 || KeyCode==110){
             KeyEntered+=String.valueOf(KeyChar);
             KeyEntered=KeyEntered.trim();;//Side Pallete Numbers and Dot             
             jTxtValue=Float.parseFloat(KeyEntered);
             System.out.println(jTxtValue);
         }
         else if (KeyCode >= 37 && KeyCode <= 40){
             ;//up,down,right,left arrows    
         }
         else if (KeyCode >= 0 && KeyCode <= 32 || KeyCode==127){
             ;//Key code of non printable characters  
         }
         else{ 
            StoreString=new StringBuffer(KeyEntered);
            if (StoreString.length()>0){
            StoreString.setLength(StoreString.length()-1);
            }
              KeyEntered=StoreString.toString();
              JOptionPane.showMessageDialog(this,"Enter Only Numbers","Number Only",JOptionPane.ERROR_MESSAGE);
              jTxt.setText("0");
              jTxt.selectAll();
         }  
     }  
    
    /**
    * @param args the command line arguments
    */   
    /*public static void main(String args[]) {
         new GRN().show();        
    }*/


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jCboGRNToYYYY;
    private javax.swing.JLabel jLblGRNLooseSP;
    private javax.swing.JPanel jPnlGRNSearch;
    private javax.swing.JTextField jTxtGRNBulkCP;
    private javax.swing.JComboBox jCboGRNItemName;
    private javax.swing.JLabel jLblGRNTaxDetail;
    private javax.swing.JTextField jTxtGRNMisc;
    private javax.swing.JLabel jLblGRNFreeLQty;
    private javax.swing.JLabel jLblGRNCode;
    private javax.swing.JTextField jTxtGRNPackCP;
    private javax.swing.JComboBox jCboGRNStoreID;
    private javax.swing.JButton jBtnGRNSearchClose;
    private javax.swing.JComboBox jCboGRNFromYYYY;
    private javax.swing.JComboBox jCboGRNExDateYYYY;
    private javax.swing.JComboBox jCboGRNFromDD;
    private javax.swing.JPanel jPnlGRNAdd;
    private javax.swing.JLabel jLblGRNMisc;
    private javax.swing.JTable jTblGRNDetails;
    private javax.swing.JLabel jLblGRNLooseQty;
    private javax.swing.JLabel jLblGRNItemName;
    private javax.swing.JButton jBtnGRNModify;
    private javax.swing.JComboBox jCboGRNBillDateYYYY;
    private javax.swing.JPanel jPnlGRNAddItem;
    private javax.swing.JButton jBtnGRNAddItem;
    private javax.swing.JTextField jTxtGRNFreePQty;
    private javax.swing.JScrollPane jScrPaneGRNRemarks;
    private javax.swing.JLabel jLblGRNFreePQty;
    private javax.swing.JComboBox jCboGRNSupplierName;
    private javax.swing.JComboBox jCboGRNSupplier;
    private javax.swing.JComboBox jCboGRNBillDateMM;
    private javax.swing.JButton jBtnGRNRemoveItem;
    private javax.swing.JTextField jTxtGRNSearch;
    private javax.swing.JComboBox jCboGRNTaxDetail;
    private javax.swing.JComboBox jCboGRNExDateDD;
    private javax.swing.JLabel jLblGRNItemTot;
    private javax.swing.JTextField jTxtGRNCode;
    private javax.swing.JComboBox jCboGRNCurrency;
    private javax.swing.JTextField jTxtGRNFreeLQty;
    private javax.swing.JComboBox jCboGRNBillDateDD;
    private javax.swing.JComboBox jCboGRNToMM;
    private javax.swing.JLabel jLblGRNIBatchNo;
    private javax.swing.JScrollPane jScrPaneGRNItem;
    private javax.swing.JButton jBtnGRNSaveEdit;
    private javax.swing.JLabel jLblGRNDiscount;
    private javax.swing.JComboBox jCboGRNDateMM;
    private javax.swing.JLabel jLblGRNSupplier;
    private javax.swing.JButton jBtnGRNBack;
    private javax.swing.JComboBox jCboGRNDiscount;
    private javax.swing.JLabel jLblGRNPONO;
    private javax.swing.JButton jBtnGRNSearch;
    private javax.swing.JLabel jLblGRNFromDate;
    private javax.swing.JLabel jLblGRNExpiryDate;
    private javax.swing.JLabel jLblGRNFromDMY;
    private javax.swing.JComboBox jCboGRNExDateMM;
    private javax.swing.JTextField jTxtGRNDCNo;
    private javax.swing.JLabel jLblGRNBillDate;
    private javax.swing.JLabel jLblGRNToDate;
    private javax.swing.JTextField jTxtGRNBatchNo;
    private javax.swing.JComboBox jCboGRNTax;
    private javax.swing.JTextField jTxtGRNItemTot;
    private javax.swing.JLabel jLblGRNDiscountDetail;
    private javax.swing.JComboBox jCboGRNDiscountDetail;
    private javax.swing.JLabel jLblGRNFreeBQty;
    private javax.swing.JLabel jLblGRNTax;
    private javax.swing.JTextField jTxtGRNLooseQty;
    private javax.swing.JComboBox jCboGRNDateDD;
    private javax.swing.JLabel jLblGRNPONo;
    private javax.swing.JTextField jTxtGRNBulkQty;
    private javax.swing.JTextField jTxtGRNPackSP;
    private javax.swing.JLabel jLblGRNSlNo;
    private javax.swing.JComboBox jCboGRNSearch;
    private javax.swing.JLabel jLblGRNDMY;
    private javax.swing.JTextField jTxtGRNLooseSP;
    private javax.swing.JLabel jLblGRNPackQty;
    private javax.swing.JLabel jLblGRNCurrency;
    private javax.swing.JLabel jLblGRNBulkSP;
    private javax.swing.JLabel jLblGRNDate;
    private javax.swing.JComboBox jCboGRNPONO;
    private javax.swing.JLabel jLblGRNPackCP;
    private javax.swing.JButton jBtnGRNFinish;
    private javax.swing.JLabel jLblGRNAuthBy;
    private javax.swing.JPanel jPnlGRNDetails;
    private javax.swing.JLabel jLblGRNDCNo;
    private javax.swing.JScrollPane jSPaneGRN;
    private javax.swing.JLabel jLblGRNStoreID;
    private javax.swing.JLabel jLblGRNPackSP;
    private javax.swing.JTextField jTxtGRNBulkSP;
    private javax.swing.JButton jBtnGRNEditItem;
    private javax.swing.JComboBox jCboGRNFromMM;
    private javax.swing.JComboBox jCboGRNToDD;
    private javax.swing.JComboBox jCboGRNPONo;
    private javax.swing.JPanel jPnlGRNView;
    private javax.swing.JLabel jLblGRNBillNo;
    private javax.swing.JButton jBtnGRNSave;
    private javax.swing.JLabel jLblGRNSupplierName;
    private javax.swing.JComboBox jCboGRNAuthBy;
    private javax.swing.JTextField jTxtGRNBillNo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLblGRNBulkQty;
    private javax.swing.JTextArea jTxtAreaGRNRemarks;
    private javax.swing.JButton jBtnGRNExit;
    private javax.swing.JTextField jTxtGRNLooseCP;
    private javax.swing.JLabel jLblGRNRemarks;
    private javax.swing.JLabel jLblGRNMain;
    private javax.swing.JTextField jTxtGRNPackQty;
    private javax.swing.JTextField jTxtGRNSlNo;
    private javax.swing.JButton jBtnGRNAdd;
    private javax.swing.JLabel jLblGRNLooseCP;
    private javax.swing.JLabel jLblGRNBulkCP;
    private javax.swing.JList jListGRNSearch;
    private javax.swing.JComboBox jCboGRNDateYYYY;
    private javax.swing.JTable jTblGRNHeader;
    private javax.swing.JTextField jTxtGRNFreeBQty;
    private javax.swing.JButton jBtnGRNCancelView;
    // End of variables declaration//GEN-END:variables

    Connection con;
    Statement stat;
    String getError;
        StringBuffer sb;
        Vector list;
        java.util.Date curDate= new java.util.Date();        
        java.util.Date GRNDate=new java.util.Date();
        java.util.Date BillDate=new java.util.Date();  
        java.util.Date fromDate=new java.util.Date();
        java.util.Date toDate=new java.util.Date();
        java.util.Date ExpiryDate=new java.util.Date();
        boolean ModFlag=false , detailsAreValid=false , dateCheckRequired=false,headerIsValid=false;
        int rowTblDetails=0,i=0,j=0,h=0;
        String sorted[],unsorted[],key="",ItemNoDetail="";
        String colsShownH[] = {"GRN No","GRN Date","Supplier Name","Cancelled"};
        Object dataShown[][],dataSpecific[][],dataDateSpecific[][];
        String colAdd[] = {"Sl. No.","Item Name","Batch No","Expiry Date","Bulk CP","Pack CP","Loose CP","Currency","Bulk Qty.","Pack Qty.","Loose Qty.","Free B Qty.","Free P Qty.","Free L Qty.","Discount","Tax","Bulk SP","Pack SP","Loose SP","Item Tot"};
        Object dataDetailsShown[][];
        Object dataAdd[][]= new Object[50][20];
        boolean clickD=false,clickH=false,editPressed=false,AddItem=true,eleFound=false,ValidEntry=false;
        boolean pono=false,supplier = false,NoDetailError=false,NoHeaderError=false,NoSaveStoreError=false,RemoveItem=false;
        int selrow=0,selcol=0,selrowD=0,selcolD=0,valueBeforeModifyCount=0;
        int rowSpecific=0,rowDateSpecific=0,rowShown=0,initialRowsInDetTbl=0;
        long  ctr=0,ItemPackPerBulk=0,ItemLoosePerPack=0,LooseQty=0, PackQty=0,BulkQty=0,FreeBQty=0,FreePQty=0,FreeLQty=0,ItemTot=0;        
        double Misc=0,BulkCP=0,PackCP=0,LooseCP=0, BulkSP=0,PackSP=0,LooseSP=0;          
        Object valueBeforeModify[][];// using this Object in modifySaveStoreDB By getting the value to this object in fillGRNAddDetail
        
        LinkDB PurchaseOrderHead = new LinkDB("PurchaseOrderHead");
        LinkDB SupplierMaster = new LinkDB("SupplierMaster");
}

