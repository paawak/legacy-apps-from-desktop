/*
 * ItemGroup.java
 *
 * Created on 25 November 2002, 10:33
 */

package view.master;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.JOptionPane;
import java.awt.*;
import java.util.*;
import javax.swing.border.Border;

import usefulClasses.databaseOperations.LinkDB;
/**
 *
 * @author  Shanmugam
 */
public class ItemGroupMasterPanel extends javax.swing.JPanel {

    /** Creates new form ItemGroup */
    public ItemGroupMasterPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPnlIGView = new javax.swing.JPanel();
        jBtnIGExit = new javax.swing.JButton();
        jBtnIGModify = new javax.swing.JButton();
        jBtnIGInActivate = new javax.swing.JButton();
        jSPIGTable = new javax.swing.JScrollPane();
        jTblDisplay = new javax.swing.JTable();
        jBtnIGAdd = new javax.swing.JButton();
        jBtnIGSearch = new javax.swing.JButton();
        jBtnIGActivate = new javax.swing.JButton();
        jPnlIGViewOption = new javax.swing.JPanel();
        jRBtnIGComplete = new javax.swing.JRadioButton();
        jRBtnIGActive = new javax.swing.JRadioButton();
        jRBtnIGInActive = new javax.swing.JRadioButton();
        jPnlIGSearch = new javax.swing.JPanel();
        jCboIGSearch = new javax.swing.JComboBox();
        jTxtIGSearch = new javax.swing.JTextField();
        jSPIGSearch = new javax.swing.JScrollPane();
        jListIGSearch = new javax.swing.JList();
        jBtnIGSearchClose = new javax.swing.JButton();
        jLblMain = new javax.swing.JLabel();
        jPnlIGAdd = new javax.swing.JPanel();
        jTxtIGCode = new javax.swing.JTextField();
        jTxtIGName = new javax.swing.JTextField();
        jTxtIGRemarks = new javax.swing.JTextField();
        jLblIGCode = new javax.swing.JLabel();
        jLblIGName = new javax.swing.JLabel();
        jLblIGRemarks = new javax.swing.JLabel();
        jBtnIGSave = new javax.swing.JButton();
        jBtnIGCancel = new javax.swing.JButton();
        jBtnIGAddSearch = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPnlIGView.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlIGView.setForeground(new java.awt.Color(51, 51, 255));
        jPnlIGView.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPnlIGViewComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPnlIGViewComponentShown(evt);
            }
        });

        jBtnIGExit.setToolTipText(" ");
        jBtnIGExit.setMnemonic('x');
        jBtnIGExit.setText("Exit");
        jBtnIGExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIGExitActionPerformed(evt);
            }
        });

        jPnlIGView.add(jBtnIGExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 360, 100, -1));

        jBtnIGModify.setToolTipText(" ");
        jBtnIGModify.setMnemonic('m');
        jBtnIGModify.setText("Modify");
        jBtnIGModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIGModifyActionPerformed(evt);
            }
        });

        jPnlIGView.add(jBtnIGModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 360, 100, -1));

        jBtnIGInActivate.setToolTipText(" ");
        jBtnIGInActivate.setMnemonic('n');
        jBtnIGInActivate.setText("InActivate");
        jBtnIGInActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIGInActivateActionPerformed(evt);
            }
        });

        jPnlIGView.add(jBtnIGInActivate, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 360, 100, -1));

        jSPIGTable.setBackground(new java.awt.Color(153, 153, 255));
        jSPIGTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jSPIGTableComponentResized(evt);
            }
        });

        displayData("Item_G","itemGroupName");
        jTblDisplay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTblDisplayKeyPressed(evt);
            }
        });

        jTblDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblDisplayMouseClicked(evt);
            }
        });

        jSPIGTable.setViewportView(jTblDisplay);

        jPnlIGView.add(jSPIGTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 600, 290));

        jBtnIGAdd.setToolTipText(" ");
        jBtnIGAdd.setMnemonic('a');
        jBtnIGAdd.setText("Add");
        jBtnIGAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIGAddActionPerformed(evt);
            }
        });

        jPnlIGView.add(jBtnIGAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 100, -1));

        jBtnIGSearch.setToolTipText(" ");
        jBtnIGSearch.setMnemonic('s');
        jBtnIGSearch.setText("Search");
        jBtnIGSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIGSearchActionPerformed(evt);
            }
        });

        jPnlIGView.add(jBtnIGSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 360, 100, -1));

        jBtnIGActivate.setMnemonic('c');
        jBtnIGActivate.setText("Activate");
        jBtnIGActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIGActivateActionPerformed(evt);
            }
        });

        jPnlIGView.add(jBtnIGActivate, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 360, 100, -1));

        jPnlIGViewOption.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlIGViewOption.setBorder(new javax.swing.border.TitledBorder(null, "View Options", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14)));
        jRBtnIGComplete.setToolTipText(" ");
        jRBtnIGComplete.setMnemonic('l');
        jRBtnIGComplete.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnIGComplete.setText("All Data");
        buttonGroup1.add(jRBtnIGComplete);
        jRBtnIGComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnIGCompleteActionPerformed(evt);
            }
        });

        jPnlIGViewOption.add(jRBtnIGComplete, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        jRBtnIGActive.setToolTipText(" ");
        jRBtnIGActive.setMnemonic('t');
        jRBtnIGActive.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnIGActive.setText("Active Data");
        buttonGroup1.add(jRBtnIGActive);
        jRBtnIGActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnIGActiveActionPerformed(evt);
            }
        });

        jPnlIGViewOption.add(jRBtnIGActive, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        jRBtnIGInActive.setToolTipText(" ");
        jRBtnIGInActive.setMnemonic('i');
        jRBtnIGInActive.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnIGInActive.setText("In Active Data");
        buttonGroup1.add(jRBtnIGInActive);
        jRBtnIGInActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnIGInActiveActionPerformed(evt);
            }
        });

        jPnlIGViewOption.add(jRBtnIGInActive, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, -1, -1));

        jPnlIGView.add(jPnlIGViewOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 600, 60));

        jPnlIGSearch.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlIGSearch.setBorder(new javax.swing.border.TitledBorder(null, "Search", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 0, 14)));
        jPnlIGSearch.setVisible(false);
        jCboIGSearch.addItem("Group Code");
        jCboIGSearch.addItem("Group Name");
        jCboIGSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboIGSearchActionPerformed(evt);
            }
        });

        jCboIGSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jCboIGSearchKeyReleased(evt);
            }
        });

        jPnlIGSearch.add(jCboIGSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 20));

        jTxtIGSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtIGSearchKeyPressed(evt);
            }
        });

        jPnlIGSearch.add(jTxtIGSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 140, 20));

        jListIGSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListIGSearchKeyReleased(evt);
            }
        });

        jListIGSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListIGSearchMouseClicked(evt);
            }
        });

        jSPIGSearch.setViewportView(jListIGSearch);

        jPnlIGSearch.add(jSPIGSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 140, 270));

//        jBtnIGSearchClose.setIcon(new javax.swing.ImageIcon("C:\\Program Files\\Microsoft Visual Studio\\Common\\Graphics\\Bitmaps\\TlBr_W95\\BACK.BMP"));
        jBtnIGSearchClose.setToolTipText(" ");
        jBtnIGSearchClose.setMnemonic('e');
        jBtnIGSearchClose.setText("Search Close");
        jBtnIGSearchClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIGSearchCloseActionPerformed(evt);
            }
        });

        jPnlIGSearch.add(jBtnIGSearchClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 140, -1));

        jPnlIGView.add(jPnlIGSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 0, 160, 390));

        add(jPnlIGView, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 790, 410));

        jLblMain.setText("Item Group Master");
        jLblMain.setForeground(new java.awt.Color(0, 0, 153));
        jLblMain.setFont(new java.awt.Font("Trebuchet MS", 1, 24));
        add(jLblMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, -1, -1));

        jPnlIGAdd.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlIGAdd.setVisible(false);
        jTxtIGCode.setEditable(false);
        jTxtIGCode.setBackground(new java.awt.Color(204, 255, 255));
        jTxtIGCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtIGCodeActionPerformed(evt);
            }
        });

        jPnlIGAdd.add(jTxtIGCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 230, 20));

        jTxtIGName.setBackground(new java.awt.Color(204, 255, 255));
        jTxtIGName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtIGNameFocusGained(evt);
            }
        });

        jPnlIGAdd.add(jTxtIGName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 230, 20));

        jTxtIGRemarks.setBackground(new java.awt.Color(204, 255, 255));
        jPnlIGAdd.add(jTxtIGRemarks, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 230, 20));

        jLblIGCode.setText("Code");
        jLblIGCode.setForeground(new java.awt.Color(0, 51, 51));
        jPnlIGAdd.add(jLblIGCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, 20));

        jLblIGName.setText("Name");
        jLblIGName.setForeground(new java.awt.Color(0, 51, 51));
        jPnlIGAdd.add(jLblIGName, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, 20));

        jLblIGRemarks.setText("Remarks");
        jLblIGRemarks.setForeground(new java.awt.Color(0, 51, 51));
        jPnlIGAdd.add(jLblIGRemarks, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, -1, 20));

        jBtnIGSave.setToolTipText(" ");
        jBtnIGSave.setMnemonic('s');
        jBtnIGSave.setText("Save");
        jBtnIGSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIGSaveActionPerformed(evt);
            }
        });

        jPnlIGAdd.add(jBtnIGSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 100, -1));

        jBtnIGCancel.setToolTipText(" ");
        jBtnIGCancel.setMnemonic('c');
        jBtnIGCancel.setText("Cancel");
        jBtnIGCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIGCancelActionPerformed(evt);
            }
        });

        jPnlIGAdd.add(jBtnIGCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 200, 100, -1));

        jBtnIGAddSearch.setToolTipText(" ");
        jBtnIGAddSearch.setMnemonic('e');
        jBtnIGAddSearch.setText("Search");
        jBtnIGAddSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIGAddSearchActionPerformed(evt);
            }
        });

        jPnlIGAdd.add(jBtnIGAddSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 100, -1));

        add(jPnlIGAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 410, 400));

    }//GEN-END:initComponents

    private void jSPIGTableComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jSPIGTableComponentResized
        // Add your handling code here:
        h=jTblDisplay.getRowHeight()*(RowCount+1);
            if(h<290)
                jSPIGTable.setSize(600,h+5);
            else
                jSPIGTable.setSize(600,290);
    }//GEN-LAST:event_jSPIGTableComponentResized

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // Add your handling code here:
        displayData("Item_G","itemGroupName");
    }//GEN-LAST:event_formComponentShown

    private void jBtnIGAddSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIGAddSearchActionPerformed
        // Add your handling code here:
        jRBtnIGComplete.setSelected(true);
        jBtnIGActivate.setEnabled(true);        
        searchPressed();
    }//GEN-LAST:event_jBtnIGAddSearchActionPerformed

    private void jPnlIGViewComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlIGViewComponentResized
        // Add your handling code here:
        displayData("Item_G","itemGroupName");
    }//GEN-LAST:event_jPnlIGViewComponentResized

    private void jPnlIGViewComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlIGViewComponentShown
        // Add your handling code here:
         displayData("Item_G","itemGroupName");  
         if(RowCount>=1){  
             jTblDisplay.clearSelection(); 
             jCboIGSearch.setSelectedIndex(0);
             int index=searchElement(  (String)( jListIGSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
         }             
    }//GEN-LAST:event_jPnlIGViewComponentShown

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // Add your handling code here:
        if(evt.getKeyCode()==evt.VK_ALT)
          jBtnIGSearchClose.requestFocus();
    }//GEN-LAST:event_formKeyPressed

    private void jTblDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblDisplayMouseClicked
        // Add your handling code here:
        clickH=true;
        selrow=jTblDisplay.getSelectedRow();
    }//GEN-LAST:event_jTblDisplayMouseClicked

    private void jRBtnIGCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnIGCompleteActionPerformed
        // Add your handling code here:
         displayData("Item_G","itemGroupName");
        jBtnIGAdd.setEnabled(true);
        jBtnIGModify.setEnabled(true);
        jBtnIGSearch.setEnabled(true);
        jBtnIGActivate.setEnabled(true);
        jBtnIGInActivate.setEnabled(true);
    }//GEN-LAST:event_jRBtnIGCompleteActionPerformed

    private void jRBtnIGActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnIGActiveActionPerformed
        // Add your handling code here:
         displayData("Item_G","Active","Y","itemGroupName");
        jBtnIGAdd.setEnabled(true);
        jBtnIGModify.setEnabled(true);
        jBtnIGSearch.setEnabled(true);
        jBtnIGActivate.setEnabled(false);
        jBtnIGInActivate.setEnabled(true);  
    }//GEN-LAST:event_jRBtnIGActiveActionPerformed

    private void jRBtnIGInActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnIGInActiveActionPerformed
        // Add your handling code here:
         displayData("Item_G","Active","N","itemGroupName");
        jBtnIGAdd.setEnabled(false);
        jBtnIGModify.setEnabled(false);
        jBtnIGSearch.setEnabled(true);
        jBtnIGActivate.setEnabled(true);
        jBtnIGInActivate.setEnabled(false);
    }//GEN-LAST:event_jRBtnIGInActiveActionPerformed

    private void jTxtIGNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtIGNameFocusGained
        // Add your handling code here:
       
    }//GEN-LAST:event_jTxtIGNameFocusGained

    private void jCboIGSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCboIGSearchKeyReleased
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_UP||KeyCode==evt.VK_DOWN)
            jTxtIGSearch.requestFocus();
        else if(KeyCode==evt.VK_ENTER)
             jTxtIGSearch.requestFocus();         
       
        jTxtIGSearch.enable();
        jTxtIGSearch.requestFocus(); 
        key="";
        jTxtIGSearch.setText("");
       if (jRBtnIGInActive.isSelected()) 
           jBtnIGModify.setEnabled(false);
       else
           jBtnIGModify.setEnabled(true);
           
        search(jListIGSearch);
    }//GEN-LAST:event_jCboIGSearchKeyReleased

    private void jListIGSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListIGSearchKeyReleased
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_UP||KeyCode==evt.VK_DOWN){
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListIGSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             jTxtIGSearch.setText(""+ jListIGSearch.getSelectedValue());
             jTxtIGSearch.selectAll();
        }
        else if(KeyCode==evt.VK_ENTER){
           if (jRBtnIGInActive.isSelected()) 
               jBtnIGModify.setEnabled(false);
           else{
                int index=searchElement(  (String)( jListIGSearch.getSelectedValue() )  ,unsorted   );               
                selrow=index;                
                modify();             
           }
        }
       if (jRBtnIGInActive.isSelected()) 
           jBtnIGModify.setEnabled(false);
       else
           jBtnIGModify.setEnabled(true);
    }//GEN-LAST:event_jListIGSearchKeyReleased

    private void jTblDisplayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblDisplayKeyPressed
        // Add your handling code here:
        int KeyCode=evt.getKeyCode();
        if (KeyCode==evt.VK_TAB){
            if(jPnlIGSearch.isVisible())
                jCboIGSearch.requestFocus();
            else
                jBtnIGAdd.requestFocus();
        }
    }//GEN-LAST:event_jTblDisplayKeyPressed

    private void jTxtIGSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtIGSearchKeyPressed
        // Add your handling code here:
        char KeyChar=evt.getKeyChar();
        int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_BACK_SPACE||KeyCode==evt.VK_DELETE){
            sb=new StringBuffer(key);
            if (sb.length()>0){
            sb.setLength(sb.length()-1);
            }
            key=sb.toString();          
        }
        else if(KeyCode==evt.VK_ALT || KeyCode==evt.VK_CONTROL || KeyCode==evt.VK_SHIFT){ 
            ;
        } 
        else if(KeyCode==evt.VK_UP || KeyCode==evt.VK_DOWN){
           if (jRBtnIGInActive.isSelected()) 
              jBtnIGModify.setEnabled(false);
           else
               jBtnIGModify.setEnabled(false);
        }
        else if(KeyCode==evt.VK_TAB){ 
          jListIGSearch.requestFocus();
          jListIGSearch.setSelectedIndex(0);
        }
        else if(KeyCode==evt.VK_ENTER){ 
              if (jRBtnIGInActive.isSelected()){ 
                   jBtnIGModify.setEnabled(false);
                   jCboIGSearch.requestFocus();
               }
              else if(jTxtIGSearch.getText().equals(""))
                ;
              else{
                   int index=searchElement(  (String)( jListIGSearch.getSelectedValue() )  ,unsorted   );                                    
                   selrow=index;                   
                   modify();                 
              }   
        }
        else if(KeyCode>=33 && KeyCode<=126){
            key+=String.valueOf(KeyChar);
            key=key.trim();
        }
        else
           JOptionPane.showMessageDialog(this,"Enter Suitable value","Error",JOptionPane.INFORMATION_MESSAGE); 
        
        if (jRBtnIGInActive.isSelected()) 
           jBtnIGModify.setEnabled(false);
        else
           jBtnIGModify.setEnabled(true);
        
        search(jListIGSearch);        
    }//GEN-LAST:event_jTxtIGSearchKeyPressed

    private void jBtnIGActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIGActivateActionPerformed
        // Add your handling code here:
         if (jTblDisplay.getSelectedColumn()!= -1){ 
            activate("Y","Item_G","itemGroupName");
            jRBtnIGComplete.setSelected(true);
            jBtnIGAdd.setEnabled(true);
            jBtnIGModify.setEnabled(true);
            jBtnIGSearch.setEnabled(true);
            jBtnIGInActivate.setEnabled(true);
            jPnlIGSearch.setVisible(false);
            jRBtnIGComplete.setEnabled(true);
            jRBtnIGActive.setEnabled(true);
            jRBtnIGInActive.setEnabled(true);
       }
       else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_jBtnIGActivateActionPerformed

    private void jBtnIGSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIGSaveActionPerformed
        // Add your handling code here:
         accessDB();
         componentNull();
     if (getError.equals("NoError"))
     {      
        if (ModFlag==false) 
        {    
           int ansSave=JOptionPane.showConfirmDialog(this,"       Are u confirm to save","Save",JOptionPane.YES_NO_OPTION);
           if (ansSave==0){ 
                newSaveDB();
                clearText();
                jTblDisplay.requestFocus();
                if(NoNewSaveError)
                  updateCode("Item_G");
           }
           else{
                clearText();
                jTblDisplay.requestFocus();
           }
         }
         else 
         {
           int ansModify=JOptionPane.showConfirmDialog(this,"      Are u confirm to Modify","Save",JOptionPane.YES_NO_OPTION);
           if (ansModify==0){   
                 modifySaveDB();
                 clearText();
                 jTblDisplay.requestFocus();
           }
            else{
                 clearText();
                 jTblDisplay.requestFocus();
           }
         }
            jPnlIGView.setVisible(true);
            jPnlIGAdd.setVisible(false);           
            jPnlIGSearch.setVisible(false);
            
            if (jRBtnIGComplete.isSelected())
               displayData("Item_G","itemGroupName");
            else if (jRBtnIGActive.isSelected())
              displayData("Item_G","Active","Y","itemGroupName");
            
            jCboIGSearch.setSelectedIndex(0);
            jBtnIGModify.setEnabled(true);
            jBtnIGSearch.setEnabled(true);            
            jTblDisplay.requestFocus();
            jRBtnIGComplete.setEnabled(true);
            jRBtnIGActive.setEnabled(true);
            jRBtnIGInActive.setEnabled(true);
     }
     else
     {
        System.out.println("Error");
     }
    }//GEN-LAST:event_jBtnIGSaveActionPerformed

    private void jBtnIGExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIGExitActionPerformed
        // Add your handling code here:
 this.setVisible(false);
    }//GEN-LAST:event_jBtnIGExitActionPerformed

    private void jListIGSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListIGSearchMouseClicked
        // Add your handling code here:
         int keyCode=evt.getClickCount();
           if(keyCode==1){
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListIGSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             jTxtIGSearch.setText(""+jListIGSearch.getSelectedValue());
             jTxtIGSearch.selectAll();
           }
           else{
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListIGSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             selrow=jTblDisplay.getSelectedRow();             
             modify();            
           }        
    }//GEN-LAST:event_jListIGSearchMouseClicked

    private void jBtnIGCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIGCancelActionPerformed
        // Add your handling code here:
        if(RowCount>=1){
            jCboIGSearch.setSelectedIndex(0);
        }
        jPnlIGView.setVisible(true);        
        jPnlIGSearch.setVisible(false);
        jPnlIGAdd.setVisible(false);
        jTblDisplay.requestFocus();
        jBtnIGSearch.setEnabled(true);
        jBtnIGModify.setEnabled(true);
        jRBtnIGComplete.setEnabled(true);
        jRBtnIGActive.setEnabled(true);
        jRBtnIGInActive.setEnabled(true);
        jBtnIGActivate.setEnabled(true);
        jRBtnIGComplete.setSelected(true);
    }//GEN-LAST:event_jBtnIGCancelActionPerformed

    private void jBtnIGSearchCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIGSearchCloseActionPerformed
        // Add your handling code here:
        jPnlIGSearch.setVisible(false);
        jTblDisplay.requestFocus();
        jCboIGSearch.setSelectedIndex(0);
        jBtnIGSearch.setEnabled(true);
        jRBtnIGComplete.setEnabled(true);
        jRBtnIGActive.setEnabled(true);
        jRBtnIGInActive.setEnabled(true);
        if (jRBtnIGInActive.isSelected())
            jBtnIGModify.setEnabled(false);
        else
            jBtnIGModify.setEnabled(true);
    }//GEN-LAST:event_jBtnIGSearchCloseActionPerformed

    private void jBtnIGSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIGSearchActionPerformed
        // Add your handling code here:
       searchPressed();
    }//GEN-LAST:event_jBtnIGSearchActionPerformed

    private void jBtnIGAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIGAddActionPerformed
        // Add your handling code here:
        clearText();
        ModFlag=false;
        jPnlIGView.setVisible(false);
        jPnlIGAdd.setVisible(true);        
        jBtnIGAddSearch.setVisible(false);
        jTxtIGName.requestFocus(); 
        generateCode("Item_G",jTxtIGCode);
    }//GEN-LAST:event_jBtnIGAddActionPerformed

    private void jBtnIGInActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIGInActivateActionPerformed
        // Add your handling code here:
         if (jTblDisplay.getSelectedColumn()!=-1){  
        activate("N","Item_G","itemGroupName");  
        jRBtnIGComplete.setSelected(true);
        jBtnIGAdd.setEnabled(true);
        jBtnIGModify.setEnabled(true);
        jBtnIGSearch.setEnabled(true);
        jBtnIGInActivate.setEnabled(true);
        jPnlIGSearch.setVisible(false);
        jRBtnIGComplete.setEnabled(true);
        jRBtnIGActive.setEnabled(true);
        jRBtnIGInActive.setEnabled(true);
       }
       else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);
  
    }//GEN-LAST:event_jBtnIGInActivateActionPerformed

    private void jBtnIGModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIGModifyActionPerformed
        // Add your handling code here:
        if(jTblDisplay.getSelectedColumn()!=-1){
            modify();     
            jBtnIGAddSearch.setVisible(true);
        }        
       else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);
 
    }//GEN-LAST:event_jBtnIGModifyActionPerformed
    /** */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Add your handling code here:
            jPnlIGSearch.setVisible(false);
            jPnlIGAdd.setVisible(false);
            jPnlIGView.setVisible(true);
            jBtnIGAdd.requestFocus();
            jRBtnIGComplete.setSelected(true);
            
            try{
                accessDB();
                String ss = "SELECT * FROM SemaPhores WHERE TableName = 'Item_G'";
                ResultSet res = stat.executeQuery(ss);
                if(!res.next()){
                    String ss1="Insert into SemaPhores (TableName,CtrName,MaxCtr) values('Item_G','IG_',1)";
                   stat.executeUpdate(ss1);               
                }
                con.close();
           }
           catch(Exception ex){
               System.out.println("Error in form window opened "+ex);
           }
    }//GEN-LAST:event_formWindowOpened

    private void jTxtIGCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtIGCodeActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTxtIGCodeActionPerformed

    /**Action  to be performed on click jCboIGSearch */
    private void jCboIGSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboIGSearchActionPerformed
        // Add your handling code here:            
        jTxtIGSearch.enable();
        jTxtIGSearch.requestFocus();   
        key="";
            search(jListIGSearch);
            if(RowCount>=1){  
                 jTblDisplay.clearSelection();      
                 int index=searchElement(  (String)( jListIGSearch.getSelectedValue() )  ,unsorted   );
                 jTblDisplay.changeSelection( index ,0,true,false);
                 jTxtIGSearch.setText(""+jListIGSearch.getSelectedValue());
                 jTxtIGSearch.selectAll();
            }            
        if (jRBtnIGInActive.isSelected())
            jBtnIGModify.setEnabled(false);
        else
            jBtnIGModify.setEnabled(true);        
    }//GEN-LAST:event_jCboIGSearchActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        
    }//GEN-LAST:event_exitForm
  /** To display data from the Respective table on to the JTable */
    public void displayData(String TableName,String OrderBy){       
       try{
           accessDB();
           sel="Select * from "+TableName+" ORDER BY "+OrderBy ;
           ResultSet res=stat.executeQuery(sel);
           columnCount(res);
           rowCount(TableName);     
           tableData=new Object [RowCount][ColCount-1];
                   
          for(int row=1;res.next();row++)
          {
              for(int col=1;col<=ColCount-1;col++)
              {                  
                  tableData [row-1][col-1]=res.getString(col+1);
              }
          }      
           con.close();
      }
      catch(Exception ex){
           System.out.println("Error in displayData 1 "+ex);
       }
       getModel();
   }
    
    /** To display data from the Respective table on to the JTable with the Conditon Active or Not*/
    public void displayData(String TableName,String Condition,String Active,String OrderBy){
        try{
            accessDB();
           sel="Select * from "+TableName+" where "+Condition+"='"+Active+"' ORDER BY "+OrderBy ;
           ResultSet res=stat.executeQuery(sel);
           columnCount(res);
           rowCount(TableName,Condition,Active);     
           tableData=new Object [RowCount][ColCount-1];
                   
          for(int row=1;res.next();row++)
          {
              for(int col=1;col<=ColCount-1;col++)
              {                  
                  tableData [row-1][col-1]=res.getString(col+1);
              }
          }      
           con.close();
      }
      catch(Exception ex){
           System.out.println("Error in displayData 2 "+ex);
       }
      getModel();  
    }
   
   /** To record the count of the Column in the table */ 
   public void columnCount(ResultSet r){
       accessDB();
       
       try{
           ResultSetMetaData rMeta=r.getMetaData();
           ColCount=rMeta.getColumnCount();
       }
       catch(Exception ex){
           System.out.println("Error in columnCount "+ex);
       }
              
   }
   
   /** To record the count of the Row in the Jtable */
   public void rowCount(String TableName){
       try{
           sel="Select Count(*) from "+TableName;
           ResultSet res=stat.executeQuery(sel);
           RowCount=0;
           res.next();
               RowCount=Integer.parseInt(res.getString(1));           
       }
       catch(Exception ex)
       {
           System.out.println("Error in rowCount 1 "+ex);
       }
   }
   
   /** To record the count of the Row in the Jtable with conditon active or not*/
   public void rowCount(String TableName,String Condition,String Active){
       try{
            sel="Select Count(*) from "+TableName+" where "+Condition+"='"+Active+"'";
           ResultSet res=stat.executeQuery(sel);
           RowCount=0;           
           res.next();
               RowCount=Integer.parseInt(res.getString(1));
       }
       catch(Exception ex)
       {
           System.out.println("Error in rowCount 2 "+ex);
       }
   }
   
   /** Establishing the Connection to the Database */
    public void accessDB(){
       try
       { 
    	con=new LinkDB().getConnection();
        stat=con.createStatement();
       }
       catch(Exception ex)
       {
           System.out.println("Error in accessDB "+ex);
       }   
    }
    
    /** Save New record to the Database */
    public void newSaveDB(){
         try{
                String ins;
                ins="Insert into Item_G (itemGroupID,itemGroupName,remarks,Active)";
                ins+=" values('"+jTxtIGCode.getText()+"','"+jTxtIGName.getText()+"'";
                ins+=",'"+jTxtIGRemarks.getText()+"','Y')";
                stat.executeUpdate(ins);                
                NoNewSaveError=true;
                con.close();
            }
            catch(Exception ex)
            {
                NoNewSaveError=false;
                System.out.println("Error in newSaveDB "+ex);
            }   
    }
    
    /** Save Modified record to the Database */
    public void modifySaveDB(){
        try{
                
                String upd;
                upd="Update Item_G set itemGroupName='"+jTxtIGName.getText()+"',remarks='"+jTxtIGRemarks.getText()+"'";
                upd+=" where itemGroupID='"+jTxtIGCode.getText()+"'";
                stat.executeUpdate(upd);                
                con.close();
            }
            catch(Exception ex)
            {
                System.out.println("Error in modifySaveDB "+ex);
            }
    }
    
    /** To Automatic generate next code after click of Add Button */
     private void generateCode(String TableName,javax.swing.JTextField jTxtCode){
     try{
         accessDB();
         String ss = "SELECT * FROM SemaPhores WHERE TableName = '"+TableName+"'";
         ResultSet res = stat.executeQuery(ss);
         res.next();
         ctr = Integer.parseInt(res.getString(4));
         if(ctr < 10)
            jTxtCode.setText(res.getString(3)+"00"+ctr);  
         else if(ctr >= 10 && ctr < 100)
            jTxtCode.setText(res.getString(3)+"0"+ctr); 
         else if(ctr >= 100 && ctr < 1000)
            jTxtCode.setText(res.getString(3)+""+ctr);    
         con.close();
     }
     catch(Exception e){
         System.out.println("Error in generateCode"+e+"\n1043");
     }
   }
 
    /** To update the counter in the table SemaPhores after of Save Button*/  
   private void updateCode(String TableName){
      try{
          accessDB();
          ctr++;
          String ss1 = "UPDATE SemaPhores SET  MaxCtr = "+ctr+" WHERE TableName ='"+TableName+"'";
          stat.executeUpdate(ss1);          
          con.close();
      } 
      catch(Exception e){
         System.out.println("Error in updateCode"+e+"\n1057");
      }
    }
     
      /** To Initialize the tableModel called in displayData*/
     public void getModel(){
        jTblDisplay.setModel(new javax.swing.table.DefaultTableModel(tableData,new String [] {"Code","Name","Remarks","Activate"})
       {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        h=jTblDisplay.getRowHeight()*(RowCount+1);
            if(h<290)
                jSPIGTable.setSize(600,h+5);
            else
                jSPIGTable.setSize(600,290);
    }
    
    
     /** View TaxCode and TaxDesc of Table tblTaxMaster in ListBox jListIGSearch*/
    public void viewDB(int i){
        String sel;
        if (i==0)
          sel="Select itemGroupID from Item_G" ;
        else
          sel="Select itemGroupID from Item_G" ;
        
       try{
           ResultSet res=stat.executeQuery(sel);
           v.removeAllElements();
           
           while (res.next()){
              
               v.addElement(new String(res.getString(1)));
               jListIGSearch.setListData(v);
           }
           con.close();          
       }  
       catch(Exception ex){
           System.out.println(ex);
       }
        
    }
   
    /** set the Component fields to null*/
    public void clearText(){
        jTxtIGCode.setText(""); jTxtIGName.setText(""); jTxtIGRemarks.setText(""); 
    }    
    
    /** Checking each component for null entry in the form */
     public void componentNull(){
        
        if (jTxtIGCode.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Code field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtIGCode.requestFocus();
            
        }  
        else if (jTxtIGName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Description field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtIGName.requestFocus();
        }  
        else if (jTxtIGRemarks.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Percentage field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtIGRemarks.requestFocus();
        }  
        else{
        getError="NoError";
        }
    }
     
     /** To Activate Or Inactivate the particular row in the Table */
     public void activate(String Activate,String TableName,String OrderBy){
        accessDB();
        tableRow=jTblDisplay.getSelectedRow();                
            if (tableRow==-1)
                  tableRow=0;
                 
        try{
          stat.executeUpdate("Update "+TableName+" set Active='"+Activate+"' where itemGroupID='"+tableData [tableRow][0]+"'");
          con.close();
          displayData(TableName,OrderBy); 
        }
        catch(Exception ex)
        {
            System.out.println("Error in activate "+ex);
        }
     }

      /** sorts the Strings in alphabatic order and used in search method below */
      public void sortStrings(Object [][] rawData,int rows,int colNo,javax.swing.JList listSearch){
         list.removeAllElements();
         sorted=new String[rows];
         unsorted=new String[rows]; 
         
         for(j=0;j<rows;j++){
            unsorted[j]=((String)(rawData[j][colNo])).trim();
            sorted[j]=unsorted[j];  
         }
         
         for (j=0;j<rows;j++){
             for(i=j+1;i<rows;i++){
                 if (sorted[i].compareToIgnoreCase(sorted[j])<0){
                     String temp=sorted[j];
                     sorted[j]=sorted[i];
                     sorted[i]=temp;                     
                 }
             }
         }
         for(j=0;j<rows;j++){
             list.addElement(sorted[j]);
             listSearch.setListData(list);
         }
     }
     
     /** method supporting the search method below*/
     public void displaySearch(javax.swing.JList listSearch){
         for(i=0;i<sorted.length;i++){
             if (sorted[i].regionMatches(true,0,key,0,key.length())){
                 listSearch.setSelectedValue(sorted[i],true);
                 eleFound=true;
                 break;
             }
         }
         if(!eleFound)
             JOptionPane.showMessageDialog(this,"No match found","Sorry",JOptionPane.ERROR_MESSAGE);
         
         eleFound=false;
     }
     
      /** display the text in the jListSearch in the alphabatic order */
     public void search(javax.swing.JList listSearch){
      if(RowCount>=1){ 
        if (jRBtnIGComplete.isSelected()){
             displayData("Item_G","itemGroupName");
             list = new Vector(RowCount);
             if(jCboIGSearch.getSelectedItem().equals("Group Code"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);
             
             displaySearch(listSearch);
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListIGSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);

        }
        else if(jRBtnIGActive.isSelected()){           
            displayData("Item_G","Active","Y","itemGroupName");
             list = new Vector(RowCount);
             if(jCboIGSearch.getSelectedItem().equals("Group Code"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);
             
              displaySearch(listSearch);
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListIGSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
        }
        else if(jRBtnIGInActive.isSelected()){
            displayData("Item_G","Active","N","itemGroupName");
             list = new Vector(RowCount);
             if(jCboIGSearch.getSelectedItem().equals("Group Code"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);
             
             displaySearch(listSearch);
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListIGSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
        }
      }
     }
     
     /** To get the row Count of the Jtable on selection of an item in listSearch */
      private int searchElement(String key, String[] a) {
        int indx=-1;
        for(i=0;i<a.length;i++){
            if( key.equals(a[i]) )
                indx=i;
        }            
        return indx;
     }
      
      /** Changes to be performed on click of Search Button */
      private void searchPressed(){
       if(RowCount==0){
           JOptionPane.showMessageDialog(this,"Database is Empty, Add new Data","Search",JOptionPane.INFORMATION_MESSAGE);
       }      
       else{        
        jPnlIGSearch.setVisible(true);
        jPnlIGAdd.setVisible(false);
        jPnlIGView.setVisible(true);        
        jCboIGSearch.setSelectedIndex(0); 
        jListIGSearch.setSelectedIndex(0);
        jTblDisplay.clearSelection();
        int rowIndex=searchElement(  (String)( jListIGSearch.getSelectedValue() )  ,unsorted   );        
        jBtnIGModify.setEnabled(false);
        jBtnIGSearch.setEnabled(false);
        jTxtIGSearch.requestFocus();
        jTxtIGSearch.setText(""+jListIGSearch.getSelectedValue());
        jTxtIGSearch.selectAll();
        jTblDisplay.clearSelection();
        jTblDisplay.changeSelection( rowIndex ,0,true,false);       
        jRBtnIGComplete.setEnabled(false);
        jRBtnIGActive.setEnabled(false);
        jRBtnIGInActive.setEnabled(false);        
       }
     }
     
    
     /** action to be performed on click of modify */
     public void modify(){
         ModFlag=true;
         if (selrow==-1)
             selrow=0;
         
       if(jTblDisplay.getValueAt(selrow,3).equals("N"))
           JOptionPane.showMessageDialog(this,"Cannot Modify the InActivate Record","Information",JOptionPane.INFORMATION_MESSAGE);  
       else if (!jRBtnIGInActive.isSelected()){ 
            jBtnIGModify.setEnabled(false);
            jPnlIGAdd.setVisible(true); 
            jPnlIGView.setVisible(false);
            clearText();
            tableRow=jTblDisplay.getSelectedRow();

                if (tableRow==-1)
                      tableRow=0;

            jTxtIGCode.setText((String)(tableData [tableRow][0]));
            jTxtIGName.setText((String)(tableData [tableRow][1]));
            jTxtIGRemarks.setText((String)(tableData [tableRow][2]));
            jTxtIGName.requestFocus();
            jTxtIGName.selectAll();
       }
        else
           jBtnIGModify.setEnabled(false); 
     }   
    
    /**
    * @param args the command line arguments
    */
   /* public static void main(String args[]) {
        new ItemGroup().show();
    }//*/


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnIGActivate;
    private javax.swing.JTextField jTxtIGSearch;
    private javax.swing.JButton jBtnIGSearch;
    private javax.swing.JTextField jTxtIGRemarks;
    private javax.swing.JRadioButton jRBtnIGInActive;
    private javax.swing.JLabel jLblIGCode;
    private javax.swing.JTable jTblDisplay;
    private javax.swing.JPanel jPnlIGAdd;
    private javax.swing.JRadioButton jRBtnIGComplete;
    private javax.swing.JTextField jTxtIGCode;
    private javax.swing.JPanel jPnlIGView;
    private javax.swing.JButton jBtnIGModify;
    private javax.swing.JButton jBtnIGAddSearch;
    private javax.swing.JButton jBtnIGCancel;
    private javax.swing.JButton jBtnIGSave;
    private javax.swing.JScrollPane jSPIGTable;
    private javax.swing.JRadioButton jRBtnIGActive;
    private javax.swing.JButton jBtnIGAdd;
    private javax.swing.JLabel jLblIGName;
    private javax.swing.JButton jBtnIGInActivate;
    private javax.swing.JLabel jLblIGRemarks;
    private javax.swing.JComboBox jCboIGSearch;
    private javax.swing.JButton jBtnIGExit;
    private javax.swing.JPanel jPnlIGViewOption;
    private javax.swing.JTextField jTxtIGName;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPnlIGSearch;
    private javax.swing.JLabel jLblMain;
    private javax.swing.JScrollPane jSPIGSearch;
    private javax.swing.JButton jBtnIGSearchClose;
    private javax.swing.JList jListIGSearch;
    // End of variables declaration//GEN-END:variables
   
    Connection con;
    Statement stat;
    String getError="",key="",sel="",unsorted[],sorted[];    
    Vector v=new Vector();
    Object tableData[][];    
    Vector list;    
    boolean eleFound,codeRepeated=false,ModFlag=false,clickH=false,NoNewSaveError=false;
    int j=0,h=0,i=0,ColCount=0,RowCount=0,tableRow=0,ctr=0,selrow=0;    
    StringBuffer sb; 
}

