/*
 * ItemMaster.java
 *
 * Created on 28 October 2002, 11:53
 */

package view.master;
import java.sql.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.util.*;

import usefulClasses.databaseOperations.*;

/**
 *
 * @author  Shanmugam
 */
public class ItemMasterPanel extends javax.swing.JPanel {

    /** Creates new form ItemMaster */
    public ItemMasterPanel() {
        
        LinkDB itGrp = new LinkDB("Item_G");
        itGrp.checkEmpty();
        
        initComponents();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPnlView = new javax.swing.JPanel();
        jBtnModify = new javax.swing.JButton();
        jBtnActivate = new javax.swing.JButton();
        jBtnInActivate = new javax.swing.JButton();
        jBtnSearch = new javax.swing.JButton();
        jBtnExit = new javax.swing.JButton();
        jBtnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTblDisplay = new javax.swing.JTable();
        jPnlViewOption = new javax.swing.JPanel();
        jRBtnComplete = new javax.swing.JRadioButton();
        jRBtnActive = new javax.swing.JRadioButton();
        jRBtnInActive = new javax.swing.JRadioButton();
        jPnlSearch = new javax.swing.JPanel();
        jCboSearch = new javax.swing.JComboBox();
        jTxtSearch = new javax.swing.JTextField();
        jSPane = new javax.swing.JScrollPane();
        jListSearch = new javax.swing.JList();
        jBtnSearchClose = new javax.swing.JButton();
        jPnlAdd = new javax.swing.JPanel();
        jLblCode = new javax.swing.JLabel();
        jTxtCode = new javax.swing.JTextField();
        jLblName = new javax.swing.JLabel();
        jLblShortName = new javax.swing.JLabel();
        jTxtName = new javax.swing.JTextField();
        jTxtShortName = new javax.swing.JTextField();
        jCboGroupId = new javax.swing.JComboBox();
        jLblGroupId = new javax.swing.JLabel();
        jLblLoosePrice = new javax.swing.JLabel();
        jTxtLoosePrice = new javax.swing.JTextField();
        jLblPackPrice = new javax.swing.JLabel();
        jTxtPackPrice = new javax.swing.JTextField();
        jLblBulkPrice = new javax.swing.JLabel();
        jTxtBulkPrice = new javax.swing.JTextField();
        jLblLoosePerPack = new javax.swing.JLabel();
        jTxtLoosePerPack = new javax.swing.JTextField();
        jLblPackPerBulk = new javax.swing.JLabel();
        jTxtPackPerBulk = new javax.swing.JTextField();
        jBtnSave = new javax.swing.JButton();
        jBtnCancel = new javax.swing.JButton();
        jBtnAddSearch = new javax.swing.JButton();
        jLblMain = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPnlView.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlView.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPnlViewComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPnlViewComponentShown(evt);
            }
        });

        jBtnModify.setMnemonic('m');
        jBtnModify.setText("Modify");
        jBtnModify.setToolTipText(" ");
        jBtnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnModifyActionPerformed(evt);
            }
        });

        jPnlView.add(jBtnModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 360, 100, -1));

        jBtnActivate.setMnemonic('c');
        jBtnActivate.setText("Activate");
        jBtnActivate.setToolTipText(" ");
        jBtnActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnActivateActionPerformed(evt);
            }
        });

        jPnlView.add(jBtnActivate, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 360, 100, -1));

        jBtnInActivate.setMnemonic('n');
        jBtnInActivate.setText("InActivate");
        jBtnInActivate.setToolTipText(" ");
        jBtnInActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnInActivateActionPerformed(evt);
            }
        });

        jPnlView.add(jBtnInActivate, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 360, 100, -1));

        jBtnSearch.setMnemonic('s');
        jBtnSearch.setText("Search");
        jBtnSearch.setToolTipText(" ");
        jBtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSearchActionPerformed(evt);
            }
        });

        jPnlView.add(jBtnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 360, 100, -1));

        jBtnExit.setMnemonic('x');
        jBtnExit.setText("Exit");
        jBtnExit.setToolTipText(" ");
        jBtnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnExitActionPerformed(evt);
            }
        });

        jBtnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jBtnExitKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtnExitKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jBtnExitKeyReleased(evt);
            }
        });

        jPnlView.add(jBtnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 360, 100, -1));

        Connection con;
        Statement stat;
        jBtnAdd.setMnemonic('a');
        jBtnAdd.setText("Add");
        jBtnAdd.setToolTipText(" ");
        jBtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddActionPerformed(evt);
            }
        });

        jPnlView.add(jBtnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 100, -1));

        jScrollPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jScrollPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane1ComponentResized(evt);
            }
        });

        displayData("Item_M","itemName");
        jTblDisplay.setAlignmentX(1.0F);
        jTblDisplay.setAlignmentY(1.0F);
        jTblDisplay.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTblDisplay.setPreferredScrollableViewportSize(new java.awt.Dimension(400, 400));
        jTblDisplay.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jTblDisplay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTblDisplayKeyPressed(evt);
            }
        });

        jTblDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblDisplayMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTblDisplay);

        jPnlView.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 600, 290));

        jPnlViewOption.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlViewOption.setBorder(new javax.swing.border.TitledBorder(null, "View Options", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14)));
        jRBtnComplete.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnComplete.setMnemonic('l');
        jRBtnComplete.setText("All Data");
        jRBtnComplete.setToolTipText(" ");
        buttonGroup1.add(jRBtnComplete);
        jRBtnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnCompleteActionPerformed(evt);
            }
        });

        jPnlViewOption.add(jRBtnComplete, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        jRBtnActive.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnActive.setMnemonic('t');
        jRBtnActive.setText("Active Data");
        jRBtnActive.setToolTipText(" ");
        buttonGroup1.add(jRBtnActive);
        jRBtnActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnActiveActionPerformed(evt);
            }
        });

        jPnlViewOption.add(jRBtnActive, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        jRBtnInActive.setFont(new java.awt.Font("Dialog", 2, 12));
        jRBtnInActive.setMnemonic('i');
        jRBtnInActive.setText("In Active Data");
        jRBtnInActive.setToolTipText(" ");
        buttonGroup1.add(jRBtnInActive);
        jRBtnInActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBtnInActiveActionPerformed(evt);
            }
        });

        jPnlViewOption.add(jRBtnInActive, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, -1, -1));

        jPnlView.add(jPnlViewOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 600, 60));

        jPnlSearch.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlSearch.setBorder(new javax.swing.border.TitledBorder(null, "Search", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 0, 14)));
        jPnlSearch.setVisible(false);
        jCboSearch.addItem("Item No");
        jCboSearch.addItem("Item Name");
        jCboSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboSearchActionPerformed(evt);
            }
        });

        jCboSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jCboSearchKeyReleased(evt);
            }
        });

        jPnlSearch.add(jCboSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 20));

        jTxtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtSearchKeyReleased(evt);
            }
        });

        jPnlSearch.add(jTxtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 140, 20));

        jListSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListSearchKeyReleased(evt);
            }
        });

        jListSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListSearchMouseClicked(evt);
            }
        });

        jSPane.setViewportView(jListSearch);

        jPnlSearch.add(jSPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 140, 270));

        jBtnSearchClose.setIcon(new javax.swing.ImageIcon("C:\\Program Files\\Microsoft Visual Studio\\Common\\Graphics\\Bitmaps\\TlBr_W95\\BACK.BMP"));
        jBtnSearchClose.setMnemonic('e');
        jBtnSearchClose.setText("Search Close");
        jBtnSearchClose.setToolTipText(" ");
        jBtnSearchClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSearchCloseActionPerformed(evt);
            }
        });

        jPnlSearch.add(jBtnSearchClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 140, -1));

        jPnlView.add(jPnlSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 0, 160, 390));

        add(jPnlView, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 800, 410));

        jPnlAdd.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlAdd.setVisible(false);
        jLblCode.setForeground(new java.awt.Color(0, 51, 51));
        jLblCode.setText("Code");
        jPnlAdd.add(jLblCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 40, 20));

        jTxtCode.setBackground(new java.awt.Color(204, 255, 255));
        jTxtCode.setEditable(false);
        jTxtCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtCodeFocusLost(evt);
            }
        });

        jPnlAdd.add(jTxtCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 90, 20));

        jLblName.setForeground(new java.awt.Color(0, 51, 51));
        jLblName.setText("Name");
        jPnlAdd.add(jLblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 20));

        jLblShortName.setForeground(new java.awt.Color(0, 51, 51));
        jLblShortName.setText("Short Name");
        jPnlAdd.add(jLblShortName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, 20));

        jTxtName.setBackground(new java.awt.Color(204, 255, 255));
        jTxtName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtNameFocusLost(evt);
            }
        });

        jPnlAdd.add(jTxtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 260, 20));

        jTxtShortName.setBackground(new java.awt.Color(204, 255, 255));
        jTxtShortName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtShortNameFocusLost(evt);
            }
        });

        jPnlAdd.add(jTxtShortName, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 260, 20));

        jCboGroupId.addItem("01");
        jCboGroupId.addItem("02");
        jPnlAdd.add(jCboGroupId, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 20, 100, 20));

        jLblGroupId.setForeground(new java.awt.Color(0, 51, 51));
        jLblGroupId.setText("GroupID");
        jPnlAdd.add(jLblGroupId, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, -1, 20));

        jLblLoosePrice.setForeground(new java.awt.Color(0, 51, 51));
        jLblLoosePrice.setText("Loose Price");
        jPnlAdd.add(jLblLoosePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 70, 20));

        jTxtLoosePrice.setBackground(new java.awt.Color(204, 255, 255));
        jTxtLoosePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtLoosePriceKeyPressed(evt);
            }
        });

        jPnlAdd.add(jTxtLoosePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 260, 20));

        jLblPackPrice.setForeground(new java.awt.Color(0, 51, 51));
        jLblPackPrice.setText("Pack Price");
        jPnlAdd.add(jLblPackPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 70, 20));

        jTxtPackPrice.setBackground(new java.awt.Color(204, 255, 255));
        jTxtPackPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtPackPriceKeyPressed(evt);
            }
        });

        jPnlAdd.add(jTxtPackPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 260, 20));

        jLblBulkPrice.setForeground(new java.awt.Color(0, 51, 51));
        jLblBulkPrice.setText("Bulk Price");
        jPnlAdd.add(jLblBulkPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 70, 20));

        jTxtBulkPrice.setBackground(new java.awt.Color(204, 255, 255));
        jTxtBulkPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtBulkPriceKeyPressed(evt);
            }
        });

        jPnlAdd.add(jTxtBulkPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 260, 20));

        jLblLoosePerPack.setForeground(new java.awt.Color(0, 51, 51));
        jLblLoosePerPack.setText("Loose Per Pack");
        jPnlAdd.add(jLblLoosePerPack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 90, 20));

        jTxtLoosePerPack.setBackground(new java.awt.Color(204, 255, 255));
        jPnlAdd.add(jTxtLoosePerPack, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, 260, 20));

        jLblPackPerBulk.setForeground(new java.awt.Color(0, 51, 51));
        jLblPackPerBulk.setText("Pack Per Bulk");
        jPnlAdd.add(jLblPackPerBulk, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 90, 20));

        jTxtPackPerBulk.setBackground(new java.awt.Color(204, 255, 255));
        jPnlAdd.add(jTxtPackPerBulk, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, 260, 20));

        jBtnSave.setMnemonic('s');
        jBtnSave.setText("Save");
        jBtnSave.setToolTipText(" ");
        jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveActionPerformed(evt);
            }
        });

        jPnlAdd.add(jBtnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, 100, -1));

        jBtnCancel.setMnemonic('c');
        jBtnCancel.setText("Cancel");
        jBtnCancel.setToolTipText(" ");
        jBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelActionPerformed(evt);
            }
        });

        jPnlAdd.add(jBtnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 290, 100, -1));

        jBtnAddSearch.setMnemonic('e');
        jBtnAddSearch.setText("Search");
        jBtnAddSearch.setToolTipText(" ");
        jBtnAddSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddSearchActionPerformed(evt);
            }
        });

        jPnlAdd.add(jBtnAddSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 290, 100, -1));

        add(jPnlAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, 380, 390));

        jLblMain.setBackground(new java.awt.Color(205, 236, 255));
        jLblMain.setFont(new java.awt.Font("Trebuchet MS", 1, 24));
        jLblMain.setForeground(new java.awt.Color(0, 0, 153));
        jLblMain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLblMain.setText("Item Master");
        add(jLblMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

    }//GEN-END:initComponents

    private void jTxtShortNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtShortNameFocusLost
        // Add your handling code here:
         uniqueEntry("itemShortName","Item_M",jTxtShortName.getText(),jTxtShortName);
    }//GEN-LAST:event_jTxtShortNameFocusLost

    private void jTxtNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtNameFocusLost
        // Add your handling code here:
        uniqueEntry("itemName","Item_M",jTxtName.getText(),jTxtName);
    }//GEN-LAST:event_jTxtNameFocusLost

    private void jScrollPane1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane1ComponentResized
        // Add your handling code here:
            h=0;
            h=jTblDisplay.getRowHeight()*(RowCount+1);
            if(h<290)
                jScrollPane1.setSize(600,h+20);
            else
                jScrollPane1.setSize(600,290);
    }//GEN-LAST:event_jScrollPane1ComponentResized

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // Add your handling code here:
        displayData("Item_M","itemName");
    }//GEN-LAST:event_formComponentShown

    private void jPnlViewComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlViewComponentShown
        // Add your handling code here:
         displayData("Item_M","itemName");
         if(RowCount>=1){
             jTblDisplay.clearSelection(); 
             jCboSearch.setSelectedIndex(0);
             int index=searchElement(  (String)( jListSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
         }
    }//GEN-LAST:event_jPnlViewComponentShown

    private void jBtnAddSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddSearchActionPerformed
        // Add your handling code here:
        jRBtnComplete.setSelected(true);
        jBtnActivate.setEnabled(true);        
        searchPressed();
    }//GEN-LAST:event_jBtnAddSearchActionPerformed

    private void jPnlViewComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlViewComponentResized
        // Add your handling code here:
        displayData("Item_M","itemName");
    }//GEN-LAST:event_jPnlViewComponentResized

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // Add your handling code here:
        if(evt.getKeyCode()==evt.VK_ALT)
          jBtnSearchClose.requestFocus();
    }//GEN-LAST:event_formKeyPressed

    private void jTblDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblDisplayMouseClicked
        // Add your handling code here:
        clickH=true;
        selrow=jTblDisplay.getSelectedRow();
    }//GEN-LAST:event_jTblDisplayMouseClicked

    private void jRBtnInActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnInActiveActionPerformed
        // Add your handling code here:
        displayData("Item_M","Active","N","itemName");
        jBtnAdd.setEnabled(false);
        jBtnModify.setEnabled(false);
        jBtnSearch.setEnabled(true);
        jBtnActivate.setEnabled(true);
        jBtnInActivate.setEnabled(false);
    }//GEN-LAST:event_jRBtnInActiveActionPerformed

    private void jRBtnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnCompleteActionPerformed
        // Add your handling code here:
        displayData("Item_M","itemName");
        jBtnAdd.setEnabled(true);
        jBtnModify.setEnabled(true);
        jBtnSearch.setEnabled(true);
        jBtnActivate.setEnabled(true);
        jBtnInActivate.setEnabled(true);
        System.out.println(h);
    }//GEN-LAST:event_jRBtnCompleteActionPerformed

    private void jRBtnActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBtnActiveActionPerformed
        // Add your handling code here:
        displayData("Item_M","Active","Y","itemName");
        jBtnAdd.setEnabled(true);
        jBtnModify.setEnabled(true);
        jBtnSearch.setEnabled(true);
        jBtnActivate.setEnabled(false);
        jBtnInActivate.setEnabled(true);
        System.out.println(h);
    }//GEN-LAST:event_jRBtnActiveActionPerformed

    private void jTxtNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtNameFocusGained
        // Add your handling code here:
        
    }//GEN-LAST:event_jTxtNameFocusGained

    private void jTxtBulkPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtBulkPriceKeyPressed
        // Add your handling code here:
        numberOnly(evt,jTxtBulkPrice);
    }//GEN-LAST:event_jTxtBulkPriceKeyPressed

    private void jTxtPackPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtPackPriceKeyPressed
        // Add your handling code here:
        numberOnly(evt,jTxtPackPrice);
    }//GEN-LAST:event_jTxtPackPriceKeyPressed

    private void jTxtLoosePriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtLoosePriceKeyPressed
        // Add your handling code here:
        numberOnly(evt,jTxtLoosePrice);
    }//GEN-LAST:event_jTxtLoosePriceKeyPressed

    private void jCboSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCboSearchKeyReleased
        // Add your handling code here:
        int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_UP||KeyCode==evt.VK_DOWN)
            jTxtSearch.requestFocus();
        else if(KeyCode==evt.VK_ENTER)
             jTxtSearch.requestFocus();
        
        jTxtSearch.enable();
        jTxtSearch.requestFocus(); 
        key="";        
        if (jRBtnInActive.isSelected()) 
           jBtnModify.setEnabled(false);
        else
           jBtnModify.setEnabled(true);
        
        search(jListSearch);
    }//GEN-LAST:event_jCboSearchKeyReleased

    private void jListSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListSearchKeyReleased
        // Add your handling code here:     
        int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_UP||KeyCode==evt.VK_DOWN){
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             jTxtSearch.setText(""+ jListSearch.getSelectedValue());
             jTxtSearch.selectAll();
        }             
        else if(KeyCode==evt.VK_ENTER){
            if (jRBtnInActive.isSelected()) 
                jBtnModify.setEnabled(false);
           else{
                int index=searchElement(  (String)( jListSearch.getSelectedValue() )  ,unsorted   );               
                selrow=index;                
                modify();                
           }
        }
         
       if (jRBtnInActive.isSelected()) 
           jBtnModify.setEnabled(false);
       else
           jBtnModify.setEnabled(true);
    }//GEN-LAST:event_jListSearchKeyReleased

    private void jBtnExitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtnExitKeyTyped
        // Add your handling code here:
      
    }//GEN-LAST:event_jBtnExitKeyTyped

    private void jBtnExitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtnExitKeyReleased
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_ENTER){
             
        } 
    }//GEN-LAST:event_jBtnExitKeyReleased

    private void jBtnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtnExitKeyPressed
        // Add your handling code here:
        int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_ENTER);
                  
    }//GEN-LAST:event_jBtnExitKeyPressed

    private void jTblDisplayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblDisplayKeyPressed
        // Add your handling code here:
        int KeyCode=evt.getKeyCode();
        if (KeyCode==evt.VK_TAB){
            if(jPnlSearch.isVisible())
                jCboSearch.requestFocus();
            else
                jBtnAdd.requestFocus();
        }
    }//GEN-LAST:event_jTblDisplayKeyPressed

    private void jTxtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtSearchKeyPressed
        // Add your handling code here:
       char KeyChar=evt.getKeyChar();
        int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_BACK_SPACE||KeyCode==evt.VK_DELETE){
            sb=new StringBuffer(key);
            if (sb.length()>0){
            sb.setLength(sb.length()-1);
            }
            key=sb.toString();
        }
        else if(KeyCode==evt.VK_ALT || KeyCode==evt.VK_CONTROL || KeyCode==evt.VK_SHIFT){ 
            ;
        } 
        else if(KeyCode==evt.VK_UP || KeyCode==evt.VK_DOWN){
               if (jRBtnInActive.isSelected()) 
                  jBtnModify.setEnabled(false);
               else
                   jBtnModify.setEnabled(true);
        }
        else if(KeyCode==evt.VK_TAB){
              jListSearch.requestFocus();
              jListSearch.setSelectedIndex(0);
        }
        else if(KeyCode==evt.VK_ENTER){   
            if (jRBtnInActive.isSelected()){ 
                   jBtnModify.setEnabled(false);
                   jCboSearch.requestFocus();                
            }
            else if(jTxtSearch.getText().equals(""))
                ;
            else{
                 int index=searchElement(  (String)( jListSearch.getSelectedValue() )  ,unsorted   );                                    
                 selrow=index;                
                 modify();               
            }           
                
        }
        else if(KeyCode>=33 && KeyCode<=126){
            key+=String.valueOf(KeyChar);
            key=key.trim();
        }
        else
           JOptionPane.showMessageDialog(this,"Enter Suitable value","Error",JOptionPane.INFORMATION_MESSAGE); 
            
        if (jRBtnInActive.isSelected()) 
           jBtnModify.setEnabled(false);
        else
           jBtnModify.setEnabled(true);
            
        search(jListSearch);       
    }//GEN-LAST:event_jTxtSearchKeyPressed

    private void jTxtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtSearchKeyReleased
        // Add your handling code here:   
    }//GEN-LAST:event_jTxtSearchKeyReleased

    private void jBtnInActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnInActivateActionPerformed
        // Add your handling code here:       
       if (jTblDisplay.getSelectedColumn()!=-1){  
        activate("N","Item_M","itemName"); 
        jRBtnComplete.setSelected(true);
        jBtnAdd.setEnabled(true);
        jBtnModify.setEnabled(true);
        jBtnSearch.setEnabled(true);
        jBtnInActivate.setEnabled(true);
        jPnlSearch.setVisible(false);
        jRBtnComplete.setEnabled(true);
        jRBtnActive.setEnabled(true);
        jRBtnInActive.setEnabled(true);
       }
       else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jBtnInActivateActionPerformed

    private void jBtnActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnActivateActionPerformed
        // Add your handling code here:      
         if (jTblDisplay.getSelectedColumn()!= -1){ 
            activate("Y","Item_M","itemName");
            jRBtnComplete.setSelected(true);
            jBtnAdd.setEnabled(true);
            jBtnModify.setEnabled(true);
            jBtnSearch.setEnabled(true);
            jBtnInActivate.setEnabled(true);
            jPnlSearch.setVisible(false);
            jRBtnComplete.setEnabled(true);
            jRBtnActive.setEnabled(true);
            jRBtnInActive.setEnabled(true);
       }
       else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_jBtnActivateActionPerformed

    private void jTxtCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCodeFocusLost
        // Add your handling code here:
    }//GEN-LAST:event_jTxtCodeFocusLost

    private void jBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelActionPerformed
        // Add your handling code here:
        if(RowCount>=1){
            jCboSearch.setSelectedIndex(0);
        }
        jPnlView.setVisible(true);
        jPnlSearch.setVisible(false);
        jPnlAdd.setVisible(false);        
        jTblDisplay.requestFocus();
        jBtnModify.setEnabled(true);
        jBtnSearch.setEnabled(true);
        jRBtnComplete.setEnabled(true);
        jRBtnActive.setEnabled(true);
        jRBtnInActive.setEnabled(true);
        jBtnActivate.setEnabled(true);
        jRBtnComplete.setSelected(true);
    }//GEN-LAST:event_jBtnCancelActionPerformed

    /** on Click of Exit Button */
    private void jBtnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnExitActionPerformed
        // Add your handling code here:
 this.setVisible(false);
    }//GEN-LAST:event_jBtnExitActionPerformed

    /** on Click of the Particular item in the list */
    private void jListSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListSearchMouseClicked
        // Add your handling code here:      
        int keyCode=evt.getClickCount();
           if(keyCode==1){
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             jTxtSearch.setText(""+jListSearch.getSelectedValue());
             jTxtSearch.selectAll();
           }
           else{
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
             selrow=jTblDisplay.getSelectedRow();            
             modify();            
           }        
    }//GEN-LAST:event_jListSearchMouseClicked

    /** Search according to ItemNo or Name in the Search Combo Box */
    private void jCboSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboSearchActionPerformed
           // Add your handling code here:
     
        jTxtSearch.enable();
        jTxtSearch.requestFocus(); 
        key="";
             search(jListSearch);
             if(RowCount>=1){
                 jTblDisplay.clearSelection();      
                 int index=searchElement(  (String)( jListSearch.getSelectedValue() )  ,unsorted   );
                 jTblDisplay.changeSelection( index ,0,true,false);
                 jTxtSearch.setText(""+jListSearch.getSelectedValue());
                 jTxtSearch.selectAll();
             }
        if (jRBtnInActive.isSelected())
            jBtnModify.setEnabled(false);
        else
            jBtnModify.setEnabled(true); 
    }//GEN-LAST:event_jCboSearchActionPerformed
 
    
    /** Save Record to the database */
    private void jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveActionPerformed
        // Add your handling code here:
         accessDB();
         componentNull();
     if (getError.equals("NoError"))
     {      
        if (ModFlag==false) 
        { 
            int ansSave=JOptionPane.showConfirmDialog(this,"       Are u confirm to save","Save",JOptionPane.YES_NO_OPTION);
            if (ansSave==0){ 
               newSaveDB();
               if(NoNewSaveError)
                  updateCode("Item_M");
               clearText();
               jTblDisplay.requestFocus();
            }
            else{
             clearText();
             jTblDisplay.requestFocus();
            }
         }
         else 
         {
            int ansModify=JOptionPane.showConfirmDialog(this,"      Are u confirm to Modify","Save",JOptionPane.YES_NO_OPTION);
            if (ansModify==0){   
                 modifySaveDB();
                 clearText();
                 jTblDisplay.requestFocus();
            }
            else{
                 clearText();
                 jTblDisplay.requestFocus();
            }
         }
            jPnlView.setVisible(true);
            jPnlAdd.setVisible(false);           
            jPnlSearch.setVisible(false);
          
            if (jRBtnComplete.isSelected())
               displayData("Item_M","itemName");
            else if (jRBtnActive.isSelected())
              displayData("Item_M","Active","Y","itemName");
            else if (jRBtnActive.isSelected())
              displayData("Item_M","Active","N","itemName");
            
            jBtnModify.setEnabled(true);
            jCboSearch.setSelectedIndex(0);
            jBtnSearch.setEnabled(true);
            jTblDisplay.requestFocus();
            jRBtnComplete.setEnabled(true);
            jRBtnActive.setEnabled(true);
            jRBtnInActive.setEnabled(true);
     }
     else
     {
        System.out.println("Error");
     }
    }//GEN-LAST:event_jBtnSaveActionPerformed
  
    /** Action Performed on Click of New Button */
    private void jBtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddActionPerformed
        // Add your handling code here:
        ModFlag=false;
        clearText();           
        jPnlView.setVisible(false);
        jPnlAdd.setVisible(true);                
        comboAddItem("Item_G",jCboGroupId,"itemGroupID");
        jBtnAddSearch.setVisible(false);
        jTxtName.requestFocus(); 
        generateCode("Item_M",jTxtCode);  
    }//GEN-LAST:event_jBtnAddActionPerformed
  
    /** Action Performed on Click of View Close Button */
    private void jBtnSearchCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSearchCloseActionPerformed
        // Add your handling code here:
            jPnlSearch.setVisible(false);
            jTblDisplay.requestFocus();
            jCboSearch.setSelectedIndex(0);
            jBtnSearch.setEnabled(true);            
            jRBtnComplete.setEnabled(true);
            jRBtnActive.setEnabled(true);
            jRBtnInActive.setEnabled(true);
             if (jRBtnInActive.isSelected())
                 jBtnModify.setEnabled(false);
             else
                 jBtnModify.setEnabled(true);
    }//GEN-LAST:event_jBtnSearchCloseActionPerformed
   
    /** Action Performed on Click of View Button */
    private void jBtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSearchActionPerformed
        // Add your handling code here:
            searchPressed();
    }//GEN-LAST:event_jBtnSearchActionPerformed
   
    /** On Opening of the Form */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Add your handling code here:
         jPnlAdd.setVisible(false);
         jPnlSearch.setVisible(false);
         jPnlView.setVisible(true);
         jBtnAdd.requestFocus();
         jRBtnComplete.setSelected(true);       
         try{
                accessDB();
                String ss = "SELECT * FROM SemaPhores WHERE TableName = 'Item_M'";
                ResultSet res = stat.executeQuery(ss);
                if(!res.next()){
                    String ss1="Insert into SemaPhores (TableName,CtrName,MaxCtr) values('Item_M','IM_',1)";
                   stat.executeUpdate(ss1);               
                }
                con.close();
           }
           catch(Exception ex){
               System.out.println("Error in form window opened "+ex);
           }
    }//GEN-LAST:event_formWindowOpened
  
    /** Action performed on click of Modify Button */
    private void jBtnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnModifyActionPerformed
        // Add your handling code here:       
        if(jTblDisplay.getSelectedColumn()!=-1){
            modify();    
            jBtnAddSearch.setVisible(true);
        }
        else
           JOptionPane.showMessageDialog(this,"Select any row in the grid","Information",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jBtnModifyActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
         
    }//GEN-LAST:event_exitForm
    
    /** Disable all the Control or Components in the form */
    public void lockControl(){
       // jTxtCode.setEditable(false);jCboGroupId.setEditable(false);
        jTxtCode.disable(); jCboGroupId.disable(); jTxtName.disable(); jTxtShortName.disable();
        jTxtLoosePrice.disable(); jTxtBulkPrice.disable(); jTxtLoosePerPack.disable();
        jTxtPackPerBulk.disable(); jTxtPackPrice.disable();
        
    }
    
    /** Enables all the control or components in the form */    
    public void openLock(){
        //jTxtCode.setEditable(true);jCboGroupId.setEditable(true);
        jTxtCode.enable(); jCboGroupId.enable(); jTxtName.enable(); jTxtShortName.enable();
        jTxtLoosePrice.enable(); jTxtBulkPrice.enable(); jTxtLoosePerPack.enable();
        jTxtPackPerBulk.enable(); jTxtPackPrice.enable();
    }
    
    /** set the Component fields to null*/
    public void clearText(){
        jTxtCode.setText("") ; jCboGroupId.setSelectedItem(""); jTxtName.setText(""); 
        jTxtShortName.setText(""); jTxtLoosePrice.setText(""); jTxtBulkPrice.setText("");
        jTxtLoosePerPack.setText(""); jTxtPackPerBulk.setText("");jTxtPackPrice.setText("");
       // jTxtBatch.setText(""); jTxtExpiryDate.setText("");
    }    
    
    /** Establish the Connection to the database */
    public void accessDB(){
       try
       { 
    	   con=new LinkDB().getConnection();
        stat=con.createStatement();
       }
       catch(Exception ex)
       {
           System.out.println("Error in accessDB "+ex);
       }   
    }
    
    /** Save new record to the Database */
    public void newSaveDB(){
         try{
                String ins;
                ins="Insert into Item_M (itemNo,itemName,itemShortName,itemGroupID,itemLoosePrice,";
                ins+="itemPackPrice,itemBulkPrice,itemLooseperPack,itemPackperBulk,Active)";
                ins+=" values('"+jTxtCode.getText()+"','"+jTxtName.getText()+"'";
                ins+=",'"+jTxtShortName.getText()+"','"+jCboGroupId.getSelectedItem()+"'";
                ins+=","+jTxtLoosePrice.getText()+","+jTxtPackPrice.getText()+","+jTxtBulkPrice.getText();
                ins+=","+jTxtLoosePerPack.getText()+","+jTxtPackPerBulk.getText()+",'Y')";
                stat.executeUpdate(ins);
                NoNewSaveError=true;
                con.close();
            }
            catch(Exception ex)
            {
                NoNewSaveError=false;
                System.out.println("Error in newSaveDB "+ex);
            }   
    }
    
    /** Save Modified record to the Database */
    public void modifySaveDB(){
        try{
                String upd;
                System.out.println("modify");
                upd="Update Item_M set itemName='"+jTxtName.getText()+"',itemShortName='"+jTxtShortName.getText()+"'";
                upd+=",itemLoosePrice="+jTxtLoosePrice.getText()+",itemGroupID='"+jCboGroupId.getSelectedItem()+"'";
                upd+=",itemPackPrice="+jTxtPackPrice.getText()+",itemLooseperPack="+jTxtLoosePerPack.getText();
                upd+=",itemBulkPrice="+jTxtBulkPrice.getText()+",itemPackperBulk="+jTxtPackPerBulk.getText();
                upd+=" where itemNo='"+jTxtCode.getText()+"'";
                stat.executeUpdate(upd);                
                con.close();
            }
            catch(Exception ex)
            {
                System.out.println("Error in modifySaveDB "+ex);
            }
    }
    
    /** To Automatic generate next code after click of Add Button */
     private void generateCode(String TableName,javax.swing.JTextField jTxtCode){
     try{
         accessDB();
         String ss = "SELECT * FROM SemaPhores WHERE TableName = '"+TableName+"'";
         ResultSet res = stat.executeQuery(ss);
         res.next();
         ctr = Integer.parseInt(res.getString(4));
         if(ctr < 10)
            jTxtCode.setText(res.getString(3)+"00"+ctr);  
         else if(ctr >= 10 && ctr < 100)
            jTxtCode.setText(res.getString(3)+"0"+ctr); 
         else if(ctr >= 100 && ctr < 1000)
            jTxtCode.setText(res.getString(3)+""+ctr);    
         con.close();
     }
     catch(Exception e){
         System.out.println("Error in generateCode"+e+"\n1043");
     }
   }
 
   /** To update the counter in the table SemaPhores after of Save Button*/   
   private void updateCode(String TableName){
      try{
          accessDB();
          ctr++;
          String ss1 = "UPDATE SemaPhores SET  MaxCtr = "+ctr+" WHERE TableName ='"+TableName+"'";
          stat.executeUpdate(ss1);          
          con.close();
      } 
      catch(Exception e){
         System.out.println("Error in updateCode"+e+"\n1057");
      }
    }
     
     /** To Initialize the tableModel called in displayData*/
     public void getModel(){       
         for(int i=0;i<RowCount;i++){
          tableData[i][4] = new Double(""+tableData[i][4]  );
          tableData[i][5] = new Double(""+tableData[i][5]  );
          tableData[i][6] = new Double(""+tableData[i][6]  );
          tableData[i][7] = new Long(""+tableData[i][7]  );
          tableData[i][8] = new Long(""+tableData[i][8]  );         
         }
         jTblDisplay.setModel(new javax.swing.table.DefaultTableModel(tableData,tableCol)        
         {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Long.class, java.lang.Long.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        
        h=jTblDisplay.getRowHeight()*(RowCount+1);
            if(h<288)
                jScrollPane1.setSize(600,h+18);
            else
                jScrollPane1.setSize(600,290);
      
    }
    
    /** View from the Database */
    public void viewDB(int i){
        String sel;
        if (i==0)
          sel="Select itemNo from Item_M" ;
        else
          sel="Select itemName from Item_M" ;
        
       try{
           ResultSet res=stat.executeQuery(sel);
           v.removeAllElements();
           
           while (res.next()){
              
               v.addElement(new String(res.getString(1)));
               jListSearch.setListData(v);
           }
           con.close();          
       }  
       catch(Exception ex){
           System.out.println(ex);
       }
        
    }
    
     /** To record the count of the Column in the table */ 
   public void columnCount(ResultSet r){
       accessDB();
       
       try{
           ResultSetMetaData rMeta=r.getMetaData();
           ColCount=rMeta.getColumnCount();
       }
       catch(Exception ex){
           System.out.println("Error in columnCount "+ex);
       }
              
   }
   
   /** To record the count of the Row in the Jtable */
   public void rowCount(String TableName){
       try{
           sel="Select * from "+TableName;
           ResultSet res=stat.executeQuery(sel);
           RowCount=0;
           
          while (res.next())
               RowCount+=1;
       }
       catch(Exception ex)
       {
           System.out.println("Error in rowCount 1 "+ex);
       }
   }
   
   /** To record the count of the Row in the Jtable with conditon active or not*/
   public void rowCount(String TableName,String Condition,String Active){
       try{
            sel="Select Count(*) from "+TableName+" where "+Condition+"='"+Active+"'";
           ResultSet res=stat.executeQuery(sel);
           RowCount=0;           
           res.next();
               RowCount=Integer.parseInt(res.getString(1));
       }
       catch(Exception ex)
       {
           System.out.println("Error in rowCount 2 "+ex);
       }
   }
           
    /** To display data from the Respective table on to the JTable */
    public void displayData(String TableName,String OrderBy){       
       try{
           accessDB();
           sel="Select * from "+TableName+" ORDER BY "+OrderBy ;
           ResultSet res=stat.executeQuery(sel);
           columnCount(res);
           rowCount(TableName);     
           tableData=new Object [RowCount][ColCount-1];
                   
          for(int row=1;res.next();row++)
          {
              for(int col=1;col<=ColCount-1;col++)
              {                  
                  tableData [row-1][col-1]=res.getString(col+1);
              }
          }      
           con.close();
      }
      catch(Exception ex){
           System.out.println("Error in displayData 1 "+ex);
       }
      getModel();
   }
    
    /** To display data from the Respective table on to the JTable with the Conditon Active or Not*/
    public void displayData(String TableName,String Condition,String Active,String OrderBy){
        try{
            accessDB();
           sel="Select * from "+TableName+" where "+Condition+"='"+Active+"' ORDER BY "+OrderBy;
           ResultSet res=stat.executeQuery(sel);
           RowCount=0;
           columnCount(res);
           rowCount(TableName,Condition,Active);     
           tableData=new Object [RowCount][ColCount-1];
                   
          for(int row=1;res.next();row++)
          {
              for(int col=1;col<=ColCount-1;col++)
              {                  
                  tableData [row-1][col-1]=res.getString(col+1);
              }
          }      
           con.close();
      }
      catch(Exception ex){
           System.out.println("Error in displayData 2 "+ex);
       }
       getModel();  
    }
   
    /** Null Check Method */
    public void componentNull(){
        if (jTxtName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Name field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtName.requestFocus();
        }  
        else if (jTxtShortName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Short Name field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtShortName.requestFocus();
        }  
        else if (jTxtLoosePrice.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Loose Price field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtLoosePrice.requestFocus();
        }  
        else if (jTxtPackPrice.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Pack Price field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtPackPrice.requestFocus();
        }  
        else if (jTxtBulkPrice.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Bulk Price field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtBulkPrice.requestFocus();
        }  
        else if (jTxtLoosePerPack.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Loose Per Pack field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtLoosePerPack.requestFocus();
        }  
        else if (jTxtPackPerBulk.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Pack Per Bulk field should not be Null","Field Null",JOptionPane.INFORMATION_MESSAGE);
            getError="Error";
            jTxtPackPerBulk.requestFocus();
        }  
        else{
        getError="NoError";
        }
    }
    
     /** To Activate Or Inactivate the particular row in the Table */
     public void activate(String Activate,String TableName,String OrderBy){
        accessDB();
        tableRow=jTblDisplay.getSelectedRow();
                
            if (tableRow==-1)
                  tableRow=0;
                 
        try{
          stat.executeUpdate("Update "+TableName+" set Active='"+Activate+"' where itemNo='"+tableData [tableRow][0]+"'");
          con.close();
          displayData(TableName,OrderBy);
        }
        catch(Exception ex)
        {
            System.out.println("Error in activate "+ex);
        }
     }
     
     /** To get all Particular Column values from Table in ComboBox */
     public void comboAddItem(String TableName,javax.swing.JComboBox comboBox,String TableColumn){
         
         accessDB();
         try{
             ResultSet res=stat.executeQuery("Select "+TableColumn+" from "+TableName);
             comboBox.removeAllItems();
             while (res.next()){
                 comboBox.addItem(res.getString(1));
             }
         }
         catch(Exception ex){
             System.out.println("Error in comboAddItem "+ex);
         }
     }
     
     /** sorts the Strings in alphabatic order and used in search method below */
     public void sortStrings(Object [][] rawData,int rows,int colNo,javax.swing.JList listSearch){
         list.removeAllElements();
         sorted=new String[rows];
          unsorted=new String[rows]; 
         
         for(j=0;j<rows;j++){
            unsorted[j]=((String)(rawData[j][colNo])).trim();
            sorted[j]=unsorted[j];  
         }
         for (j=0;j<rows;j++){
             for(i=j+1;i<rows;i++){
                 if (sorted[i].compareToIgnoreCase(sorted[j])<0){
                     String temp=sorted[j];
                     sorted[j]=sorted[i];
                     sorted[i]=temp;                     
                 }
             }
         }
         for(j=0;j<rows;j++){
             list.addElement(sorted[j]);
             listSearch.setListData(list);
         }
     }
     
     /** method supporting the search method below*/
     public void displaySearch(javax.swing.JList listSearch){
         for(i=0;i<sorted.length;i++){
             if (sorted[i].regionMatches(true,0,key,0,key.length())){
                 listSearch.setSelectedValue(sorted[i],true);
                 eleFound=true;
                 break;
             }
         }
         if(!eleFound)
             JOptionPane.showMessageDialog(this,"No match found","Sorry",JOptionPane.ERROR_MESSAGE);
         
         eleFound=false;
     }
     
     /** display the text in the jListSearch in the alphabatic order */
     public void search(javax.swing.JList listSearch){
       if(RowCount>=1){   
         if (jRBtnComplete.isSelected()){
             displayData("Item_M","itemName");
             list = new Vector(RowCount);
             if(jCboSearch.getSelectedItem().equals("Item No"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);

             displaySearch(listSearch);
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
        }
        else if(jRBtnActive.isSelected()){
            displayData("Item_M","Active","Y","itemName");
             list = new Vector(RowCount);
             if(jCboSearch.getSelectedItem().equals("Item No"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);

             displaySearch(listSearch);
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
        }
        else if(jRBtnInActive.isSelected()){
            displayData("Item_M","Active","N","itemName");
             list = new Vector(RowCount);
             if(jCboSearch.getSelectedItem().equals("Item No"))
                 sortStrings(tableData,RowCount,0,listSearch);
             else
                 sortStrings(tableData,RowCount,1,listSearch);

             displaySearch(listSearch);
             jTblDisplay.clearSelection();      
             int index=searchElement(  (String)( jListSearch.getSelectedValue() )  ,unsorted   );
             jTblDisplay.changeSelection( index ,0,true,false);
        }
       }
     }
     
     /** To get the row Count of the Jtable on selection of an item in listSearch */
     private int searchElement(String key, String[] a) {
        int indx=-1;
        for(i=0;i<a.length;i++){
            if( key.equals(a[i]) )
                indx=i;
        }            
        return indx;
     }
      
      /** Changes to be performed on click of Search Button */
      private void searchPressed(){
       if(RowCount==0){
           JOptionPane.showMessageDialog(this,"Database is Empty, Add new Data","Search",JOptionPane.INFORMATION_MESSAGE);
       }      
       else{        
        jPnlSearch.setVisible(true);
        jPnlAdd.setVisible(false);
        jPnlView.setVisible(true);
        jCboSearch.setSelectedIndex(0); 
        jListSearch.setSelectedIndex(0);
        jTblDisplay.clearSelection();
        int rowIndex=searchElement(  (String)( jListSearch.getSelectedValue() )  ,unsorted   );        
        jBtnModify.setEnabled(false);
        jBtnSearch.setEnabled(false);
        jTxtSearch.requestFocus();
        jTxtSearch.setText(""+jListSearch.getSelectedValue());
        jTxtSearch.selectAll();
        jTblDisplay.clearSelection();
        jTblDisplay.changeSelection( rowIndex ,0,true,false);       
        jRBtnComplete.setEnabled(false);
        jRBtnActive.setEnabled(false);
        jRBtnInActive.setEnabled(false);        
       }
     }     
     
     /** action to be performed on click of modify */
     public void modify(){
         ModFlag=true;
        if (selrow==-1)
             selrow=0;
         
      if(jTblDisplay.getValueAt(selrow,9).equals("N"))
           JOptionPane.showMessageDialog(this,"Cannot Modify the InActivate Record","Information",JOptionPane.INFORMATION_MESSAGE);         
      else if (!jRBtnInActive.isSelected()){   
        jPnlAdd.setVisible(true);
        jPnlView.setVisible(false);       
              
        clearText();
        tableRow=jTblDisplay.getSelectedRow();
        comboAddItem("Item_G",jCboGroupId,"itemGroupID");
            if (tableRow==-1)
                  tableRow=0;
        
        jTxtCode.setText((String)(tableData [tableRow][0]));        
        jTxtName.setText((String)(tableData [tableRow][1]));
        jTxtShortName.setText((String)(tableData [tableRow][2]));
        jCboGroupId.setSelectedItem(String.valueOf(tableData [tableRow][3]));
        jTxtLoosePrice.setText(String.valueOf(tableData [tableRow][4]));
        jTxtPackPrice.setText(String.valueOf(tableData [tableRow][5]));
        jTxtBulkPrice.setText(String.valueOf(tableData [tableRow][6]));
        jTxtLoosePerPack.setText(String.valueOf(tableData [tableRow][7]));
        jTxtPackPerBulk.setText(String.valueOf(tableData [tableRow][8]));
        jTxtName.requestFocus();
        jTxtName.selectAll();     
      }
      else
          jBtnModify.setEnabled(false); 
     }
     
      /** Method allows to enter unique value in the text field*/    
      public void uniqueEntry(String findField,String Table,String inField,javax.swing.JTextField jTxtField){
        accessDB();
        try{         
             String select;
             select="Select "+findField+" from "+Table+" where "+findField+" IN ('"+inField+"')";
             ResultSet res=stat.executeQuery(select);
          if(!ModFlag){   
                if(res.next()){                             
                      jTxtField.requestFocus();
                      jTxtField.setText("");
                      con.close();        
                      JOptionPane.showMessageDialog(this,"Field Value already exists","UniqueEntry",JOptionPane.INFORMATION_MESSAGE);  
                }
          }
             con.close();
        }
        catch(Exception ex){
            System.out.println("Error in Unique Entry "+ex);
        }
    }     
     
     /** Allow numbers only to be entered in the TextField */
     public void numberOnly(java.awt.event.KeyEvent num,javax.swing.JTextField jTxt){
         int KeyCode= num.getKeyCode();
         char KeyChar=num.getKeyChar();
         String KeyEntered="";
         StringBuffer StoreString;
         if (KeyCode >= 48 && KeyCode <= 57 || KeyCode==46 ){
             // Key Code of Numbers  
            KeyEntered+=String.valueOf(KeyChar);
            KeyEntered=KeyEntered.trim();
         }
         else if (KeyCode >= 96 && KeyCode <= 105 || KeyCode==110){
             KeyEntered+=String.valueOf(KeyChar);
             KeyEntered=KeyEntered.trim();;//Side Pallete Numbers and Dot
         }
         else if (KeyCode >= 37 && KeyCode <= 40){
             ;//up,down,right,left arrows    
         }
         else if (KeyCode >= 0 && KeyCode <= 32 || KeyCode==127){
             ;//Key code of non printable characters  
         }
         else{
             //System.out.println(KeyCode);
              StoreString=new StringBuffer(KeyEntered);
            if (StoreString.length()>0){
            StoreString.setLength(StoreString.length()-1);
            }
              KeyEntered=StoreString.toString();
              JOptionPane.showMessageDialog(this,"Enter Only Numbers","Number Only",JOptionPane.ERROR_MESSAGE);
              jTxt.setText(KeyEntered);
         }  
     }  
    /**
    * @param args the command line arguments
    */
    /*public static void main(String args[]) {
        new ItemMaster().show();
        
    }//*/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTxtShortName;
    private javax.swing.JComboBox jCboSearch;
    private javax.swing.JPanel jPnlViewOption;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jBtnAddSearch;
    private javax.swing.JTextField jTxtSearch;
    private javax.swing.JTextField jTxtLoosePerPack;
    private javax.swing.JRadioButton jRBtnInActive;
    private javax.swing.JRadioButton jRBtnComplete;
    private javax.swing.JButton jBtnInActivate;
    private javax.swing.JTextField jTxtBulkPrice;
    private javax.swing.JLabel jLblGroupId;
    private javax.swing.JLabel jLblShortName;
    private javax.swing.JButton jBtnActivate;
    private javax.swing.JTextField jTxtLoosePrice;
    private javax.swing.JLabel jLblCode;
    private javax.swing.JButton jBtnCancel;
    private javax.swing.JButton jBtnExit;
    private javax.swing.JList jListSearch;
    private javax.swing.JTextField jTxtPackPerBulk;
    private javax.swing.JScrollPane jSPane;
    private javax.swing.JLabel jLblPackPrice;
    private javax.swing.JPanel jPnlSearch;
    private javax.swing.JButton jBtnAdd;
    private javax.swing.JTextField jTxtPackPrice;
    private javax.swing.JRadioButton jRBtnActive;
    private javax.swing.JLabel jLblMain;
    private javax.swing.JComboBox jCboGroupId;
    private javax.swing.JLabel jLblName;
    private javax.swing.JTable jTblDisplay;
    private javax.swing.JTextField jTxtCode;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jBtnSearch;
    private javax.swing.JButton jBtnSave;
    private javax.swing.JButton jBtnModify;
    private javax.swing.JLabel jLblBulkPrice;
    private javax.swing.JButton jBtnSearchClose;
    private javax.swing.JLabel jLblPackPerBulk;
    private javax.swing.JLabel jLblLoosePrice;
    private javax.swing.JPanel jPnlView;
    private javax.swing.JLabel jLblLoosePerPack;
    private javax.swing.JTextField jTxtName;
    private javax.swing.JPanel jPnlAdd;
    // End of variables declaration//GEN-END:variables
   
    Connection con;
    Statement stat;
    String getError="",key="",sel="",unsorted[],sorted[];    
    Vector v=new Vector();
    Object tableData[][];    
    Vector list;    
    boolean eleFound,codeRepeated=false,ModFlag=false,clickH=false,NoNewSaveError=false;
    int j=0,h=0,i=0,ColCount=0,RowCount=0,tableRow=0,ctr=0,selrow=0;    
    StringBuffer sb;   
    String tableCol[]=new String[]{"Code","Name","ShortName","GroupID","LoosePrice","PackPrice","BulkPrice","Loose/Pack","Pack/Bulk","Activate"};
  }

