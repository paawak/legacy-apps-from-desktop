/*
 * CO.java
 *
 * Created on 04 January 2003, 09:48
 */

package view.transaction;
import java.sql.*;
import java.lang.*;
import javax.swing.JOptionPane;

import usefulClasses.databaseOperations.LinkDB;

import java.util.*;
/**
 *
 * @author  Shanmugam
 */
public class COPanel extends javax.swing.JPanel {

    /** Creates new form CO */
    public COPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLblCOMain = new javax.swing.JLabel();
        jPnlCOView = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTblCOHeader = new javax.swing.JTable();
        jLblCOFromDate = new javax.swing.JLabel();
        jCboCOFromDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            jCboCOFromDD.addItem("0"+i);

            else
            jCboCOFromDD.addItem(""+i);
        }//end DDMM for loop

        jCboCOFromMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            jCboCOFromMM.addItem("0"+i);

            else
            jCboCOFromMM.addItem(""+i);

        }//end DDMM for loop

        jLblCOPONumber = new javax.swing.JLabel();
        jCboCOGroupH = new javax.swing.JComboBox();
        jCboCOGroupH.addItem("[All Items]");

        try{
            accessDB();
            String ss = "SELECT CO_Grp_Name FROM CO_Grp where Active='Y' ORDER BY CO_Grp_Name";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboCOGroupH.addItem(res.getString(1));
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboCOGroupH.setSelectedIndex(0 );

        jLblCOFromDMY = new javax.swing.JLabel();
        jCboCOFromYYYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        jCboCOFromYYYY.addItem(""+i);

        jLblCOToDate = new javax.swing.JLabel();
        jCboCOToDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            jCboCOToDD.addItem("0"+i);

            else
            jCboCOToDD.addItem(""+i);

        }//end DDMM for loop

        jCboCOToDD.setSelectedItem("31");

        jCboCOToMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            jCboCOToMM.addItem("0"+i);

            else
            jCboCOToMM.addItem(""+i);

        }//end DDMM for loop

        jCboCOToMM.setSelectedItem("12");

        jCboCOToYYYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        jCboCOToYYYY.addItem(""+i);

        jCboCOToYYYY.setSelectedItem("2100");
        jLblCOCustomer = new javax.swing.JLabel();
        jCboCOCustomer = new javax.swing.JComboBox();
        jCboCOCustomer.addItem("[All Items]");
        try{
            accessDB();
            String ss = "SELECT CustName FROM CustMaster where Active='Y' ORDER BY CustName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboCOCustomer.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboCOCustomer.setSelectedIndex(0 );

        jBtnCOAdd = new javax.swing.JButton();
        jBtnCOModify = new javax.swing.JButton();
        jBtnCOSearch = new javax.swing.JButton();
        jBtnCOCancelView = new javax.swing.JButton();
        jBtnCOExit = new javax.swing.JButton();
        jPnlCOSearch = new javax.swing.JPanel();
        jCboCOSearch = new javax.swing.JComboBox();
        jTxtCOSearch = new javax.swing.JTextField();
        jSPaneCO = new javax.swing.JScrollPane();
        jListCOSearch = new javax.swing.JList();
        jBtnCOSearchClose = new javax.swing.JButton();
        jPnlCOAdd = new javax.swing.JPanel();
        jLblCOCode = new javax.swing.JLabel();
        jTxtCOCode = new javax.swing.JTextField();
        jLblCODate = new javax.swing.JLabel();
        jTxtCOMisc = new javax.swing.JTextField();
        jLblCOCustomerName = new javax.swing.JLabel();
        jLblCODDate = new javax.swing.JLabel();
        jLblCOAcptDate = new javax.swing.JLabel();
        jLblCOAuthBy = new javax.swing.JLabel();
        jLblCOMisc = new javax.swing.JLabel();
        jLblCODiscount = new javax.swing.JLabel();
        jLblCOTax = new javax.swing.JLabel();
        jCboCOCustomerName = new javax.swing.JComboBox();
        jCboCOCustomerName.addItem("Select one");

        try{
            accessDB();
            String ss = "SELECT CustName FROM  CustMaster where Active='Y' ORDER BY CustName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboCOCustomerName.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboCOAuthBy = new javax.swing.JComboBox();
        jCboCOAuthBy.addItem("Select one");

        try{
            accessDB();
            String ss = "SELECT EmpName FROM EmployeeMaster  where Active='Y' ORDER BY EmpName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboCOAuthBy.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboCODateDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            jCboCODateDD.addItem("0"+i);

            else
            jCboCODateDD.addItem(""+i);

        }//end DDMM for loop

        jCboCODateMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            jCboCODateMM.addItem("0"+i);

            else
            jCboCODateMM.addItem(""+i);

        }//end DDMM for loop

        jCboCODateYYYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        jCboCODateYYYY.addItem(""+i);

        jCboCODDateDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            jCboCODDateDD.addItem("0"+i);

            else
            jCboCODDateDD.addItem(""+i);

        }//end DDMM for loop

        jCboCODDateMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            jCboCODDateMM.addItem("0"+i);

            else
            jCboCODDateMM.addItem(""+i);

        }//end DDMM for loop

        jCboCODDateYYYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        jCboCODDateYYYY.addItem(""+i);

        jLblCODMY = new javax.swing.JLabel();
        jScrPaneCOTerms = new javax.swing.JScrollPane();
        jTxtAreaCOTerms = new javax.swing.JTextArea();
        jCboCOTax = new javax.swing.JComboBox();
        jCboCODiscount = new javax.swing.JComboBox();
        jPnlGRNDetails = new javax.swing.JPanel();
        jScrPaneGRNItem = new javax.swing.JScrollPane();
        jPnlGRNAddItem = new javax.swing.JPanel();
        jLblCOSlNo = new javax.swing.JLabel();
        jLblCOItemName = new javax.swing.JLabel();
        jLblCOBulkQty = new javax.swing.JLabel();
        jLblCOPackQty = new javax.swing.JLabel();
        jLblCODiscountDetail = new javax.swing.JLabel();
        jLbCOTaxDetail = new javax.swing.JLabel();
        jLblCOLooseSP = new javax.swing.JLabel();
        jTxtCOSlNo = new javax.swing.JTextField();
        jTxtCOBulkQty = new javax.swing.JTextField();
        jTxtCOPackQty = new javax.swing.JTextField();
        jTxtCOLooseSP = new javax.swing.JTextField();
        jTblCODetails = new javax.swing.JTable();
        jCboCOItemName = new javax.swing.JComboBox();
        jLblCOLooseQty = new javax.swing.JLabel();
        jTxtCOLooseQty = new javax.swing.JTextField();
        jLblCOBulkSP = new javax.swing.JLabel();
        jTxtCOBulkSP = new javax.swing.JTextField();
        jLblCOPackSP = new javax.swing.JLabel();
        jTxtCOPackSP = new javax.swing.JTextField();
        jLblCONetPrice = new javax.swing.JLabel();
        jTxtCONetPrice = new javax.swing.JTextField();
        jCboCODiscountDetail = new javax.swing.JComboBox();
        jCboCODiscountDetail.addItem("0%");

        try{
            accessDB();
            String ss = "SELECT DM_Name,DM_Value FROM DiscountMaster where Active='Y' ORDER BY DM_Name";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboCODiscountDetail.addItem(res.getString(1)+"-"+res.getString(2)+"%");
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboCOTaxDetail = new javax.swing.JComboBox();
        jCboCOTaxDetail.addItem("0%");

        try{
            accessDB();
            String ss = "SELECT TaxDesc,Percentage FROM TaxMaster where Active='Y' ORDER BY TaxDesc";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboCOTaxDetail.addItem(res.getString(1)+"-"+res.getString(2)+"%");
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jLblCODiscAmtDetail = new javax.swing.JLabel();
        jTxtCODiscAmtDetail = new javax.swing.JTextField();
        jLblCOTaxAmtDetail = new javax.swing.JLabel();
        jTxtCOTaxAmtDetail = new javax.swing.JTextField();
        jBtnCOFinish = new javax.swing.JButton();
        jBtnCOEditItem = new javax.swing.JButton();
        jBtnCORemoveItem = new javax.swing.JButton();
        jBtnCOAddItem = new javax.swing.JButton();
        jBtnCOSaveEdit = new javax.swing.JButton();
        jBtnCOSave = new javax.swing.JButton();
        jBtnCOBack = new javax.swing.JButton();
        jLblGRNTerms = new javax.swing.JLabel();
        jLblCOPONo = new javax.swing.JLabel();
        jLblPODate = new javax.swing.JLabel();
        jCboCOADateDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            jCboCOADateDD.addItem("0"+i);

            else
            jCboCOADateDD.addItem(""+i);

        }//end DDMM for loop

        jCboCOADateYYYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        jCboCOADateYYYY.addItem(""+i);

        jCboCOADateMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            jCboCOADateMM.addItem("0"+i);

            else
            jCboCOADateMM.addItem(""+i);

        }//end DDMM for loop

        jLblCOGrandTot = new javax.swing.JLabel();
        jLblCODiscAmt = new javax.swing.JLabel();
        jLblCOTaxAmt = new javax.swing.JLabel();
        jLblCONetTot = new javax.swing.JLabel();
        jTxtCOGrandTot = new javax.swing.JTextField();
        jTxtCODiscAmt = new javax.swing.JTextField();
        jTxtCOTaxAmt = new javax.swing.JTextField();
        jTxtCONetTot = new javax.swing.JTextField();
        jLblCOGroup = new javax.swing.JLabel();
        jCboCOGroup = new javax.swing.JComboBox();
        jCboCOGroup.addItem("Select one");

        try{
            accessDB();
            String ss = "SELECT CO_Grp_Name FROM CO_Grp where Active='Y' ORDER BY CO_Grp_Name";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboCOGroup.addItem(res.getString(1));
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jTxtCOPONo = new javax.swing.JTextField();
        jCboCOPDateDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            jCboCOPDateDD.addItem("0"+i);

            else
            jCboCOPDateDD.addItem(""+i);

        }//end DDMM for loop

        jCboCOPDateMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            jCboCOPDateMM.addItem("0"+i);

            else
            jCboCOPDateMM.addItem(""+i);

        }//end DDMM for loop

        jCboCOPDateYYYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        jCboCOPDateYYYY.addItem(""+i);

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLblCOMain.setFont(new java.awt.Font("Dialog", 1, 24));
        jLblCOMain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLblCOMain.setText("Customer Order");
        add(jLblCOMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 300, -1));

        jPnlCOView.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlCOView.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPnlCOViewComponentShown(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(204, 255, 255));
        jScrollPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane1ComponentResized(evt);
            }
        });

        jTblCOHeader.setToolTipText("alt + t");
        jTblCOHeader.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        displayData();
        jTblCOHeader.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTblCOHeaderKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTblCOHeaderKeyReleased(evt);
            }
        });

        jTblCOHeader.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblCOHeaderMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTblCOHeader);

        jPnlCOView.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 580, 320));

        jLblCOFromDate.setBackground(new java.awt.Color(255, 255, 102));
        jLblCOFromDate.setText("From Date");
        jPnlCOView.add(jLblCOFromDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, 20));

        jCboCOFromDD.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOFromDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOFromDDActionPerformed(evt);
            }
        });

        jPnlCOView.add(jCboCOFromDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 50, 20));

        jCboCOFromMM.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOFromMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOFromMMActionPerformed(evt);
            }
        });

        jPnlCOView.add(jCboCOFromMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 50, 20));

        jLblCOPONumber.setText("CO Group");
        jPnlCOView.add(jLblCOPONumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, -1, 20));

        jCboCOGroupH.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOGroupH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOGroupHActionPerformed(evt);
            }
        });

        jPnlCOView.add(jCboCOGroupH, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 30, 220, 20));

        jLblCOFromDMY.setFont(new java.awt.Font("Dialog", 1, 10));
        jLblCOFromDMY.setText("  DD          /  MM        /  YYYY");
        jPnlCOView.add(jLblCOFromDMY, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 170, 30));

        jCboCOFromYYYY.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOFromYYYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOFromYYYYActionPerformed(evt);
            }
        });

        jPnlCOView.add(jCboCOFromYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 70, 20));

        jLblCOToDate.setBackground(new java.awt.Color(255, 255, 102));
        jLblCOToDate.setText("To Date");
        jPnlCOView.add(jLblCOToDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 20));

        jCboCOToDD.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOToDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOToDDActionPerformed(evt);
            }
        });

        jPnlCOView.add(jCboCOToDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 50, 20));

        jCboCOToMM.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOToMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOToMMActionPerformed(evt);
            }
        });

        jPnlCOView.add(jCboCOToMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 50, 20));

        jCboCOToYYYY.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOToYYYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOToYYYYActionPerformed(evt);
            }
        });

        jPnlCOView.add(jCboCOToYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, 70, 20));

        jLblCOCustomer.setText("Customer");
        jPnlCOView.add(jLblCOCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, -1, 20));

        jCboCOCustomer.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOCustomerActionPerformed(evt);
            }
        });

        jPnlCOView.add(jCboCOCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 60, 220, 20));

        jBtnCOAdd.setMnemonic('A');
        jBtnCOAdd.setText("Add");
        jBtnCOAdd.setToolTipText(" ");
        jBtnCOAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOAddActionPerformed(evt);
            }
        });

        jPnlCOView.add(jBtnCOAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 420, 100, -1));

        jBtnCOModify.setMnemonic('M');
        jBtnCOModify.setText("Modify");
        jBtnCOModify.setToolTipText(" ");
        jBtnCOModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOModifyActionPerformed(evt);
            }
        });

        jPnlCOView.add(jBtnCOModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 420, 100, -1));

        jBtnCOSearch.setMnemonic('s');
        jBtnCOSearch.setText("Search");
        jBtnCOSearch.setToolTipText(" ");
        jBtnCOSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOSearchActionPerformed(evt);
            }
        });

        jPnlCOView.add(jBtnCOSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 420, 100, -1));

        jBtnCOCancelView.setMnemonic('C');
        jBtnCOCancelView.setText("Cancel");
        jBtnCOCancelView.setToolTipText(" ");
        jBtnCOCancelView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOCancelViewActionPerformed(evt);
            }
        });

        jPnlCOView.add(jBtnCOCancelView, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 420, 100, -1));

        jBtnCOExit.setMnemonic('x');
        jBtnCOExit.setText("Exit");
        jBtnCOExit.setToolTipText(" ");
        jBtnCOExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOExitActionPerformed(evt);
            }
        });

        jPnlCOView.add(jBtnCOExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 420, 100, -1));

        jPnlCOSearch.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlCOSearch.setBorder(new javax.swing.border.TitledBorder(null, "Search", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 0, 14)));
        jPnlCOSearch.setVisible(false);
        jCboCOSearch.addItem("CO No");
        jCboCOSearch.addItem("CO Date");
        jCboCOSearch.addItem("Customer Name");
        jCboCOSearch.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOSearchActionPerformed(evt);
            }
        });

        jPnlCOSearch.add(jCboCOSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 150, 20));

        jTxtCOSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtCOSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtCOSearchKeyReleased(evt);
            }
        });

        jPnlCOSearch.add(jTxtCOSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 150, 20));

        jListCOSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListCOSearchKeyReleased(evt);
            }
        });

        jListCOSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListCOSearchMouseClicked(evt);
            }
        });

        jSPaneCO.setViewportView(jListCOSearch);

        jPnlCOSearch.add(jSPaneCO, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 150, 300));

//        jBtnCOSearchClose.setIcon(new javax.swing.ImageIcon("C:\\Program Files\\Microsoft Visual Studio\\Common\\Graphics\\Bitmaps\\TlBr_W95\\BACK.BMP"));
        jBtnCOSearchClose.setMnemonic('e');
        jBtnCOSearchClose.setText("Search Cancel");
        jBtnCOSearchClose.setToolTipText(" ");
        jBtnCOSearchClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOSearchCloseActionPerformed(evt);
            }
        });

        jPnlCOSearch.add(jBtnCOSearchClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 150, -1));

        jPnlCOView.add(jPnlCOSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, 170, 430));

        add(jPnlCOView, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 820, 550));

        jPnlCOAdd.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlCOAdd.setVisible(false);
        jPnlCOAdd.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jPnlCOAddComponentHidden(evt);
            }
        });

        jLblCOCode.setText("CO NO");
        jPnlCOAdd.add(jLblCOCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 50, 20));

        jTxtCOCode.setEditable(false);
        jTxtCOCode.setEnabled(false);
        jPnlCOAdd.add(jTxtCOCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 170, 20));

        jLblCODate.setText("CO Date");
        jPnlCOAdd.add(jLblCODate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 60, 20));

        jTxtCOMisc.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtCOMisc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtCOMiscFocusLost(evt);
            }
        });

        jPnlCOAdd.add(jTxtCOMisc, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 420, 150, 20));

        jLblCOCustomerName.setText("Customer");
        jPnlCOAdd.add(jLblCOCustomerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 70, 60, 20));

        jLblCODDate.setText("Deliv Date");
        jPnlCOAdd.add(jLblCODDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 100, 70, 20));

        jLblCOAcptDate.setText("Acpt Date");
        jPnlCOAdd.add(jLblCOAcptDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 70, 60, 20));

        jLblCOAuthBy.setText("Auth  By");
        jPnlCOAdd.add(jLblCOAuthBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 100, 60, 20));

        jLblCOMisc.setText("Misc");
        jPnlCOAdd.add(jLblCOMisc, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 420, 50, 20));

        jLblCODiscount.setText("Discount%");
        jPnlCOAdd.add(jLblCODiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 440, -1, 20));

        jLblCOTax.setText("Tax% ");
        jPnlCOAdd.add(jLblCOTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 460, 50, 20));

        jCboCOCustomerName.setFont(new java.awt.Font("Dialog", 0, 12));
        jPnlCOAdd.add(jCboCOCustomerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 70, 200, 20));

        jCboCOAuthBy.setFont(new java.awt.Font("Dialog", 0, 12));
        jPnlCOAdd.add(jCboCOAuthBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 200, 20));

        jCboCODateDD.setFont(new java.awt.Font("Dialog", 0, 12));

        jCboCODateDD.setSelectedIndex(curDate.getDate()-1);

        jPnlCOAdd.add(jCboCODateDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 50, 20));

        jCboCODateMM.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCODateMM.setSelectedIndex(curDate.getMonth());

        jPnlCOAdd.add(jCboCODateMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 50, 20));

        jCboCODateYYYY.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCODateYYYY.setSelectedIndex( curDate.getYear()-50 );

        jPnlCOAdd.add(jCboCODateYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, 70, 20));

        jCboCODDateDD.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCODDateDD.setSelectedIndex(curDate.getDate()-1);
        jPnlCOAdd.add(jCboCODDateDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 100, 50, 20));

        jCboCODDateMM.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCODDateMM.setSelectedIndex(curDate.getMonth());

        jPnlCOAdd.add(jCboCODDateMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, 50, 20));

        jCboCODDateYYYY.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCODDateYYYY.setSelectedIndex( curDate.getYear()-50 );
        jPnlCOAdd.add(jCboCODDateYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 100, 70, 20));

        jLblCODMY.setFont(new java.awt.Font("Dialog", 1, 10));
        jLblCODMY.setText("   DD         /  MM        / YYYY");
        jPnlCOAdd.add(jLblCODMY, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, 170, 30));

        jTxtAreaCOTerms.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtAreaCOTermsKeyPressed(evt);
            }
        });

        jScrPaneCOTerms.setViewportView(jTxtAreaCOTerms);

        jPnlCOAdd.add(jScrPaneCOTerms, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 130, 200, 40));

        jCboCOTax.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOTax.addItem("0%");

        try{
            accessDB();
            String ss = "SELECT TaxDesc,Percentage FROM TaxMaster where Active='Y' ORDER BY TaxDesc ";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboCOTax.addItem(res.getString(1)+"-"+res.getString(2)+"%");
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboCOTax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOTaxActionPerformed(evt);
            }
        });

        jPnlCOAdd.add(jCboCOTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 460, 150, 20));

        jCboCODiscount.setFont(new java.awt.Font("Dialog", 0, 12));

        jCboCODiscount.addItem("0%");

        try{
            accessDB();
            String ss = "SELECT DM_Name,DM_Value FROM DiscountMaster where Active='Y' ORDER BY DM_Name";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboCODiscount.addItem(res.getString(1)+"-"+res.getString(2)+"%");
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboCODiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCODiscountActionPerformed(evt);
            }
        });

        jPnlCOAdd.add(jCboCODiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 440, 150, 20));

        jPnlGRNDetails.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlGRNDetails.setBorder(new javax.swing.border.TitledBorder(null, "CO Details", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 18), new java.awt.Color(0, 0, 204)));
        jPnlGRNAddItem.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlGRNAddItem.setBackground(new java.awt.Color(205, 206, 255));
        jLblCOSlNo.setText("Sl. No.");
        jPnlGRNAddItem.add(jLblCOSlNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 40, -1));

        jLblCOItemName.setText("Item Name");
        jPnlGRNAddItem.add(jLblCOItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, -1, -1));

        jLblCOBulkQty.setText("Bulk Qty.");
        jPnlGRNAddItem.add(jLblCOBulkQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, -1, -1));

        jLblCOPackQty.setText("Pack Qty.");
        jPnlGRNAddItem.add(jLblCOPackQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        jLblCODiscountDetail.setText("Discount");
        jPnlGRNAddItem.add(jLblCODiscountDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, -1, -1));

        jLbCOTaxDetail.setText("Tax");
        jPnlGRNAddItem.add(jLbCOTaxDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 10, -1, -1));

        jLblCOLooseSP.setText("Loose Price");
        jPnlGRNAddItem.add(jLblCOLooseSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 70, -1));

        jTxtCOSlNo.setEditable(false);
        jTxtCOSlNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPnlGRNAddItem.add(jTxtCOSlNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 90, 20));

        jTxtCOBulkQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtCOBulkQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtCOBulkQtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtCOBulkQtyFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtCOBulkQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 30, 100, 20));

        jTxtCOPackQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtCOPackQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtCOPackQtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtCOPackQtyFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtCOPackQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, 90, 20));

        jTxtCOLooseSP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtCOLooseSP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtCOLooseSPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtCOLooseSPFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtCOLooseSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, 100, 20));

        jTblCODetails.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTblCODetails.setSelectionBackground(new java.awt.Color(204, 255, 255));
        //displayDetailsTbl();
        jTblCODetails.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTblCODetailsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTblCODetailsKeyReleased(evt);
            }
        });

        jTblCODetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblCODetailsMouseClicked(evt);
            }
        });

        jPnlGRNAddItem.add(jTblCODetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 1240, -1));

        jCboCOItemName.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOItemName.addItem("Select one");
        try{
            accessDB();
            String ss = "SELECT itemName FROM Item_M where Active='Y' ORDER BY itemName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            jCboCOItemName.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jCboCOItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOItemNameActionPerformed(evt);
            }
        });

        jPnlGRNAddItem.add(jCboCOItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 100, 20));

        jLblCOLooseQty.setText("Loose Qty.");
        jPnlGRNAddItem.add(jLblCOLooseQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, -1, -1));

        jTxtCOLooseQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtCOLooseQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtCOLooseQtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtCOLooseQtyFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtCOLooseQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 90, 20));

        jLblCOBulkSP.setText("Bulk Price");
        jPnlGRNAddItem.add(jLblCOBulkSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 10, -1, -1));

        jTxtCOBulkSP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtCOBulkSP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtCOBulkSPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtCOBulkSPFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtCOBulkSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 30, 90, 20));

        jLblCOPackSP.setText("Pack Price");
        jPnlGRNAddItem.add(jLblCOPackSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, -1, -1));

        jTxtCOPackSP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtCOPackSP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtCOPackSPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtCOPackSPFocusLost(evt);
            }
        });

        jPnlGRNAddItem.add(jTxtCOPackSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 30, 100, 20));

        jLblCONetPrice.setText("Item Total");
        jPnlGRNAddItem.add(jLblCONetPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 10, 80, -1));

        jTxtCONetPrice.setEditable(false);
        jTxtCONetPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPnlGRNAddItem.add(jTxtCONetPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 30, 100, 20));

        jCboCODiscountDetail.setFont(new java.awt.Font("Dialog", 0, 10));
        jCboCODiscountDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCODiscountDetailActionPerformed(evt);
            }
        });

        jCboCODiscountDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jCboCODiscountDetailKeyReleased(evt);
            }
        });

        jPnlGRNAddItem.add(jCboCODiscountDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 30, 100, 20));

        jCboCOTaxDetail.setFont(new java.awt.Font("Dialog", 0, 10));
        jCboCOTaxDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCboCOTaxDetailActionPerformed(evt);
            }
        });

        jCboCOTaxDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jCboCOTaxDetailKeyReleased(evt);
            }
        });

        jPnlGRNAddItem.add(jCboCOTaxDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 30, 100, 20));

        jLblCODiscAmtDetail.setText("Disc Amt");
        jPnlGRNAddItem.add(jLblCODiscAmtDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 10, 60, -1));

        jTxtCODiscAmtDetail.setEditable(false);
        jTxtCODiscAmtDetail.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPnlGRNAddItem.add(jTxtCODiscAmtDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 30, 90, 20));

        jLblCOTaxAmtDetail.setText("Tax Amt");
        jPnlGRNAddItem.add(jLblCOTaxAmtDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 10, 50, -1));

        jTxtCOTaxAmtDetail.setEditable(false);
        jTxtCOTaxAmtDetail.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPnlGRNAddItem.add(jTxtCOTaxAmtDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 30, 90, 20));

        jScrPaneGRNItem.setViewportView(jPnlGRNAddItem);

        jPnlGRNDetails.add(jScrPaneGRNItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 770, 200));

        jBtnCOFinish.setMnemonic('F');
        jBtnCOFinish.setText("Finish");
        jBtnCOFinish.setToolTipText(" ");
        jBtnCOFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOFinishActionPerformed(evt);
            }
        });

        jBtnCOFinish.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtnCOFinishKeyPressed(evt);
            }
        });

        jPnlGRNDetails.add(jBtnCOFinish, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 220, 100, -1));

        jBtnCOEditItem.setMnemonic('D');
        jBtnCOEditItem.setText("Edit Item");
        jBtnCOEditItem.setToolTipText(" ");
        jBtnCOEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOEditItemActionPerformed(evt);
            }
        });

        jPnlGRNDetails.add(jBtnCOEditItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 220, 100, -1));

        jBtnCORemoveItem.setMnemonic('R');
        jBtnCORemoveItem.setText("Rem Item");
        jBtnCORemoveItem.setToolTipText(" ");
        jBtnCORemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCORemoveItemActionPerformed(evt);
            }
        });

        jPnlGRNDetails.add(jBtnCORemoveItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 220, 100, -1));

        jBtnCOAddItem.setMnemonic('I');
        jBtnCOAddItem.setText("Add Item");
        jBtnCOAddItem.setToolTipText(" ");
        jBtnCOAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOAddItemActionPerformed(evt);
            }
        });

        jPnlGRNDetails.add(jBtnCOAddItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 220, 100, -1));

        jBtnCOSaveEdit.setText("Save Edit");
        jBtnCOSaveEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOSaveEditActionPerformed(evt);
            }
        });

        jPnlGRNDetails.add(jBtnCOSaveEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 220, 100, -1));

        jPnlCOAdd.add(jPnlGRNDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 790, 250));

        jBtnCOSave.setMnemonic('S');
        jBtnCOSave.setText("Save");
        jBtnCOSave.setToolTipText(" ");
        jBtnCOSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOSaveActionPerformed(evt);
            }
        });

        jPnlCOAdd.add(jBtnCOSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 100, -1));

        jBtnCOBack.setMnemonic('B');
        jBtnCOBack.setText("Back");
        jBtnCOBack.setToolTipText(" ");
        jBtnCOBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCOBackActionPerformed(evt);
            }
        });

        jPnlCOAdd.add(jBtnCOBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 420, 100, -1));

        jLblGRNTerms.setText("Terms");
        jPnlCOAdd.add(jLblGRNTerms, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 130, 60, 20));

        jLblCOPONo.setText("PO No");
        jPnlCOAdd.add(jLblCOPONo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, 20));

        jLblPODate.setText("PO Date");
        jPnlCOAdd.add(jLblPODate, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, 20));

        jCboCOADateDD.setFont(new java.awt.Font("Dialog", 0, 12));

        jCboCOADateDD.setSelectedIndex(curDate.getDate()-1);

        jPnlCOAdd.add(jCboCOADateDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 70, 50, 20));

        jCboCOADateYYYY.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOADateYYYY.setSelectedIndex( curDate.getYear()-50 );

        jPnlCOAdd.add(jCboCOADateYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 70, 70, 20));

        jCboCOADateMM.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOADateMM.setSelectedIndex(curDate.getMonth());

        jPnlCOAdd.add(jCboCOADateMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 50, 20));

        jLblCOGrandTot.setText("Gross Total");
        jPnlCOAdd.add(jLblCOGrandTot, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 420, -1, 20));

        jLblCODiscAmt.setText("Disc Amt");
        jPnlCOAdd.add(jLblCODiscAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 440, -1, 20));

        jLblCOTaxAmt.setText("Tax Amt");
        jPnlCOAdd.add(jLblCOTaxAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 460, -1, 20));

        jLblCONetTot.setText("Net Total");
        jPnlCOAdd.add(jLblCONetTot, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 480, -1, 20));

        jTxtCOGrandTot.setEditable(false);
        jTxtCOGrandTot.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtCOGrandTot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtCOGrandTotActionPerformed(evt);
            }
        });

        jPnlCOAdd.add(jTxtCOGrandTot, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 420, 180, 20));

        jTxtCODiscAmt.setEditable(false);
        jTxtCODiscAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtCODiscAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtCODiscAmtActionPerformed(evt);
            }
        });

        jPnlCOAdd.add(jTxtCODiscAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 440, 180, 20));

        jTxtCOTaxAmt.setEditable(false);
        jTxtCOTaxAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPnlCOAdd.add(jTxtCOTaxAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 460, 180, 20));

        jTxtCONetTot.setEditable(false);
        jTxtCONetTot.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPnlCOAdd.add(jTxtCONetTot, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 480, 180, -1));

        jLblCOGroup.setText("CO Group");
        jPnlCOAdd.add(jLblCOGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 40, 60, 20));

        jCboCOGroup.setFont(new java.awt.Font("Dialog", 0, 12));
        jPnlCOAdd.add(jCboCOGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, 200, 20));

        jPnlCOAdd.add(jTxtCOPONo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 170, 20));

        jCboCOPDateDD.setFont(new java.awt.Font("Dialog", 0, 12));

        jCboCOPDateDD.setSelectedIndex(curDate.getDate()-1);

        jPnlCOAdd.add(jCboCOPDateDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 50, 20));

        jCboCOPDateMM.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOPDateMM.setSelectedIndex(curDate.getMonth());

        jPnlCOAdd.add(jCboCOPDateMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 50, 20));

        jCboCOPDateYYYY.setFont(new java.awt.Font("Dialog", 0, 12));
        jCboCOPDateYYYY.setSelectedIndex( curDate.getYear()-50 );

        jPnlCOAdd.add(jCboCOPDateYYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 100, 70, 20));

        add(jPnlCOAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 920, 750));

    }//GEN-END:initComponents

    private void jBtnCOFinishKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtnCOFinishKeyPressed
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
         if (KeyCode==evt.VK_TAB)  {   
             if(jBtnCOSaveEdit.isVisible())
                jBtnCOSaveEdit.requestFocus();
             else 
                 jBtnCOBack.requestFocus();
         }
    }//GEN-LAST:event_jBtnCOFinishKeyPressed

    private void jTblCODetailsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblCODetailsKeyPressed
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
         if (KeyCode==evt.VK_TAB)           
                jBtnCOAddItem.requestFocus();
    }//GEN-LAST:event_jTblCODetailsKeyPressed

    private void jTblCODetailsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblCODetailsKeyReleased
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
         if (KeyCode==evt.VK_ALT_GRAPH){
            clickD=true;
            selrowD=jTblCODetails.getSelectedRow();  
        }
        else if(KeyCode==evt.VK_UP && KeyCode==evt.VK_DOWN){
            clickD=true;
            selrowD=jTblCODetails.getSelectedRow(); 
            System.out.println(selrow); 
        }        
         
    }//GEN-LAST:event_jTblCODetailsKeyReleased

    private void jTxtCOGrandTotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtCOGrandTotActionPerformed
        // Add your handling code here:
        jTxtCOGrandTot.setColumns(2);
    }//GEN-LAST:event_jTxtCOGrandTotActionPerformed

    private void jTxtCOMiscFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOMiscFocusLost
        // Add your handling code here:
        Misc=validEntry(jTxtCOMisc,Misc,"Misc Price");
        calNetPriceHeader();
    }//GEN-LAST:event_jTxtCOMiscFocusLost

    private void jListCOSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListCOSearchMouseClicked
        // Add your handling code here:
         int keyCode=evt.getClickCount();
           if(keyCode==1){
             jTblCOHeader.clearSelection();      
             int index=searchElement(  (String)( jListCOSearch.getSelectedValue() )  ,unsorted   );
             jTblCOHeader.changeSelection( index ,0,true,false);
             jTxtCOSearch.setText(""+jListCOSearch.getSelectedValue());
             jTxtCOSearch.requestFocus();
             jTxtCOSearch.selectAll();
           }
           else{
             jTblCOHeader.clearSelection();      
             int index=searchElement(  (String)( jListCOSearch.getSelectedValue() )  ,unsorted   );
             jTblCOHeader.changeSelection( index ,0,true,false);
             selrow=jTblCOHeader.getSelectedRow();
             clickH=true;
             resetDetails();
             resetHeader(); 
             modify();                 
             headerUnEditable();
             RemoveItem=false;
             AddItem=false;
             if(jPnlCOAdd.isVisible())
                jBtnCOEditItem.requestFocus();
             else
                 jTxtCOSearch.requestFocus();
           }
    }//GEN-LAST:event_jListCOSearchMouseClicked

    private void jListCOSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListCOSearchKeyReleased
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
        if(KeyCode==evt.VK_UP||KeyCode==evt.VK_DOWN){                         
             jTxtCOSearch.selectAll();
             jTblCOHeader.clearSelection();    
             jTxtCOSearch.setText(""+jListCOSearch.getSelectedValue());
             int index=searchElement(  (String)( jListCOSearch.getSelectedValue() )  ,unsorted   );
             jTblCOHeader.changeSelection( index ,0,true,false);  
             selrow=index;
        }  
        else if(KeyCode==evt.VK_ENTER){
             clickH=true;
             resetDetails();
             resetHeader();
             modify();                                 
             headerUnEditable();
             RemoveItem=false;
             AddItem=false;
              if(jPnlCOAdd.isVisible())
                jBtnCOEditItem.requestFocus();
             else
                 jTxtCOSearch.requestFocus();          
        }    
    }//GEN-LAST:event_jListCOSearchKeyReleased

    private void jTxtAreaCOTermsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtAreaCOTermsKeyPressed
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
        if (KeyCode==evt.VK_TAB)           
                jCboCOItemName.requestFocus();
    }//GEN-LAST:event_jTxtAreaCOTermsKeyPressed

    private void jTxtCOSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtCOSearchKeyReleased
        // Add your handling code here:
         int keyCode=evt.getKeyCode();        
        if(keyCode==evt.VK_DOWN||keyCode==evt.VK_UP){   
            jListCOSearch.requestFocus();
        }
    }//GEN-LAST:event_jTxtCOSearchKeyReleased

    private void jTxtCOSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtCOSearchKeyPressed
        // Add your handling code here:
         char keyChar=evt.getKeyChar();
        int keyCode=evt.getKeyCode();
        
         if(keyCode==evt.VK_BACK_SPACE||keyCode==evt.VK_DELETE){
            sb=new StringBuffer(key);
            if (sb.length()>0){
            sb.setLength(sb.length()-1);
            }
            key=sb.toString();          
        }
        else if(keyCode==evt.VK_ENTER){
            selrow=jTblCOHeader.getSelectedRow();       
            jTxtCOSearch.setText("");
            jCboCOSearch.setSelectedItem("CO NO");
            list.removeAllElements();            
            clickH=true;
             modify();
             headerUnEditable();
              if(jPnlCOAdd.isVisible())
                jBtnCOEditItem.requestFocus();
             else
                 jTxtCOSearch.requestFocus();
        }//end else if 1
        else if(keyCode==evt.VK_DOWN||keyCode==evt.VK_UP){ 
            ;
        }//end else if 3
        else if(keyCode==evt.VK_ALT || keyCode==evt.VK_CONTROL || keyCode==evt.VK_SHIFT){ 
            ;
        }//end else if 3        
        else if(keyCode>=32&&keyCode<=93||keyCode>=95&&keyCode<=126){
            key+=String.valueOf(keyChar); 
            key=key.trim();
        }//end else if 2
        else
            JOptionPane.showMessageDialog(this," Enter valid chararters ","ERROR!",JOptionPane.ERROR_MESSAGE);
       if(!list.isEmpty()){ 
        search(jListCOSearch);
       }
    }//GEN-LAST:event_jTxtCOSearchKeyPressed

    private void jCboCOSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOSearchActionPerformed
        // Add your handling code here:
         key=""; 
       search(jListCOSearch); 
       jTxtCOSearch.setText(""+jListCOSearch.getSelectedValue());
       jTxtCOSearch.requestFocus();
       jTxtCOSearch.selectAll();
    
    }//GEN-LAST:event_jCboCOSearchActionPerformed

    private void jBtnCOSearchCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOSearchCloseActionPerformed
        // Add your handling code here:
        searchClosePressed();
    }//GEN-LAST:event_jBtnCOSearchCloseActionPerformed

    private void jBtnCOSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOSearchActionPerformed
        // Add your handling code here:
         searchPressed();   
    }//GEN-LAST:event_jBtnCOSearchActionPerformed

    private void jCboCOTaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOTaxActionPerformed
        // Add your handling code here:
        if(!AllowTax)
          calNetPriceHeader();
    }//GEN-LAST:event_jCboCOTaxActionPerformed

    private void jCboCODiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCODiscountActionPerformed
        // Add your handling code here:
        if(!AllowDis)
          calNetPriceHeader();
    }//GEN-LAST:event_jCboCODiscountActionPerformed

    private void jCboCOTaxDetailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCboCOTaxDetailKeyReleased
        // Add your handling code here:
        calNetPriceDetail();
    }//GEN-LAST:event_jCboCOTaxDetailKeyReleased

    private void jCboCODiscountDetailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCboCODiscountDetailKeyReleased
        // Add your handling code here:
        calNetPriceDetail();
    }//GEN-LAST:event_jCboCODiscountDetailKeyReleased

    private void jCboCODiscountDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCODiscountDetailActionPerformed
        // Add your handling code here:
        calNetPriceDetail();
    }//GEN-LAST:event_jCboCODiscountDetailActionPerformed

    private void jBtnCOModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOModifyActionPerformed
        // Add your handling code here:
         resetDetails();
         resetHeader();
         modify();
         headerUnEditable();
         RemoveItem=false;
         AddItem=false;
    }//GEN-LAST:event_jBtnCOModifyActionPerformed

    private void jCboCOCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOCustomerActionPerformed
        // Add your handling code here:
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The CO DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboCOCustomer.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboCOCustomerActionPerformed

    private void jCboCOGroupHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOGroupHActionPerformed
        // Add your handling code here:
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The CO DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboCOGroup.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboCOGroupHActionPerformed

    private void jPnlCOViewComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlCOViewComponentShown
        // Add your handling code here:
        displayData();        
        jBtnCOAdd.requestFocus();
    }//GEN-LAST:event_jPnlCOViewComponentShown

    private void jPnlCOAddComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPnlCOAddComponentHidden
        // Add your handling code here:
         for(i=0;i<rowTblDetails;i++)
            for(j=0;j<colAdd.length;j++)
                dataAdd[i][j]="";
         
        resetDetails();
        rowTblDetails=0;
        displayDetailsTbl();
        AddItem=false;
        RemoveItem=false;        
        displayData();
    }//GEN-LAST:event_jPnlCOAddComponentHidden

    private void jTblCOHeaderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblCOHeaderKeyReleased
        // Add your handling code here:
         int KeyCode=evt.getKeyCode();
         if (KeyCode==evt.VK_ALT_GRAPH){
            clickH=true;
            selrow=jTblCOHeader.getSelectedRow();  
        }
        else if(KeyCode==evt.VK_UP && KeyCode==evt.VK_DOWN){
            clickH=true;
            selrow=jTblCOHeader.getSelectedRow(); 
            System.out.println(selrow); 
        }            
    }//GEN-LAST:event_jTblCOHeaderKeyReleased

    private void jTblCOHeaderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblCOHeaderKeyPressed
        // Add your handling code here:
        int KeyCode=evt.getKeyCode();
        if (KeyCode==evt.VK_TAB){
            if(jPnlCOSearch.isVisible())
                jCboCOSearch.requestFocus();
            else
                jBtnCOAdd.requestFocus();
        }
        else if (KeyCode==evt.VK_ALT_GRAPH){
            clickH=true;
            selrow=jTblCOHeader.getSelectedRow();  
        }
        else if(KeyCode==evt.VK_UP && KeyCode==evt.VK_DOWN){
            clickH=true;
            selrow=jTblCOHeader.getSelectedRow(); 
            System.out.println(jTblCOHeader.getSelectedRow()); 
        }            
    }//GEN-LAST:event_jTblCOHeaderKeyPressed

    private void jTblCOHeaderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblCOHeaderMouseClicked
        // Add your handling code here:
        clickH=true;
        selcol=jTblCOHeader.getSelectedColumn();
        selrow=jTblCOHeader.getSelectedRow();
    }//GEN-LAST:event_jTblCOHeaderMouseClicked

    private void jCboCOToYYYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOToYYYYActionPerformed
        // Add your handling code here:
         if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The CO DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboCOToYYYY.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboCOToYYYYActionPerformed

    private void jCboCOToMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOToMMActionPerformed
        // Add your handling code here:
         if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The CO DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboCOToMM.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboCOToMMActionPerformed

    private void jCboCOToDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOToDDActionPerformed
        // Add your handling code here:
         if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The CO DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboCOToDD.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboCOToDDActionPerformed

    private void jCboCOFromYYYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOFromYYYYActionPerformed
        // Add your handling code here:
         if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The CO DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboCOFromYYYY.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboCOFromYYYYActionPerformed

    private void jCboCOFromMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOFromMMActionPerformed
        // Add your handling code here:
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The CO DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboCOFromMM.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboCOFromMMActionPerformed

    private void jCboCOFromDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOFromDDActionPerformed
        // Add your handling code here:
        if(rowSpecific!=0)
            displayData();
        else{
            JOptionPane.showMessageDialog(this,"The CO DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboCOFromDD.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCboCOFromDDActionPerformed

    private void jScrollPane1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane1ComponentResized
        // Add your handling code here:
         h=jTblCOHeader.getRowHeight()*(rowShown+1);
            if(h<320)
                jScrollPane1.setSize(580,h+5);
            else
                jScrollPane1.setSize(580,320);
    }//GEN-LAST:event_jScrollPane1ComponentResized

    private void jBtnCOSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOSaveActionPerformed
        // Add your handling code here:
         checkHeaderValidation();
         if (headerIsValid)
         {                  
           if (ModFlag==false) 
           {  
              int ansSave=JOptionPane.showConfirmDialog(this,"       Are u confirm to save","Save",JOptionPane.YES_NO_OPTION);
              if (ansSave==0){ 
                try{
                     combineAdd();
                     if(NoDetailError && NoHeaderError)
                         updateCode("CO_H");
                 }
                 catch(Exception ex){
                         System.out.println("Error in save while saving new record"+ex);
                 }
              }
           }
           else 
           {
              int ansModify=JOptionPane.showConfirmDialog(this,"      Are u confirm to Modify","Save",JOptionPane.YES_NO_OPTION);
              if (ansModify==0){  
                  try{
                       combineModify();  
                  }
                  catch(Exception ex){
                      System.out.println("Error in save while saving modified record"+ex);
                  }
              }
           }
               
             resetHeader();
             resetDetails();
             jTblCOHeader.requestFocus();
             searchClosePressed();            
         }     
         else
         {
           headerIsValid = false;
         }         
    }//GEN-LAST:event_jBtnCOSaveActionPerformed

    private void jBtnCOSaveEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOSaveEditActionPerformed
        // Add your handling code here:
         try{
            jTblCODetails.setEnabled(true);
            modDetails();
            detailsEditable(); 
            calNetPriceHeader();
            clickD=false;
        }
        catch(Exception ex)
        {
            System.out.println("Error in save edit"+ex);
        }
    }//GEN-LAST:event_jBtnCOSaveEditActionPerformed

    private void jBtnCOFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOFinishActionPerformed
        // Add your handling code here:
         if(rowTblDetails<1)
        {
            JOptionPane.showMessageDialog(this,"CO Details Table Cannot be Empty","CO Details",JOptionPane.ERROR_MESSAGE);
        }
        else{
           int finish=JOptionPane.showConfirmDialog(this,"Are u sure to Finish, AddItem or RemoveItem to the CODetails ","Finish CO",JOptionPane.YES_NO_OPTION);
           if(finish==0){
                jBtnCOSave.setEnabled(true);
                jBtnCOEditItem.setEnabled(false);
                jBtnCOAddItem.setEnabled(false);
                jBtnCORemoveItem.setEnabled(false);
                jBtnCOFinish.setEnabled(false);
                jBtnCOBack.setEnabled(false);
                jBtnCOSaveEdit.setEnabled(false);
           }
           else{
                jBtnCOSave.setEnabled(false);
                if(ModFlag)
                    jBtnCOEditItem.setEnabled(true);
                else
                    jBtnCOEditItem.setEnabled(false);
                jBtnCOAddItem.setEnabled(true);
                jBtnCORemoveItem.setEnabled(true);
                jBtnCOFinish.setEnabled(true);
                jBtnCOBack.setEnabled(true);
                jBtnCOSaveEdit.setEnabled(false);
           }           
        }
    }//GEN-LAST:event_jBtnCOFinishActionPerformed

    private void jBtnCOEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOEditItemActionPerformed
        // Add your handling code here:
         try{            
            editPressed=true;            
            detailsModify();            
            clickD=false;                                   
        }
        catch(Exception ex)
        {
            System.out.println("Error in edit item"+ex);
        }
    }//GEN-LAST:event_jBtnCOEditItemActionPerformed

    private void jTblCODetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblCODetailsMouseClicked
        // Add your handling code here:
        clickD=true; 
        if (jTblCODetails.isEnabled())
          selrowD=jTblCODetails.getSelectedRow(); 
    }//GEN-LAST:event_jTblCODetailsMouseClicked

    private void jCboCOItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOItemNameActionPerformed
        // Add your handling code here:
         if(rowTblDetails >= 1 && (!editPressed )){            
            for(i=0;i<rowTblDetails;i++){                
                if(dataDetailsShown[i][1].equals(jCboCOItemName.getSelectedItem()) ){
                    jCboCOItemName.setSelectedIndex(0);
                    jCboCOItemName.requestFocus();                    
                    JOptionPane.showMessageDialog(this,"Selected ItemName already exists in the list","Error!",JOptionPane.ERROR_MESSAGE);                        
                    break;
                }
            }          
        }
    }//GEN-LAST:event_jCboCOItemNameActionPerformed

    private void jBtnCORemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCORemoveItemActionPerformed
        // Add your handling code here:
         removeItem();
    }//GEN-LAST:event_jBtnCORemoveItemActionPerformed

    private void jCboCOTaxDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCboCOTaxDetailActionPerformed
        // Add your handling code here:       
        calNetPriceDetail();
    }//GEN-LAST:event_jCboCOTaxDetailActionPerformed

    private void jTxtCOLooseSPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOLooseSPFocusLost
        // Add your handling code here:
         LooseSP=validEntry(jTxtCOLooseSP,LooseSP,"Loose Selling Price");
         calNetPriceDetail();
    }//GEN-LAST:event_jTxtCOLooseSPFocusLost

    private void jTxtCOPackSPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOPackSPFocusLost
        // Add your handling code here:
         PackSP=validEntry(jTxtCOPackSP,PackSP,"Pack Selling Price"); 
         calNetPriceDetail();
    }//GEN-LAST:event_jTxtCOPackSPFocusLost

    private void jTxtCOBulkSPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOBulkSPFocusLost
        // Add your handling code here:
         BulkSP=validEntry(jTxtCOBulkSP,BulkSP,"Bulk Selling Price"); 
         calNetPriceDetail();
    }//GEN-LAST:event_jTxtCOBulkSPFocusLost

    private void jTxtCOLooseSPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOLooseSPFocusGained
        // Add your handling code here:
        BulkQty=Long.parseLong(jTxtCOBulkQty.getText());
        PackQty=Long.parseLong(jTxtCOPackQty.getText());
        LooseQty=Long.parseLong(jTxtCOLooseQty.getText());
        BulkSP=Double.parseDouble(jTxtCOBulkSP.getText());
        PackSP=Double.parseDouble(jTxtCOPackSP.getText()); 
        checkItemSelected(jCboCOItemName,"Item Name");
    }//GEN-LAST:event_jTxtCOLooseSPFocusGained

    private void jTxtCOPackSPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOPackSPFocusGained
        // Add your handling code here:
        BulkQty=Long.parseLong(jTxtCOBulkQty.getText());
        PackQty=Long.parseLong(jTxtCOPackQty.getText());
        LooseQty=Long.parseLong(jTxtCOLooseQty.getText());         
        BulkSP=Double.parseDouble(jTxtCOBulkSP.getText());
        LooseSP=Double.parseDouble(jTxtCOLooseSP.getText());
        checkItemSelected(jCboCOItemName,"Item Name");
    }//GEN-LAST:event_jTxtCOPackSPFocusGained

    private void jTxtCOBulkSPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOBulkSPFocusGained
        // Add your handling code here:
        BulkQty=Long.parseLong(jTxtCOBulkQty.getText());
        PackQty=Long.parseLong(jTxtCOPackQty.getText());
        LooseQty=Long.parseLong(jTxtCOLooseQty.getText());         
        PackSP=Double.parseDouble(jTxtCOPackSP.getText());
        LooseSP=Double.parseDouble(jTxtCOLooseSP.getText());
        checkItemSelected(jCboCOItemName,"Item Name");
    }//GEN-LAST:event_jTxtCOBulkSPFocusGained

    private void jTxtCOLooseQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOLooseQtyFocusGained
        // Add your handling code here: 
        BulkQty=Long.parseLong(jTxtCOBulkQty.getText());
        PackQty=Long.parseLong(jTxtCOPackQty.getText()); 
        BulkSP=Double.parseDouble(jTxtCOBulkSP.getText());
        PackSP=Double.parseDouble(jTxtCOPackSP.getText());
        LooseSP=Double.parseDouble(jTxtCOLooseSP.getText());
        checkItemSelected(jCboCOItemName,"Item Name");
    }//GEN-LAST:event_jTxtCOLooseQtyFocusGained

    private void jTxtCOPackQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOPackQtyFocusGained
        // Add your handling code here:
        BulkQty=Long.parseLong(jTxtCOBulkQty.getText());
        LooseQty=Long.parseLong(jTxtCOLooseQty.getText()); 
        BulkSP=Double.parseDouble(jTxtCOBulkSP.getText());
        PackSP=Double.parseDouble(jTxtCOPackSP.getText());
        LooseSP=Double.parseDouble(jTxtCOLooseSP.getText());
        checkItemSelected(jCboCOItemName,"Item Name");
    }//GEN-LAST:event_jTxtCOPackQtyFocusGained

    private void jTxtCOBulkQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOBulkQtyFocusGained
        // Add your handling code here:
        PackQty=Long.parseLong(jTxtCOPackQty.getText());
        LooseQty=Long.parseLong(jTxtCOLooseQty.getText());
        BulkSP=Double.parseDouble(jTxtCOBulkSP.getText());
        PackSP=Double.parseDouble(jTxtCOPackSP.getText());
        LooseSP=Double.parseDouble(jTxtCOLooseSP.getText());
        checkItemSelected(jCboCOItemName,"Item Name");
    }//GEN-LAST:event_jTxtCOBulkQtyFocusGained

    private void jTxtCOLooseQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOLooseQtyFocusLost
        // Add your handling code here:
        LooseQty=validEntry(jTxtCOLooseQty,LooseQty,"Loose Qty");
        calNetPriceDetail();
    }//GEN-LAST:event_jTxtCOLooseQtyFocusLost

    private void jTxtCOPackQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOPackQtyFocusLost
        // Add your handling code here:
        PackQty=validEntry(jTxtCOPackQty,PackQty,"Pack Qty");
        calNetPriceDetail();
    }//GEN-LAST:event_jTxtCOPackQtyFocusLost

    private void jTxtCOBulkQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCOBulkQtyFocusLost
        // Add your handling code here:
        BulkQty=validEntry(jTxtCOBulkQty,BulkQty,"Bulk Qty");
        calNetPriceDetail();
    }//GEN-LAST:event_jTxtCOBulkQtyFocusLost

    private void jBtnCOAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOAddItemActionPerformed
        // Add your handling code here: 
          checkDetailsValidation();
            if(detailsAreValid){                                                
                rowTblDetails ++ ;
                displayDetailsTbl();
                calNetPriceHeader();
                jTxtCOSlNo.setText(""+(rowTblDetails+1));
                resetDetails();
                jBtnCOFinish.setEnabled(true);
                jBtnCOSave.setEnabled(false);                
            }      
           
       if (rowTblDetails<=1 && ModFlag){
           jBtnCORemoveItem.setEnabled(false);
           jBtnCOFinish.setEnabled(false);
       }
       else if(rowTblDetails<1 && !ModFlag){
           jBtnCORemoveItem.setEnabled(false);
           jBtnCOFinish.setEnabled(false);
       }
       else {
           jBtnCORemoveItem.setEnabled(true);
           jBtnCOFinish.setEnabled(true);
       }
          
    }//GEN-LAST:event_jBtnCOAddItemActionPerformed

    private void jBtnCOCancelViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOCancelViewActionPerformed
        // Add your handling code here:
         cancel("CO_H");
         displayData();
    }//GEN-LAST:event_jBtnCOCancelViewActionPerformed

    private void jBtnCOExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOExitActionPerformed
        // Add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jBtnCOExitActionPerformed

    private void jBtnCOBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOBackActionPerformed
        // Add your handling code here:
        if(RemoveItem && rowTblDetails<1 && !AddItem){
           JOptionPane.showMessageDialog(this,"Atleast one Row of CO Details Should be there","CO Details" ,JOptionPane.ERROR_MESSAGE);
       }
       else{            
           searchClosePressed();
       }  
    }//GEN-LAST:event_jBtnCOBackActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Add your handling code here:
        jPnlCOAdd.setVisible(false);
        jPnlCOSearch.setVisible(false); 
        jPnlCOView.setVisible(true); 
        
             try{
                accessDB();
                String ss = "SELECT * FROM SemaPhores WHERE TableName = 'CO_H'";            
                ResultSet res = stat.executeQuery(ss);            
                if(!res.next()){
                    String ss1="Insert into SemaPhores (TableName,CtrName,MaxCtr) values('CO_H','CO_',1)";
                   stat.executeUpdate(ss1);               
                }
                con.close();
            }
            catch(Exception ex){
                System.out.println("Error in form Window Opened"+ex);
            }
        
       // checkForEmptyDataBase("CO_Grp");
        checkForEmptyDataBase("CustMaster");
        checkForEmptyDataBase("EmployeeMaster");
       // checkForEmptyDataBase("PurchaseOrderHead");
      //  checkForEmptyDataBase("DiscountMaster");
        checkForEmptyDataBase("TaxMaster");
        checkForEmptyDataBase("Item_M");
       
       // checkForEmptyDataBase("Item_G");   
    }//GEN-LAST:event_formWindowOpened

    private void jBtnCOAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCOAddActionPerformed
        // Add your handling code here:
        detailsEditable();
        headerEditable();
        AddItem=true;
        jPnlCOView.setVisible(false);
        jPnlCOAdd.setVisible(true);
        //jBtnCOEditItem.setEnabled(false);
        jBtnCOSave.setEnabled(false);        
        jBtnCOFinish.setEnabled(false);
        jBtnCOSaveEdit.setEnabled(false);
        jBtnCORemoveItem.setEnabled(false);           
        jBtnCOAddItem.setEnabled(true);
        jBtnCOBack.setEnabled(true);
        
        jBtnCOAddItem.setVisible(true);
        jBtnCOEditItem.setVisible(true);              
        jBtnCOFinish.setVisible(true);
        jBtnCORemoveItem.setVisible(true);
        jCboCODateDD.requestFocus();
        jTxtCOSlNo.setText("1");
        resetDetails();
        resetHeader();
        ModFlag=false;       
        generateCode("CO_H",jTxtCOCode);
    }//GEN-LAST:event_jBtnCOAddActionPerformed

    private void jTxtCODiscAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtCODiscAmtActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTxtCODiscAmtActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
         
    }//GEN-LAST:event_exitForm
    
    /** @ Establish the Connection to the database */
    public void accessDB(){
       try
       { 
    	   con=new LinkDB().getConnection();
            stat=con.createStatement();
       }
       catch(Exception ex)
       {
            System.out.println("Error in accessDB"+ex);
       }   
    }    
    
    /** @ combining both the Header and Detail save to TABLE(CO_H and CO_D)  */
    public void combineAdd()throws SQLException{
        System.out.println("1872");
        try{
           accessDB();
           stat.execute("SET AUTOCOMMIT=0");    
          
                newSaveDetailDB();
                 System.out.println("1879");
                 if(NoDetailError)
                   newSaveHeaderDB();    
                  System.out.println("1882");
           stat.execute("COMMIT");
           con.close();         
        }
        catch(Exception ex){
            stat.execute("ROLLBACK");
            con.close();
            System.out.println("Error in CombineAdd header and Detail"+ex);
        }        
    }
    
     /** @ combining both the Header and Detail modify and save to TABLE(CO_H ) */
    public void combineModify()throws SQLException{
        try{
           accessDB();
           con.setAutoCommit(false);
             modifySaveDetailDB(); 
              if(NoModifyError)
                  modifySaveHeaderDB();
           stat.execute("COMMIT");
           con.close();         
        }
        catch(Exception ex){
            stat.execute("ROLLBACK");
            con.close();
            System.out.println("Error in CombineModify header and Detail"+ex);
        }
    }
       
    /** @ Save new  Header or Master record to the Table Co_H */
    public void newSaveHeaderDB()throws SQLException{
           String TaxNameHeader="",TaxCodeHeader="",DisCodeHeader="",DisNameHeader="",ValueInHTax="",ValueInHDis="",insHeader="";
                 
           String CODate=jCboCODateDD.getSelectedItem()+"/"+jCboCODateMM.getSelectedItem()+"/"+jCboCODateYYYY.getSelectedItem();
           String COADate=jCboCOADateDD.getSelectedItem()+"/"+jCboCOADateMM.getSelectedItem()+"/"+jCboCOADateYYYY.getSelectedItem();
           String COPDate=jCboCOPDateDD.getSelectedItem()+"/"+jCboCOPDateMM.getSelectedItem()+"/"+jCboCOPDateYYYY.getSelectedItem();
           String CODDate=jCboCODDateDD.getSelectedItem()+"/"+jCboCODDateMM.getSelectedItem()+"/"+jCboCODDateYYYY.getSelectedItem();
           ValueInHTax=""+jCboCOTax.getSelectedItem();
           ValueInHDis=""+jCboCODiscount.getSelectedItem();
           String EmployeeCode="",CustomerCode="",GroupCode="";  
          
      try{ 
            GroupCode=returnCode("CO_Grp","CO_Grp_ID","CO_Grp_Name",""+jCboCOGroup.getSelectedItem());
            CustomerCode=returnCode("CustMaster","CustCode","CustName",""+jCboCOCustomerName.getSelectedItem());
            if(jCboCOAuthBy.getSelectedIndex()>0)
                EmployeeCode=returnCode("EmployeeMaster","EmpCode","EmpName",""+jCboCOAuthBy.getSelectedItem());
            else
                EmployeeCode="00";           
           
           DisCodeHeader=getCode(DisNameHeader,ValueInHDis,"DM_ID","DiscountMaster","DM_Name");          
           TaxCodeHeader=getCode(TaxNameHeader,ValueInHTax,"TaxCode","TaxMaster","TaxDesc"); 
           insHeader="Insert into CO_H (CO_GroupID,Cust_Code,CO_No,CO_Date,CO_Acp_Dt,AuthBy_ID,Delivry_By_Dt,";
           insHeader+="PO_Ref_No,PO_Ref_Dt,Terms,SL_Misc,SL_Disc_Perc,SL_Disc_Amt,SL_Tax_Perc,SL_Tax_Amt,";
           insHeader+="GrandTotal,NetTotal)";
           insHeader+=" values('"+GroupCode+"','"+CustomerCode+"'";
           insHeader+=",'"+jTxtCOCode.getText()+"','"+CODate+"','"+COADate+"','"+EmployeeCode+"'";
           insHeader+=",'"+CODDate+"','"+jTxtCOPONo.getText()+"','"+COPDate+"'";
           insHeader+=",'"+jTxtAreaCOTerms.getText()+"',"+Double.parseDouble(jTxtCOMisc.getText())+",'"+DisCodeHeader+"'";
           insHeader+=","+Double.parseDouble(jTxtCODiscAmt.getText())+",'"+TaxCodeHeader+"'";
           insHeader+=","+Double.parseDouble(jTxtCOTaxAmt.getText())+","+Double.parseDouble(jTxtCOGrandTot.getText());
           insHeader+=","+Double.parseDouble(jTxtCONetTot.getText())+")";           
           stat.executeUpdate(insHeader);           
           NoHeaderError=true;
          }
        catch(Exception ex)
          {     
                NoHeaderError=false;
            stat.execute("ROLLBACK");
            con.close();
                System.out.println("Error in newSaveHeader "+ex);
          }   
    }
    
    /** @ Save new  Detail record to the Table CO_D*/
    public void newSaveDetailDB()throws SQLException{        
        String insDetail="",ItemNo="",DisNameDetail="";
        String TaxNameDetail="",TaxCodeDetail="",DisCodeDetail="",CurrencyID="";  
        String ValueInDTblTax="",ValueInDTblDis="";
       
      try{
          for(i=0 ; i<rowTblDetails ; i++){                         
              ItemNo=returnCode("Item_M","itemNo","itemName",(String)dataDetailsShown[i][1]);              
              ValueInDTblDis=""+jTblCODetails.getValueAt(i,8);
              ValueInDTblTax=""+jTblCODetails.getValueAt(i,10);
              DisCodeDetail=getCode(DisNameDetail,ValueInDTblDis,"DM_ID","DiscountMaster","DM_Name");          
              TaxCodeDetail=getCode(TaxNameDetail,ValueInDTblTax,"TaxCode","TaxMaster","TaxDesc");
              
              insDetail="Insert into CO_D (CO_No,SlNo,Item_Code,Qty_Loose,SP_Loose,Qty_Pack,SP_Pack,Qty_Bulk,SP_Bulk,";              
              insDetail+="IL_Disc_Perc,IL_Disc_Amt,IL_Tax_Perc,IL_Tax_Amt,NetPrice)";
              insDetail+=" values('"+jTxtCOCode.getText()+"',"+Integer.parseInt(String.valueOf(jTblCODetails.getValueAt(i,0)))+",'"+ItemNo+"'";
              insDetail+=","+Long.parseLong(""+jTblCODetails.getValueAt(i,2))+","+Double.parseDouble(""+jTblCODetails.getValueAt(i,3))+"";
              insDetail+=","+Long.parseLong(""+jTblCODetails.getValueAt(i,4))+","+Double.parseDouble(String.valueOf(jTblCODetails.getValueAt(i,5)));
              insDetail+=","+Long.parseLong(String.valueOf(jTblCODetails.getValueAt(i,6)))+","+Double.parseDouble(String.valueOf(jTblCODetails.getValueAt(i,7)))+"";
              insDetail+=",'"+DisCodeDetail+"',"+Double.parseDouble(String.valueOf(jTblCODetails.getValueAt(i,9)))+"";
              insDetail+=",'"+TaxCodeDetail+"',"+Double.parseDouble(String.valueOf(jTblCODetails.getValueAt(i,11)));
              insDetail+=","+Double.parseDouble(String.valueOf(jTblCODetails.getValueAt(i,12)))+")";
              System.out.println(insDetail);
              stat.executeUpdate(insDetail);
              NoDetailError=true;              
          }  
        }
        catch(Exception ex){
            stat.execute("ROLLBACK");
            con.close();
             NoDetailError=false;
             System.out.println("Error in newSaveDetail "+ex);
        }        
    }
    
    /** @ modify and save the Header to the Table CO_H */   
     public void modifySaveHeaderDB()throws SQLException{
        String modDetail="";
       try{    
              modDetail="UPDATE CO_H set SL_Disc_Amt='"+Double.parseDouble(jTxtCODiscAmt.getText())+"',";             
              modDetail+="SL_Tax_Amt="+Double.parseDouble(jTxtCOTaxAmt.getText())+",";
              modDetail+="GrandTotal="+Double.parseDouble(jTxtCOGrandTot.getText())+",";
              modDetail+="NetTotal="+Double.parseDouble(jTxtCONetTot.getText())+"";              
              modDetail+=" where CO_No='"+jTxtCOCode.getText()+"'";              
              stat.executeUpdate(modDetail);                           
        }
        catch(Exception ex){
            stat.execute("ROLLBACK");
            con.close();
            System.out.println("Error in ModifySaveHeader "+ex);
        }        
    }
  
     /** @ modify and save the Details to the Table CO_D */   
     public void modifySaveDetailDB()throws SQLException{
         String modDetail="",ItemNoM="";
         String TaxNameMDetail="",TaxCodeMDetail="",DisCodeMDetail="",DisNameMDetail="",ValueInDTblTaxM="",ValueInDTblDisM="";
        
      try{     
         for(i=0 ; i<(rowTblDetails) ; i++){ 
              ItemNoM=returnCode("Item_M","itemNo","itemName",(String)dataDetailsShown[i][1]);                
              ValueInDTblDisM=""+dataDetailsShown[i][8];
              ValueInDTblTaxM=""+dataDetailsShown[i][10];
              
              DisCodeMDetail=getCode(DisNameMDetail,ValueInDTblDisM,"DM_ID","DiscountMaster","DM_Name");          
              TaxCodeMDetail=getCode(TaxNameMDetail,ValueInDTblTaxM,"TaxCode","TaxMaster","TaxDesc");
             
             ResultSet resTest=stat.executeQuery("Select * from CO_D where CO_No='"+jTxtCOCode.getText()+"' and Item_Code='"+ItemNoM+"'");
             if(resTest.next()){           
              modDetail="UPDATE CO_D set SlNo='"+dataDetailsShown[i][0]+"',";             
              modDetail+="Qty_Loose="+Long.parseLong(""+dataDetailsShown[i][2])+",SP_Loose="+Double.parseDouble(""+dataDetailsShown[i][3])+",";
              modDetail+="Qty_Pack="+Long.parseLong(""+dataDetailsShown[i][4])+",SP_Pack="+Double.parseDouble(""+dataDetailsShown[i][5])+",";
              modDetail+="Qty_Bulk="+Long.parseLong(""+dataDetailsShown[i][6])+",SP_Bulk="+Double.parseDouble(""+dataDetailsShown[i][7])+",";
              modDetail+="IL_Disc_Perc='"+DisCodeMDetail+"',IL_Disc_Amt="+Double.parseDouble(""+dataDetailsShown[i][9])+",IL_Tax_Perc='"+TaxCodeMDetail+"',";
              modDetail+="IL_Tax_Amt="+Double.parseDouble(""+dataDetailsShown[i][11])+",NetPrice="+Double.parseDouble(""+dataDetailsShown[i][12])+"";             
              modDetail+=" where CO_No='"+jTxtCOCode.getText()+"' and Item_Code='"+ItemNoM+"'";              
              stat.executeUpdate(modDetail);  
              NoModifyError=true;
              System.out.println("end Modify");
             }
             else{  
              modDetail="Insert into CO_D (CO_No,SlNo,Item_Code,Qty_Loose,SP_Loose,Qty_Pack,SP_Pack,Qty_Bulk,SP_Bulk,";              
              modDetail+="IL_Disc_Perc,IL_Disc_Amt,IL_Tax_Perc,IL_Tax_Amt,NetPrice)";             
              modDetail+=" values('"+jTxtCOCode.getText()+"','"+String.valueOf(jTblCODetails.getValueAt(i,0))+"','"+ItemNoM+"'";
              modDetail+=","+Long.parseLong(""+jTblCODetails.getValueAt(i,2))+","+Double.parseDouble(""+jTblCODetails.getValueAt(i,3))+"";
              modDetail+=","+Long.parseLong(""+jTblCODetails.getValueAt(i,4))+","+Double.parseDouble(String.valueOf(jTblCODetails.getValueAt(i,5)));
              modDetail+=","+Long.parseLong(String.valueOf(jTblCODetails.getValueAt(i,6)))+","+Double.parseDouble(String.valueOf(jTblCODetails.getValueAt(i,7)))+"";
              modDetail+=",'"+DisCodeMDetail+"',"+Double.parseDouble(String.valueOf(jTblCODetails.getValueAt(i,9)))+"";
              modDetail+=",'"+TaxCodeMDetail+"',"+Double.parseDouble(String.valueOf(jTblCODetails.getValueAt(i,11)));
              modDetail+=","+Double.parseDouble(String.valueOf(jTblCODetails.getValueAt(i,12)))+")";
              stat.executeUpdate(modDetail); 
              NoModifyError=true;
             }
          }   
        }
        catch(Exception ex){
            NoModifyError=false;
            stat.execute("ROLLBACK");
            con.close();
            System.out.println("Error in ModifySaveDetail"+ex);
        }        
    }
     
    /** @ Method to get the code for Tax and Discount (Description and percentage)
      *  by passing the Respective tableName
      */
     public String getCode(String name,String fromText,String TableCode,String Table,String TableName){
         String codeofName="";
        try{              
             if(fromText.equals("0%")){ 
                codeofName= "000";
                name="";               
             }
             else{
                StringBuffer sb = new StringBuffer(fromText);
                for(j=1;j<=sb.length();j++){
                    if(sb.charAt(sb.length()-j)=='-')
                    {
                        name=sb.substring(0,sb.length()-j); 
                        name.trim();
                        break;
                    }
                }               
               ResultSet res=stat.executeQuery("SELECT "+TableCode+"  FROM "+Table+" WHERE "+TableName+" = '"+name+"'");
               System.out.println("SELECT "+TableCode+"  FROM "+Table+" WHERE "+TableName+" = '"+name+"'");
               res.next();
               codeofName=res.getString(1);
               System.out.println(codeofName);              
             }
        }
        catch(Exception ex){
             System.out.println("Error in getCode of "+Table+" "+ex );
        }
        return codeofName;
    }
    
     /** Method to get the code by passing the Table,TableCode,TableName and the whereCondition */
     public String returnCode(String Table,String TableCode,String WhereCondition,String forWhere){
         String Code="";
         try{
           ResultSet res=stat.executeQuery("Select "+TableCode+" from "+Table+" where "+WhereCondition+"='"+forWhere+"'"); 
           res.next();
           Code=res.getString(1);
         }
         catch(Exception ex){             
             System.out.println("Error in returnCode of "+Table+""+ex);
         }
         return Code;
     }
     
    /** @ Method called on click of Add Button to generate the next code from the Table SemaPhores
     *  by passing particular TableName 
     */
    private void generateCode(String TableName,javax.swing.JTextField jTxtCode){
     try{
         accessDB();
         String ss = "SELECT * FROM SemaPhores WHERE TableName = '"+TableName+"'";
         ResultSet res = stat.executeQuery(ss);
         res.next();
         ctr = Integer.parseInt(res.getString(4));
         if(ctr < 10)
            jTxtCode.setText(res.getString(3)+"00"+ctr);  
         else if(ctr >= 10 && ctr < 100)
            jTxtCode.setText(res.getString(3)+"0"+ctr); 
         else if(ctr >= 100 && ctr < 1000)
            jTxtCode.setText(res.getString(3)+""+ctr);    
         con.close();
     }
     catch(Exception e){        
         System.out.println("Error in generateCode"+e+"\n2080");
     }
   }
 
   /** @ Method called on click of Save Button to update the ctr++ in the Table SemaPhores
    *  by passing particular TableName 
    */ 
   private void updateCode(String TableName){
      try{
          accessDB();
          ctr++;
          String ss1 = "UPDATE SemaPhores SET  MaxCtr = "+ctr+" WHERE TableName ='"+TableName+"'";
          stat.executeUpdate(ss1);          
          con.close();
      } 
      catch(Exception e){
         System.out.println("Error in updateCode"+e+"\n2773");
      }
    }
    
    /** @ Method to check the Masters Table for null entry */
    private void checkForEmptyDataBase(String table){        
        try{
            accessDB();
            String ss = "SELECT * FROM "+table;            
            ResultSet res = stat.executeQuery(ss);            
            if(!res.next()){
                JOptionPane.showMessageDialog(this," Table "+table+" in the Database has no entry.\n Make suitable entries in the Table to run this Form.  ","From Database:",JOptionPane.ERROR_MESSAGE);                    
                 
            }
            con.close();
        }
        catch(Exception e){
        } 
    }    
    
    /** @ Method to display the data in the jTable in jPnlGRNView */
    private void displayData(){        
        try{            
            accessDB( );            
            if(jCboCOCustomer.getSelectedIndex()==0 && jCboCOGroupH.getSelectedIndex()==0  ){
                String ss1="SELECT COUNT(*) FROM CO_H";               
                ResultSet res1 = stat.executeQuery(ss1);                
                res1.next();
                try{
                    rowSpecific=Integer.parseInt(res1.getString(1));
                }//end try
                catch(Exception e){
                    System.out.println("Error in displayData rowSpecific\t"+e);
                }
                
                dataSpecific= new Object[rowSpecific][colsShownH.length];
                //String ss2="SELECT GRN_No,GRN_Date,Supplier_Id,Cancelled FROM GRN_M ORDER BY GRN_Date";
                String ss2="SELECT CO_H.CO_No,CO_H.CO_Date,CustMaster.CustName,CO_H.NetTotal,CO_H.Cancelled FROM CO_H,CustMaster where CO_H.Cust_Code=CustMaster.CustCode ORDER BY CO_H.CO_Date";
                ResultSet res2 = stat.executeQuery(ss2);
                
                for(i=0;res2.next();i++)
                    for(j=0;j<colsShownH.length;j++){                     
                        dataSpecific[i][j]=res2.getString(j+1); 
                        System.out.println(dataSpecific[i][j]);
                    }
            }          
            else if(jCboCOGroupH.getSelectedIndex()>0 && jCboCOCustomer.getSelectedIndex()==0 ){
                
                String ss=" SELECT * FROM CO_H WHERE CO_GroupID = (SELECT CO_Grp_ID FROM CO_Grp WHERE CO_Grp_Name = '" + jCboCOGroupH.getSelectedItem()+"')";
                ResultSet res = stat.executeQuery(ss);                
                if(!res.next()){
                    JOptionPane.showMessageDialog(this,"Group '"+ jCboCOGroupH.getSelectedItem() +"' is currently not there in CO.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                    jCboCOGroupH.setSelectedIndex(0);
                    displayData();
                }                
                else{
                    GroupID=true;
                    customer = false;
                    String ss1="SELECT COUNT (*) FROM CO_H WHERE CO_GroupID = (SELECT CO_Grp_ID FROM CO_Grp WHERE CO_Grp_Name = '" + jCboCOGroupH.getSelectedItem()+"')";
                    ResultSet res1 = stat.executeQuery(ss1);
                    
                    res1.next();
                    try{
                        rowSpecific=Integer.parseInt(res1.getString(1));
                    }//end try
                    catch(Exception e){
                        System.out.println("Error in displayData rowSpecific 1"+e);
                    }//end catch
                String ss2 = "SELECT CO_H.CO_No,CO_H.CO_Date,CustMaster.CustName,CO_H.NetTotal,CO_H.Cancelled FROM CO_H,CustMaster WHERE CO_H.Cust_Code=CustMaster.CustCode and CO_H.CO_GroupID = (SELECT CO_Grp_ID FROM CO_Grp WHERE CO_Grp_Name = '" + jCboCOGroupH.getSelectedItem()+"' ) ORDER BY CO_H.CO_Date";
                    ResultSet res2 = stat.executeQuery(ss2);
                    dataSpecific = new Object[rowSpecific][colsShownH.length];
                    rowShown=rowSpecific;
                    for(i=0;res2.next();i++)
                        for(j=0;j<colsShownH.length;j++)
                            dataSpecific[i][j]=res2.getString(j+1);
                }//end else
            }//end else if  
            
            else if(jCboCOCustomer.getSelectedIndex()>0 && jCboCOGroupH.getSelectedIndex()==0  ){                
                String ss=" SELECT * FROM CO_H WHERE Cust_Code = (SELECT CustCode FROM CustMaster WHERE CustName = '" + jCboCOCustomer.getSelectedItem()+"')";
                ResultSet res = stat.executeQuery(ss);                               
                if(!res.next()){
                    JOptionPane.showMessageDialog(this,"The Customer Name  '"+ jCboCOCustomer.getSelectedItem() +"'  is currently not there in CO.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                    jCboCOCustomer.setSelectedIndex(0);
                    displayData();
                }                
                else{
                    GroupID=false;
                    customer = true;
                    String ss1="SELECT COUNT (*) FROM CO_H WHERE Cust_Code = (SELECT CustCode FROM CustMaster WHERE CustName = '" + jCboCOCustomer.getSelectedItem()+"')";
                    ResultSet res1 = stat.executeQuery(ss1);
                    System.out.println("SEGMENT   A  2 ");
                    res1.next();
                    try{
                        rowSpecific=Integer.parseInt(res1.getString(1));
                    }//end try
                    catch(Exception e){
                        System.out.println("Error in displayData rowSpecific 2"+e);
                    }//end catch
                    String ss2 = "SELECT CO_H.CO_No,CO_H.CO_Date,CustMaster.CustName,CO_H.NetTotal,CO_H.Cancelled FROM CO_H,CustMaster WHERE CO_H.Cust_Code=CustMaster.CustCode and CO_H.Cust_Code = (SELECT CustCode FROM CustMaster WHERE CustName = '" + jCboCOCustomer.getSelectedItem()+"' ) ORDER BY CO_H.CO_Date";
                    ResultSet res2 = stat.executeQuery(ss2);
                    System.out.println("SEGMENT   A  3");
                    dataSpecific = new Object[rowSpecific][colsShownH.length];
                    rowShown=rowSpecific;
                    for(i=0;res2.next();i++)
                        for(j=0;j<colsShownH.length;j++)
                            dataSpecific[i][j]=res2.getString(j+1);
                }//end else
            }//end else if
            
            else{//main else
                System.out.println("SEGMENT   B  0");
                
                if(GroupID== true && customer == false){//if Customer 
                    
                    System.out.println("SEGMENT   B  0.1");
                    String ss=" SELECT * FROM CO_H WHERE Cust_Code = (SELECT CustCode FROM CustMaster WHERE CustName = '" + jCboCOCustomer.getSelectedItem()+"' )";
                    ResultSet res = stat.executeQuery(ss);
                    System.out.println("SEGMENT   B  1");
                    
                    if(!res.next()){
                        JOptionPane.showMessageDialog(this,"The Customer Name '"+ jCboCOCustomer.getSelectedItem() +"'  is currently not there in the CO.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                        jCboCOCustomer.setSelectedIndex(0);
                        displayData();
                    }
                    else{
                        String ss1="SELECT COUNT (*) FROM CO_H WHERE Cust_Code = (SELECT CustCode FROM CustMaster WHERE CustName = '" + jCboCOCustomer.getSelectedItem()+"' )  AND  CO_GroupID = (SELECT CO_Grp_ID FROM CO_Grp WHERE CO_Grp_Name = '" + jCboCOGroupH.getSelectedItem()+"')";
                        ResultSet res1 = stat.executeQuery(ss1);
                        System.out.println("SEGMENT   B  2 ");
                        res1.next();
                        try{
                            rowSpecific=Integer.parseInt(res1.getString(1));
                        }//end try
                        catch(Exception e){
                            System.out.println("Error in displayData rowSpecific 3"+e);
                        }//end catch
                        
                        if(rowSpecific==0){
                            JOptionPane.showMessageDialog(this,"There are no items corresponding to your selection in the CO.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                            jCboCOCustomer.setSelectedIndex(0);
                            displayData();
                            GroupID=true;
                            customer=false;
                            
                        }//end if(rowSpecific==0)
                        else{// else (rowSpecific==0)
                            String ss2 = "SELECT CO_H.CO_No,CO_H.CO_Date,CustMaster.CustName,CO_H.NetTotal,CO_H.Cancelled FROM CO_H,CustMaster WHERE CO_H.Cust_Code=CustMaster.CustCode and CO_H.CustCode = (SELECT CustCode FROM CustMaster WHERE CustName = '" + jCboCOCustomer.getSelectedItem()+"' )  AND  CO_H.CO_GroupID = (SELECT CO_Grp_ID FROM CO_Grp WHERE CO_Grp_Name = '" + jCboCOGroupH.getSelectedItem()+"')";
                            ResultSet res2 = stat.executeQuery(ss2);
                            System.out.println("SEGMENT   B  3");
                            dataSpecific = new Object[rowSpecific][colsShownH.length];
                            rowShown=rowSpecific;
                            for(i=0;res2.next();i++)
                                for(j=0;j<colsShownH.length;j++)
                                    dataSpecific[i][j]=res2.getString(j+1);
                        }// else (rowSpecific==0)
                        
                    }
                }//end if store                
                
                else if (GroupID==false && customer==true){//else CO Group
                    
                    String ss=" SELECT * FROM CO_H WHERE CO_GroupID = (SELECT CO_Grp_ID FROM CO_Grp WHERE CO_Grp_Name = '" + jCboCOGroupH.getSelectedItem()+"')";
                    ResultSet res = stat.executeQuery(ss);
                    
                    if(!res.next()){
                        JOptionPane.showMessageDialog(this,"The CO Group '"+ jCboCOGroupH.getSelectedItem() +"'  is currently not there in the CO.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                        jCboCOGroupH.setSelectedIndex(0);
                        displayData();
                    }
                    else{
                        String ss1="SELECT COUNT (*) FROM CO_H WHERE CustCode = (SELECT CustCode FROM CustMaster WHERE CustName = '" + jCboCOCustomer.getSelectedItem()+"' )  AND  CO_GroupID = (SELECT CO_Grp_ID FROM CO_Grp WHERE CO_Grp_Name = '" + jCboCOGroupH.getSelectedItem()+"')";
                        ResultSet res1 = stat.executeQuery(ss1);
                        System.out.println("SEGMENT   B  2 ");
                        res1.next();
                        try{
                            rowSpecific=Integer.parseInt(res1.getString(1));
                        }//end try
                        catch(Exception e){
                            System.out.println("Error in displayData rowSpecific 4"+e);
                        }//end catch
                        
                        System.out.println("LINE   778");
                        if(rowSpecific==0){
                            JOptionPane.showMessageDialog(this,"There are no items corresponding to your selection in the CO.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                            jCboCOGroupH.setSelectedIndex(0);
                            System.out.println("LINE   782");
                            displayData();
                            GroupID=false;
                            customer=true;
                        }//end if(rowSpecific==0)
                        else{// else (rowSpecific==0)
                            
                            String ss2 = "SELECT CO_H.CO_No,CO_H.CO_Date,CustMaster.CustName,CO_H.NetTotal,CO_H.CO.Cancelled FROM CO_H,CustMaster WHERE CO_H.CustCode=CustMaster.CustCode and CO_H.CustCode = (SELECT CustCode FROM CustMaster WHERE CustName = '" + jCboCOCustomer.getSelectedItem()+"' )  AND  CO_H.CO_GroupID = (SELECT CO_Grp_ID FROM CO_Grp WHERE CO_Grp_Name = '" + jCboCOGroupH.getSelectedItem()+"')";
                            ResultSet res2 = stat.executeQuery(ss2);
                            System.out.println("SEGMENT   B  3");
                            dataSpecific = new Object[rowSpecific][colsShownH.length];
                            rowShown=rowSpecific;
                            for(i=0;res2.next();i++)
                                for(j=0;j<colsShownH.length;j++)
                                    dataSpecific[i][j]=res2.getString(j+1);
                        }
                        
                    }
                }
            }
            
            
            con.close();
            
            if(rowSpecific!=0)
                dateConstraint(dataSpecific,rowSpecific);
            
            rowShown=rowDateSpecific;
            
            dataShown = new Object[rowShown][colsShownH.length];
            
            if(rowSpecific!=0)
                dataShown=dataDateSpecific;
            
            for(int i=0;i<rowSpecific;i++){
              dataShown[i][3] = new Double(""+dataShown[i][3]  );                   
            }
           
            jTblCOHeader.setModel(new javax.swing.table.DefaultTableModel(dataShown,colsShownH)
            {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        
            h=jTblCOHeader.getRowHeight()*(rowShown+1);
            if(h<320)
                jScrollPane1.setSize(580,h+5);
            else
                jScrollPane1.setSize(580,320);
            
        }      
        catch(Exception ex){
            System.out.println("Error in displayData"+ex);
            JOptionPane.showMessageDialog(this,"Please check for the Database Exclusively open","Sorry!",JOptionPane.INFORMATION_MESSAGE); 
        }
    }
    
     /** @ Method to validate the entry in the Details jTable in the jPnlGRNAdd */ 
    private void checkDetailsValidation(){        
        detailsAreValid=false;
        initializeDate();
           System.out.println(curDate);
        
        if(jCboCOItemName.getSelectedIndex()==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Select an item from the Item List.","Error!",JOptionPane.ERROR_MESSAGE);
            jCboCOItemName.requestFocus();
        }           
        else if(BulkQty==0 && PackQty==0 && LooseQty==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"All three Bulk Qty,Pack Qty and Loose Qty Field cannot be 0!","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtCOLooseQty.requestFocus();
        }
        
        else if(BulkSP==0 && PackSP==0 && LooseSP==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"All three Bulk Selling Price,Pack Selling Price and Loose Selling Price  field cannot be 0!","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtCOLooseSP.requestFocus();
        } 
        else if(BulkQty==0 && BulkSP!=0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Bulk Qty field cannot be 0 when the Bulk Selling Price has a value","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtCOBulkQty.requestFocus();
        }        
        else if(PackQty==0 && PackSP!=0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Pack Qty field cannot be 0 when the Pack Selling Price has a value","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtCOPackQty.requestFocus();
        }
        else if(LooseQty==0 && LooseSP!=0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Loose Qty field cannot be 0 when the Loose Selling Price has a value","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtCOLooseQty.requestFocus();
        }       
        else if(BulkQty!=0 && BulkSP==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Bulk Selling Price field cannot be 0 when the Bulk Qty has a value","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtCOBulkSP.requestFocus();
        }        
        else if(PackQty!=0 && PackSP==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Pack Selling Price field cannot be 0 when the Pack Qty has a value","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtCOPackSP.requestFocus();
        }
        else if(LooseQty!=0 && LooseSP==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Loose Selling Price field cannot be 0 when the Loose Qty has a value","Error!",JOptionPane.ERROR_MESSAGE);
            jTxtCOLooseSP.requestFocus();
        }       
        else {
            detailsAreValid=true;            
        } 
    }
    
      /** @ Method to validate the entry in the Header jTable in the jPnlGRNAdd */ 
     private void checkHeaderValidation(){
        headerIsValid=false;        
            String Code=jTxtCOCode.getText().trim(); 
        initializeDate();
        dateCheck(jCboCODateYYYY,jCboCODateMM,jCboCODateDD,"CO Date");
                if(!dateCheckRequired)  
                    dateCheck(jCboCOADateYYYY,jCboCOADateMM,jCboCOADateDD,"Acceptance Date"); 
                if(!dateCheckRequired)  
                    dateCheck(jCboCOPDateYYYY,jCboCOPDateMM,jCboCOPDateDD,"PO Date");
                if(!dateCheckRequired)  
                    dateCheck(jCboCODDateYYYY,jCboCODDateMM,jCboCODDateDD,"Delivery Date");
      if(!dateCheckRequired)        
            if(Code.equals("")){
                JOptionPane.showMessageDialog(this," The Code-field is empty ","Error!",JOptionPane.ERROR_MESSAGE);
                jTxtCOCode.setText("");
                jTxtCOCode.requestFocus();
                headerIsValid=false;
            } 
            else if(jTxtCOPONo.getText().equals("")){
                JOptionPane.showMessageDialog(this,"Enter Customer Purchase Order Reference No.!","Error!",JOptionPane.ERROR_MESSAGE);
                jTxtCOPONo.requestFocus();
                headerIsValid=false;
            }        
            else if(jCboCOGroup.getSelectedIndex()==0){
                JOptionPane.showMessageDialog(this,"Select Customer Group!","Error!",JOptionPane.ERROR_MESSAGE);
                jCboCOGroup.requestFocus();
                headerIsValid=false;
            }
            else if(jCboCOCustomerName.getSelectedIndex()==0){
                JOptionPane.showMessageDialog(this,"Select Customer Name!","Error!",JOptionPane.ERROR_MESSAGE);
                jCboCOCustomerName.requestFocus();
                headerIsValid=false;
            }
            else if(jCboCOAuthBy.getSelectedIndex()==0){
                JOptionPane.showMessageDialog(this,"Select Authorized By!","Error!",JOptionPane.ERROR_MESSAGE);
                jCboCOAuthBy.requestFocus();
                headerIsValid=false;
            }            
            else if(rowTblDetails==0){
                JOptionPane.showMessageDialog(this,"The Details Table Should not be empty","Error!",JOptionPane.ERROR_MESSAGE);
                headerIsValid=false;
            }

            else{
                headerIsValid=true;
            }       
      else{
          dateCheckRequired=false;
      }
    }
     
    /** @ Method to initialize the Date entered in the GRNDate,BillDate and ExpiryDate */   
    public void initializeDate(){
        int cboCOYear=Integer.parseInt(String.valueOf(jCboCODateYYYY.getSelectedItem()));
        int cboCODate=Integer.parseInt(String.valueOf(jCboCODateDD.getSelectedItem()));
        int cboCOMonth=Integer.parseInt(String.valueOf(jCboCODateMM.getSelectedItem()));
        
          CODate.setDate(cboCODate);
          CODate.setMonth(cboCOMonth-1);
          CODate.setYear(cboCOYear-1900);
        int cboAYear=Integer.parseInt(String.valueOf(jCboCOADateYYYY.getSelectedItem()));
        int cboADate=Integer.parseInt(String.valueOf(jCboCOADateDD.getSelectedItem()));
        int cboAMonth=Integer.parseInt(String.valueOf(jCboCOADateMM.getSelectedItem()));
        
            AccpDate.setDate(cboADate);
            AccpDate.setMonth(cboAMonth-1);
            AccpDate.setYear(cboAYear-1900);
        int cboPYear=Integer.parseInt(String.valueOf(jCboCOPDateYYYY.getSelectedItem()));
        int cboPDate=Integer.parseInt(String.valueOf(jCboCOPDateDD.getSelectedItem()));
        int cboPMonth=Integer.parseInt(String.valueOf(jCboCOPDateMM.getSelectedItem()));
        
            PODate.setDate(cboPDate);
            PODate.setMonth(cboPMonth-1);
            PODate.setYear(cboPYear-1900);  
            
        int cboDYear=Integer.parseInt(String.valueOf(jCboCODDateYYYY.getSelectedItem()));
        int cboDDate=Integer.parseInt(String.valueOf(jCboCODDateDD.getSelectedItem()));
        int cboDMonth=Integer.parseInt(String.valueOf(jCboCODDateMM.getSelectedItem()));
        
            DELDate.setDate(cboDDate);
            DELDate.setMonth(cboDMonth-1);
            DELDate.setYear(cboDYear-1900);
            
           curDate.setDate(curDate.getDate());
           curDate.setMonth(curDate.getMonth());
           curDate.setYear(curDate.getYear());
    } 
    
     /** @ Method to Validate the Date entered and make sure to enter the valid Date */
     public void dateCheck(javax.swing.JComboBox jCboYY,javax.swing.JComboBox jCboMM,javax.swing.JComboBox jCboDD,String Date){         
                 
        if( jCboMM.getSelectedIndex()==1 && Integer.parseInt(""+jCboYY.getSelectedItem())%4==0 &&  Integer.parseInt(""+jCboDD.getSelectedItem())>29){
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }
        else if( jCboMM.getSelectedIndex()==1 && Integer.parseInt(""+jCboYY.getSelectedItem())%4!=0 && Integer.parseInt(""+jCboDD.getSelectedItem())>28){
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }
        else if( jCboMM.getSelectedIndex()==3 && Integer.parseInt(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Integer.parseInt(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else if( jCboMM.getSelectedIndex()==5 && Integer.parseInt(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Integer.parseInt(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else if( jCboMM.getSelectedIndex()==8 && Integer.parseInt(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Integer.parseInt(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else if( jCboMM.getSelectedIndex()==10 && Integer.parseInt(""+jCboDD.getSelectedItem())>30){
            System.out.println(jCboMM.getSelectedIndex());
            System.out.println(Integer.parseInt(""+jCboDD.getSelectedItem()));
            JOptionPane.showMessageDialog(this,Date+" Not a valid Date","Date",JOptionPane.INFORMATION_MESSAGE);
            dateCheckRequired=true;
            jCboDD.requestFocus();
        }  
        else {            
            dateCheckRequired=false;
        }
    }
    
     /** @ Method to display the data in the jTable in jPnlCOAdd */ 
    private void displayDetailsTbl(){ 
        if(rowTblDetails == 0)
            jTxtCOSlNo.setText(""+"1");
        
        dataDetailsShown = new Object[rowTblDetails][colAdd.length];
        
        for(i=0;i<(rowTblDetails - 1);i++)
            for(j=0;j<colAdd.length;j++)
                dataDetailsShown[i][j] = dataAdd[i][j];        
        
        if(rowTblDetails != 0 ){           
            dataDetailsShown[rowTblDetails - 1][0] = jTxtCOSlNo.getText();
            dataDetailsShown[rowTblDetails - 1][1] = ""+jCboCOItemName.getSelectedItem();
            dataDetailsShown[rowTblDetails - 1][2] = jTxtCOLooseQty.getText() ;
            dataDetailsShown[rowTblDetails - 1][3] = jTxtCOLooseSP.getText();
            dataDetailsShown[rowTblDetails - 1][4] = jTxtCOPackQty.getText();
            dataDetailsShown[rowTblDetails - 1][5] = jTxtCOPackSP.getText();
            dataDetailsShown[rowTblDetails - 1][6] = jTxtCOBulkQty.getText();
            dataDetailsShown[rowTblDetails - 1][7] = jTxtCOBulkSP.getText();
            dataDetailsShown[rowTblDetails - 1][8] = ""+jCboCODiscountDetail.getSelectedItem();
            dataDetailsShown[rowTblDetails - 1][9] = jTxtCODiscAmtDetail.getText();
            dataDetailsShown[rowTblDetails - 1][10] = ""+jCboCOTaxDetail.getSelectedItem();
            dataDetailsShown[rowTblDetails - 1][11] = jTxtCOTaxAmtDetail.getText();
            dataDetailsShown[rowTblDetails - 1][12] = jTxtCONetPrice.getText();           
        }        
        dataAdd=dataDetailsShown ;
        coDetailsModel();        
    }
        
    /** @ Method to set the Model of Details jTable in jPnlCOAdd */  
    public void coDetailsModel(){       
     for(int i=0;i<rowTblDetails;i++){
          dataDetailsShown[i][2] = new Long(""+dataDetailsShown[i][2]  );
          dataDetailsShown[i][3] = new Double(""+dataDetailsShown[i][3]  );
          dataDetailsShown[i][4] = new Long(""+dataDetailsShown[i][4]  );
          dataDetailsShown[i][5] = new Double(""+dataDetailsShown[i][5]  );
          dataDetailsShown[i][6] = new Long(""+dataDetailsShown[i][6]  );
          dataDetailsShown[i][7] = new Double(""+dataDetailsShown[i][7]  );
          dataDetailsShown[i][9] = new Double(""+dataDetailsShown[i][9]  );
          dataDetailsShown[i][11] = new Double(""+dataDetailsShown[i][11]  );
          dataDetailsShown[i][12] = new Double(""+dataDetailsShown[i][12]  );         
     }
     
     jTblCODetails.setModel(new javax.swing.table.DefaultTableModel(
            dataDetailsShown ,colAdd
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Long.class, java.lang.Double.class, java.lang.Long.class, java.lang.Double.class, java.lang.Long.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    } //end of grnDetailModel
    
     /** @ Method used in displayData method to display the data with in (fromDate and toDate)  */
     private void dateConstraint(Object[][] raw,int row){
        
        int frDD=Integer.parseInt( jCboCOFromDD.getSelectedItem().toString() );
        int  frMM=Integer.parseInt( jCboCOFromMM.getSelectedItem().toString() )-1;
        int frYY=Integer.parseInt( jCboCOFromYYYY.getSelectedItem().toString() )-1900;
        
        int toDD=Integer.parseInt( jCboCOToDD.getSelectedItem().toString() );
        int toMM=Integer.parseInt( jCboCOToMM.getSelectedItem().toString() )-1;
        int toYY=Integer.parseInt( jCboCOToYYYY.getSelectedItem().toString() )-1900;
        
        fromDate = new java.util.Date(frYY,frMM,frDD);
        toDate = new java.util.Date(toYY,toMM,toDD);
        rowDateSpecific=0;
        
        Object temp[][] = new Object[row][colsShownH.length];
        
        boolean rangeMatching=false;
        for(i=0;i<row;i++){
            int s[] = new int[3];
            StringTokenizer st = new StringTokenizer(raw[i][1].toString() , "/");
            int k=0;
            while( st.hasMoreTokens() ){
                s[k]=Integer.parseInt( st.nextToken() );
                k++;
            }//end while
            java.util.Date dataDate = new java.util.Date(s[2]-1900,s[1]-1,s[0]);
            if(fromDate.compareTo(dataDate)<=0 && toDate.compareTo(dataDate)>=0){//YYif
                for(j=0;j<5;j++){
                    temp[rowDateSpecific][j]=raw[i][j];
                    rangeMatching=true;
                }
                rowDateSpecific++;                
            }//end YYif            
        }//end for
                
        if(!rangeMatching){
            
            if(jCboCOFromYYYY.getSelectedIndex()!=0)
                jCboCOFromYYYY.setSelectedItem("1950");
            else
                jCboCOToYYYY.setSelectedItem("2100");
            
            jCboCOToMM.setSelectedItem("12");
            jCboCOFromMM.setSelectedItem("01");
            jCboCOFromDD.setSelectedItem("01");
            jCboCOToDD.setSelectedItem("31");
            JOptionPane.showMessageDialog(this,"No items were found corresponding to your date-limit.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
            displayData();
        }//*/
        else{
            
            dataDateSpecific = new Object[rowDateSpecific][colsShownH.length];
            dataDateSpecific=temp;
        }       
    }
    
     /** @ Method to set the Header fields to intial settings in jPnlGRNAdd, called on click of Add Button*/
    public void resetHeader(){
       // jTxtGRNCode.setText("") ;        
        jCboCOCustomerName.setSelectedIndex(0);
        jTxtCOPONo.setText("");
        jCboCOAuthBy.setSelectedIndex(0);
        jCboCODiscount.setSelectedIndex(0);
        jCboCOTax.setSelectedIndex(0);
        jCboCOGroup.setSelectedIndex(0);                
        jTxtCOMisc.setText(""+0);
        jTxtAreaCOTerms.setText("");
        jTxtCOGrandTot.setText("0");
        jTxtCONetTot.setText("0");
        jTxtCODiscAmt.setText("0");
        jTxtCOTaxAmt.setText("0");          
        jCboCODateDD.setSelectedIndex(curDate.getDate()-1);
        jCboCODateMM.setSelectedIndex(curDate.getMonth());
        jCboCODateYYYY.setSelectedIndex( curDate.getYear()-50 );
        jCboCOPDateDD.setSelectedIndex(curDate.getDate()-1);
        jCboCOPDateMM.setSelectedIndex(curDate.getMonth());
        jCboCOPDateYYYY.setSelectedIndex( curDate.getYear()-50 );
        jCboCOADateDD.setSelectedIndex(curDate.getDate()-1);
        jCboCOADateMM.setSelectedIndex(curDate.getMonth());
        jCboCOADateYYYY.setSelectedIndex( curDate.getYear()-50 );
        jCboCODDateDD.setSelectedIndex(curDate.getDate()-1);
        jCboCODDateMM.setSelectedIndex(curDate.getMonth());
        jCboCODDateYYYY.setSelectedIndex( curDate.getYear()-50 );
                
    }
    
    /** @ Method to set the Detail fields to intial settings in jPnlCOAdd, called on 
     *  click of AddItem Button and SaveEdit
     */
    public void resetDetails(){
        jCboCOItemName.setSelectedIndex(0);
        jTxtCOBulkQty.setText("0");
        jTxtCOPackQty.setText("0");
        jTxtCOLooseQty.setText("0");        
        jTxtCOBulkSP.setText("0");
        jTxtCOPackSP.setText("0");
        jTxtCOLooseSP.setText("0");        
        jCboCODiscountDetail.setSelectedIndex(0);
        jCboCOTaxDetail.setSelectedIndex(0);
        jTxtCODiscAmtDetail.setText("0");
        jTxtCOTaxAmtDetail.setText("0");        
        jTxtCONetPrice.setText("0");        
        BulkQty=0;PackQty=0;LooseQty=0;BulkSP=0;PackSP=0;LooseSP=0;NetPrice=0;        
    }
    
     /** @ Method to Dis-enable the Header Field for Non-editing*/
     private void headerUnEditable(){
        jCboCODateDD.setEnabled(false);     jCboCODateMM.setEnabled(false);
        jCboCODateYYYY.setEnabled(false);   jCboCOCustomerName.setEnabled(false);
        jTxtCOPONo.setEnabled(false);       
        jCboCODDateDD.setEnabled(false);    jCboCOADateDD.setEnabled(false);
        jCboCODDateMM.setEnabled(false);    jCboCOADateMM.setEnabled(false);    
        jCboCODDateYYYY.setEnabled(false);  jCboCOADateYYYY.setEnabled(false);
        jCboCOGroup.setEnabled(false);      jTxtCOCode.setEnabled(false);  
        jCboCODiscount.setEnabled(false);   jCboCOTax.setEnabled(false);
        jCboCOAuthBy.setEnabled(false);     jTxtAreaCOTerms.setEnabled(false);              
        jTxtCOMisc.setEnabled(false);       jCboCOPDateYYYY.setEnabled(false);    
        jCboCOPDateDD.setEnabled(false);    jCboCOPDateMM.setEnabled(false);
     }
      
     /** @ Method to enable the Header Field for editing*/
     private void headerEditable(){
        jCboCODateDD.setEnabled(true);     jCboCODateMM.setEnabled(true);
        jCboCODateYYYY.setEnabled(true);   jCboCOCustomerName.setEnabled(true);
        jTxtCOPONo.setEnabled(true);       
        jCboCODDateDD.setEnabled(true);    jCboCOADateDD.setEnabled(true);
        jCboCODDateMM.setEnabled(true);    jCboCOADateMM.setEnabled(true);    
        jCboCODDateYYYY.setEnabled(true);  jCboCOADateYYYY.setEnabled(true);
        jCboCOGroup.setEnabled(true);      jTxtCOCode.setEnabled(true); 
        jCboCODiscount.setEnabled(true);   jCboCOTax.setEnabled(true);
        jCboCOAuthBy.setEnabled(true);     jTxtAreaCOTerms.setEnabled(true);              
        jTxtCOMisc.setEnabled(true);       jCboCOPDateYYYY.setEnabled(true);    
        jCboCOPDateDD.setEnabled(true);   jCboCOPDateMM.setEnabled(true);
     }
        
    /** @ Method called on click of Modify Button*/
    public void modify(){                      
        ModFlag=true;        
        if(  rowSpecific==0   )
            JOptionPane.showMessageDialog(this," The Database is currently empty.","Sorry!",JOptionPane.ERROR_MESSAGE); 
        else if(jTblCOHeader.getSelectedRow()==-1){
            JOptionPane.showMessageDialog(this," Select a row in the Table to modify","Sorry!",JOptionPane.ERROR_MESSAGE); 
            jTblCOHeader.requestFocus();
        }
        else if(clickH){ 
           try{
                if(dataDateSpecific[selrow][4].equals("N")){
                    accessDB();
                    fillCOAddHeader();            
                    fillCOAddDetail();      
                    jBtnCOAddItem.setVisible(true);
                    jBtnCOEditItem.setVisible(true);              
                    jBtnCOFinish.setVisible(true);
                    jBtnCORemoveItem.setVisible(true);                
                    jPnlCOView.setVisible(false);
                    jPnlCOAdd.setVisible(true);
                    jBtnCOEditItem.setEnabled(true);
                    jBtnCOSave.setEnabled(false);
                    jBtnCOBack.setEnabled(true);
                    jBtnCOSaveEdit.setVisible(false);
                    jBtnCOFinish.setEnabled(false);
                   if(rowTblDetails<2) 
                     jBtnCORemoveItem.setEnabled(false);
                   else 
                     jBtnCORemoveItem.setEnabled(true);

                    jBtnCOAddItem.setEnabled(true);
                    jTblCODetails.requestFocus();
                    con.close();
                }
                else{                    
                    JOptionPane.showMessageDialog(this,"Cancelled CO cannot be modified","Sorry!",JOptionPane.ERROR_MESSAGE); 
                }
           }
           catch(Exception ex){
                System.out.println("Error in Modify "+ex);
                //JOptionPane.showMessageDialog(this,"Please check for the Database Exclusively open","Sorry!",JOptionPane.ERROR_MESSAGE); 
           }        
       }
    }
    
     /** Method to fill the Header fields in jPnlCOAdd from the Corresponding Table and 
      *  this method is called in modify Method(above)
      */
     public void fillCOAddHeader(){
         try{                
                String addCustomer="",addAuthBy="",addGroup="";
                String TableHeader = "SELECT * FROM CO_H WHERE CO_No = '"+dataDateSpecific[selrow][0]+"'";
                ResultSet res = stat.executeQuery(TableHeader);
                res.next() ;       
                   addGroup = res.getString(2);  addCustomer=res.getString(3);                       
                   jTxtCOCode.setText(res.getString(4));                   
                   assignDate(res.getString(5),jCboCODateDD,jCboCODateMM,jCboCODateYYYY);
                   assignDate(res.getString(6),jCboCOADateDD,jCboCOADateMM,jCboCOADateYYYY);                   
                     addAuthBy = res.getString(7);                   
                   assignDate(res.getString(8),jCboCODDateDD,jCboCODDateMM,jCboCODDateYYYY);
                   jTxtCOPONo.setText(res.getString(9));
                   assignDate(res.getString(10),jCboCOPDateDD,jCboCOPDateMM,jCboCOPDateYYYY);  
                   jTxtAreaCOTerms.setText(res.getString(11));
                   jTxtCOMisc.setText(res.getString(12));
                      String Disc=res.getString(13);
                   jTxtCODiscAmt.setText(res.getString(14));
                      String Tax=res.getString(15);
                   jTxtCOTaxAmt.setText(res.getString(16));
                   jTxtCOGrandTot.setText(res.getString(17));
                   jTxtCONetTot.setText(res.getString(18));
                   AllowTax=true; AllowDis=true;    
                   System.out.println(jTxtCODiscAmt.getText());
                        if(Disc.equals("000"))
                            jCboCODiscount.setSelectedIndex(0) ;                            
                        else{
                            ResultSet resDNameValue=stat.executeQuery("Select DM_Name,DM_Value from DiscountMaster where DM_ID='"+Disc+"'");
                            resDNameValue.next();
                            String DiscNameValue=resDNameValue.getString(1)+"-"+resDNameValue.getString(2)+"%";                            
                            jCboCODiscount.setSelectedItem(DiscNameValue);
                        }
                        
                        if(Tax.equals("000"))
                            jCboCOTax.setSelectedIndex(0) ;
                        else{
                            ResultSet resTNameValue=stat.executeQuery("Select TaxDesc,Percentage from TaxMaster where TaxCode='"+Tax+"'");
                            resTNameValue.next();
                            String TaxNameValue=resTNameValue.getString(1)+"-"+resTNameValue.getString(2)+"%";                            
                            jCboCOTax.setSelectedItem(TaxNameValue);                            
                        }
                        
                   AllowTax=false; AllowDis=false;
                String Cname=returnCode("CustMaster","CustName","Custcode",addCustomer);
                jCboCOCustomerName.setSelectedItem(Cname);
                
                String Group=returnCode("CO_Grp","CO_Grp_Name","CO_Grp_ID",addGroup);
                jCboCOGroup.setSelectedItem(Group);
                
                if(addAuthBy.trim().equals(""))
                    jCboCOAuthBy.setSelectedIndex(0);
                else{
                    String Ename=returnCode("EmployeeMaster","EmpName","EmpCode",addAuthBy);
                    jCboCOAuthBy.setSelectedItem(Ename);              
                }    
                System.out.println("Header");             
         }
         catch(Exception ex){
             System.out.println("Error in fillCOAddHeader" +ex);
             JOptionPane.showMessageDialog(this,"Please check for the Database Exclusively open","Sorry!",JOptionPane.ERROR_MESSAGE); 
         }
     }
     
     /** @ Method to fill the Detail fields in jPnlCOAdd from the Corresponding Table and 
      *  this method is called in modify Method(above)
      */
     public void fillCOAddDetail(){
       try
       {
         int CountOfTableDetails=0;         
         int colCount=0;
         String NoOfTableDetails=" SELECT COUNT(*) FROM CO_D WHERE CO_No = '"+dataDateSpecific[selrow][0]+"'";
         ResultSet resNTableDetails =   stat.executeQuery(NoOfTableDetails); 
         resNTableDetails.next(); 
          try{
            CountOfTableDetails=Integer.parseInt(resNTableDetails.getString(1));
          }//end try
          catch(Exception e){
             System.out.println("Error in fillCOAddDetail CountOfTableDetails "+e);
          }//end catch*/
         System.out.println(CountOfTableDetails);
         if(CountOfTableDetails>=1){
            
                    rowTblDetails=CountOfTableDetails;
                    initialRowsInDetTbl = rowTblDetails;
             
            dataDetailsShown = new Object[rowTblDetails][colAdd.length];                     
            String ItemCode[]= new String[rowTblDetails];
            String DisCode[] = new String[rowTblDetails];
            String TaxCode[] = new String[rowTblDetails];            
            String TableDetails = "SELECT * FROM CO_D WHERE CO_No = '"+dataDateSpecific[selrow][0]+"'";
            ResultSet resTableDetails=stat.executeQuery(TableDetails);
        
            for(i=0;resTableDetails.next();i++){
                  colCount=0;
                for(j=0;j<colAdd.length;j++){
                    
                    if(j==1)
                        ItemCode[i] = resTableDetails.getString(4);
                    else if(j==8)
                        DisCode[i] = resTableDetails.getString(11);                    
                    else if(j==10)
                        TaxCode[i] = resTableDetails.getString(13);
                    else
                        dataDetailsShown[i][j] = resTableDetails.getString(j+3);
                                         
                        System.out.println("dataDetailsShown["+i+"]["+j+"] = "+dataDetailsShown[i][j]);
              }  
            }
           
            for(i=0;i<rowTblDetails;i++){
                String ICode="SELECT itemName FROM Item_M WHERE itemNo = '"+ItemCode[i]+ "'";
                ResultSet resItemCode = stat.executeQuery(ICode);
                resItemCode.next();
                dataDetailsShown[i][1] =  resItemCode.getString(1);
                
                if (DisCode[i].equals("000"))
                    dataDetailsShown[i][8]="0%";
                else{
                    String DCode="SELECT DM_Name,DM_Value FROM DiscountMaster WHERE DM_ID = '"+DisCode[i]+ "'";
                    ResultSet resDCode=stat.executeQuery(DCode);
                    resDCode.next();
                    dataDetailsShown[i][8]=resDCode.getString(1)+"-"+resDCode.getString(2)+"%";
                }
                
                if (TaxCode[i].equals("000"))
                    dataDetailsShown[i][10]="0%";
                else{
                    String TCode="SELECT TaxDesc,Percentage FROM TaxMaster WHERE TaxCode = '"+TaxCode[i]+ "'";
                    ResultSet resTCode=stat.executeQuery(TCode);
                    resTCode.next();
                    dataDetailsShown[i][10]=resTCode.getString(1)+"-"+resTCode.getString(2)+"%";
                }
            }                  
         }
         else{
            JOptionPane.showMessageDialog(this,"No Details for this CO NO","CO Details",JOptionPane.INFORMATION_MESSAGE);
         }
         
         System.out.println(Integer.parseInt(dataDetailsShown[rowTblDetails-1][0].toString()));
       }
       catch(Exception ex){
              System.out.println("Errorin fillCOAddDetail"+ex); 
              System.out.println("i = "+i+"\nj = "+j);
       }
       finally{
            coDetailsModel();
            dataAdd=dataDetailsShown ;            
            jTxtCOSlNo.setText(""+(Integer.parseInt( dataDetailsShown[rowTblDetails-1][0].toString() ) + 1));
             System.out.println("After Finally");             
        }
            jPnlCOView.setVisible(false);   
            jPnlCOAdd.setVisible(true); 
            clickH=false;
            selrow=0;       
    }
      
      /** @ Method to Cancel the CO called on click of Cancel Button and to view in jPnlCOView jTable*/
     private void cancel(String TableName){
        if(clickH){
            try{
                accessDB();
                String cancelUpd = "UPDATE "+TableName+" SET Cancelled = 'Y' WHERE CO_No = '"+dataShown[selrow][0]+"'";                
                stat.executeUpdate(cancelUpd);
                con.close();
            }
            catch(Exception e){
                System.out.println(e+"\n2397");
            }
            clickH=false;
            jTblCOHeader.clearSelection();
        }
        else
            JOptionPane.showMessageDialog(this," Select from the Table to cancel the CO ","Cancel CO",JOptionPane.INFORMATION_MESSAGE);             
    }
     
       /** @ Method called on click of RemoveItem , Deletes the selected row from the Table GRN_D
     * and updates the Table Store_(Respective StoreID)
     */ 
    public void removeItem(){
        jBtnCOSave.setEnabled(false);
        RemoveItem=true;
        jBtnCOBack.setEnabled(true);  
        String ItemNoS=""; 
         if(!clickD)
            JOptionPane.showMessageDialog(this,"Select the row you want to delete.","Error!",JOptionPane.ERROR_MESSAGE);
      
         else if(clickD){//item selected from Details Table
              if(ModFlag && rowTblDetails>1){
                  int Remove=JOptionPane.showConfirmDialog(this,"Are you sure Delete a Row in the Database","Delete",JOptionPane.YES_NO_OPTION);
                   if(Remove==0){
                        try{
                             accessDB(); 
                             ItemNoS=returnCode("Item_M","itemNo","itemName",(String)dataAdd[selrowD][1]); 
                             String ss1 = "DELETE FROM CO_D WHERE CO_No = '"+jTxtCOCode.getText()+"' and Item_Code = '"+ItemNoS+ "'";                             
                             stat.executeUpdate(ss1);                             
                             con.close();
                          }
                          catch(Exception e){ 
                              System.out.println("Error in Remove Item "+e+"\t1924");
                          }
                        
                            resetDetails();
                            for(i=0;i<rowTblDetails;i++)
                                for(j=0;j<colAdd.length;j++){
                                    if( i >= selrowD && (i < rowTblDetails-1) ){
                                        if(j==0)
                                            dataAdd[i][j] ="" + (i+1);
                                        else
                                            dataAdd[i][j] = dataAdd[i+1][j];
                                    }
                                }

                            rowTblDetails --;
                            dataDetailsShown = new Object[rowTblDetails][colAdd.length];
                            for(i=0;i<rowTblDetails;i++)
                                for(j=0;j<colAdd.length;j++)
                                    dataDetailsShown[i][j] = dataAdd[i][j];
                            dataAdd=dataDetailsShown ;
                            jTxtCOSlNo.setText("" + (rowTblDetails+1));
                            coDetailsModel();

                   }//end if
                   else{
                       ;
                   }
              }//end if
              else if(!ModFlag && rowTblDetails>=1){
                  // int RemoveAdd=JOptionPane.showConfirmDialog(this,"Are you sure Delete a Row in the Database","Delete",JOptionPane.YES_NO_OPTION);
                  // if(RemoveAdd==0){
                       resetDetails();
                        for(i=0;i<rowTblDetails;i++)
                            for(j=0;j<colAdd.length;j++){
                                if( i >= selrowD && (i < rowTblDetails-1) ){
                                    if(j==0)
                                        dataAdd[i][j] ="" + (i+1);
                                    else
                                        dataAdd[i][j] = dataAdd[i+1][j];
                                }
                            }//end for

                        rowTblDetails --;
                        dataDetailsShown = new Object[rowTblDetails][colAdd.length];
                        for(i=0;i<rowTblDetails;i++)
                            for(j=0;j<colAdd.length;j++)
                                dataDetailsShown[i][j] = dataAdd[i][j];
                        dataAdd=dataDetailsShown ;
                        jTxtCOSlNo.setText("" + (rowTblDetails+1));
                        coDetailsModel();
                  // }
                 //  else {
                 //      ;
                 //  }
              }         
            
        }//end else if
         
        if(selrowD==1 && rowTblDetails==1 && ModFlag){           
            jBtnCORemoveItem.setEnabled(false);
            jBtnCOFinish.setEnabled(true);
            jBtnCOBack.setEnabled(true);
        }
        else if(selrowD==0 && rowTblDetails==0 && !ModFlag){
          // JOptionPane.showMessageDialog(this,"The CO Details Table Should Not be empty.","Error!",JOptionPane.ERROR_MESSAGE);
            jBtnCORemoveItem.setEnabled(false);
            jBtnCOFinish.setEnabled(false);
            jBtnCOBack.setEnabled(true);
        }
        jTblCODetails.clearSelection();
        clickD=false;
    }
    
    /** @ Method called on click of Edit Item, To fill the Values from the Particular Row
      *  in Details jTable to the Respective TextBox and ComboBox
      */
     private void detailsModify(){
         if(clickD){//main if]
            detailsUnEditable();
            jTxtCOSlNo.setText(""+dataDetailsShown[selrowD][0]);
            jCboCOItemName.setSelectedItem(dataDetailsShown[selrowD][1]);
            jTxtCOLooseQty.setText(""+dataDetailsShown[selrowD][2]);
            jTxtCOLooseSP.setText(""+dataDetailsShown[selrowD][3]);
            jTxtCOPackQty.setText(""+dataDetailsShown[selrowD][4]);                    
            jTxtCOPackSP.setText(""+dataDetailsShown[selrowD][5]);
            jTxtCOBulkQty.setText(""+dataDetailsShown[selrowD][6]);
            jTxtCOBulkSP.setText(""+dataDetailsShown[selrowD][7]);
            jTxtCODiscAmtDetail.setText(""+dataDetailsShown[selrowD][9]);
            jTxtCOTaxAmtDetail.setText(""+dataDetailsShown[selrowD][11]);
            jTxtCONetPrice.setText(""+dataDetailsShown[selrowD][12]); 
            try{
                BulkQty=Long.parseLong(jTxtCOBulkQty.getText());
                PackQty=Long.parseLong(jTxtCOPackQty.getText());            
                LooseQty=Long.parseLong(jTxtCOLooseQty.getText());
                BulkSP=Double.parseDouble(jTxtCOBulkSP.getText());
                PackSP=Double.parseDouble(jTxtCOPackSP.getText());            
                LooseSP=Double.parseDouble(jTxtCOLooseSP.getText());                
            }
            catch(Exception ex)
            {
                System.out.println("Error in modDetails"+ex);
            }
            
             if(dataDetailsShown[selrowD][8].equals(""+0))
                jCboCODiscountDetail.setSelectedIndex(0);
             else
               jCboCODiscountDetail.setSelectedItem(""+dataDetailsShown[selrowD][8]);
             
             if(dataDetailsShown[selrowD][9].equals(""+0))
                jCboCOTaxDetail.setSelectedIndex(0);
             else
               jCboCOTaxDetail.setSelectedItem(""+dataDetailsShown[selrowD][10]);
             
            jTxtCOBulkQty.requestFocus();
            jTxtCOBulkQty.selectAll();    
           
            jBtnCOEditItem.setVisible(false);           
            jBtnCOSave.setEnabled(false);
            jBtnCOSaveEdit.setVisible(true);
            jBtnCOFinish.setVisible(false);
            jBtnCORemoveItem.setVisible(false);
            jBtnCOAddItem.setVisible(false);   
            jBtnCOSaveEdit.setEnabled(true);
            jTblCODetails.clearSelection();
            jTblCODetails.setEnabled(false);
        }
        else{
            JOptionPane.showMessageDialog(this," Select a row from the CO Details .","No rows selected!",JOptionPane.ERROR_MESSAGE); 
            jTblCODetails.requestFocus();
            jTblCODetails.setEnabled(true);
        }
     }
     
     /** @ Method to enable the Details Field for editing*/
     private void detailsEditable(){
            jCboCOItemName.setEnabled(true);             
     }

     /** @ Method to Dis-enable the Details Field for Non-editing*/
     private void detailsUnEditable(){
            jCboCOItemName.setEnabled(false);             
     }    
     
      /** @ Method called on click of SaveEdit*/
     private void modDetails(){
       
        checkDetailsValidation();
         if(detailsAreValid){
            jBtnCOAddItem.setVisible(true);
            jBtnCOAddItem.setEnabled(true);
            jBtnCOEditItem.setVisible(true);
            jBtnCORemoveItem.setVisible(true);
            jBtnCOFinish.setVisible(true);
            if(rowTblDetails>1)
                jBtnCORemoveItem.setEnabled(true);
            else
                jBtnCORemoveItem.setEnabled(false);
            jBtnCOFinish.setEnabled(true);
            jBtnCOSaveEdit.setVisible(false);               
            fillDetailsTbl(selrowD);
            resetDetails();
            jTxtCOSlNo.setText("" + (rowTblDetails+1)); 
            coDetailsModel();
        }
      }
     
      /** @ Method called in modDetails Method above to fill the details jTable after doing some modifications*/
      private void fillDetailsTbl(int r){
       if(r==-1)
           JOptionPane.showMessageDialog(this,"Do Not Choose Item from CO Detail while Save Edit","Save Edit",JOptionPane.ERROR_MESSAGE);
       else{
        dataDetailsShown[r][0] = jTxtCOSlNo.getText();
        dataDetailsShown[r][1] =""+jCboCOItemName.getSelectedItem();       
        dataDetailsShown[r][2] = jTxtCOLooseQty.getText();
        dataDetailsShown[r][3] = jTxtCOLooseSP.getText();
        dataDetailsShown[r][4] = jTxtCOPackQty.getText(); 
        dataDetailsShown[r][5] = jTxtCOPackSP.getText();
        dataDetailsShown[r][6] = jTxtCOBulkQty.getText();
        dataDetailsShown[r][7] = jTxtCOBulkSP.getText(); 
        dataDetailsShown[r][8] = jCboCODiscountDetail.getSelectedItem();
        dataDetailsShown[r][9] = jTxtCODiscAmt.getText();
        dataDetailsShown[r][10] = jCboCOTaxDetail.getSelectedItem();
        dataDetailsShown[r][11] = jTxtCOTaxAmt.getText();
        dataDetailsShown[r][12] = jTxtCONetPrice.getText();
       }
     }
      
      /** @ Method called on click of Search Button in jPnlCOView */
     private void searchPressed() {
     if(  rowShown==0   )
            JOptionPane.showMessageDialog(this," The Database is currently empty.","Sorry!",JOptionPane.ERROR_MESSAGE);
     else{
            jPnlCOSearch.setVisible(true);
            jCboCOSearch.setSelectedIndex(0);
            jListCOSearch.setSelectedIndex(0);
            int rowIndex=searchElement(  (String)( jListCOSearch.getSelectedValue() )  ,unsorted   );
            
            // index 0 corresponds to the 1st item of combo box
            jCboCOFromDD.setEnabled(false);     jCboCOToDD.setEnabled(false);   
            jCboCOFromMM.setEnabled(false);     jCboCOToMM.setEnabled(false);
            jCboCOFromYYYY.setEnabled(false);   jCboCOToYYYY.setEnabled(false); 
            
            jCboCOGroupH.setEnabled(false);
            jCboCOCustomer.setEnabled(false);
            
            jBtnCOAdd.setEnabled(false);
            jBtnCOModify.setEnabled(false);
            jBtnCOSearch.setEnabled(false);
            jBtnCOCancelView.setEnabled(false);
            jBtnCOExit.setEnabled(false);
            jTblCOHeader.clearSelection();
            jTxtCOSearch.setText(""+jListCOSearch.getSelectedValue());
            jTxtCOSearch.requestFocus();
            jTxtCOSearch.selectAll();
            jTblCOHeader.changeSelection( rowIndex ,0,true,false);
        }
     }
      
      /** @ Method called on click of SearchCancel and Back Button in jPnlCOSearch*/     
      private void searchClosePressed() {
        
           if(rowShown>=1){
                jCboCOSearch.setSelectedItem("CO NO");   
                jTxtCOSearch.setText("");
                list.removeAllElements(); 
           }
        
        jPnlCOView.setVisible(true);
        jPnlCOAdd.setVisible(false);
        jPnlCOSearch.setVisible(false);
        jTblCOHeader.clearSelection();
                
            jCboCOFromDD.setEnabled(true);     jCboCOToDD.setEnabled(true);   
            jCboCOFromMM.setEnabled(true);     jCboCOToMM.setEnabled(true);
            jCboCOFromYYYY.setEnabled(true);   jCboCOToYYYY.setEnabled(true); 
            
            jCboCOGroupH.setEnabled(true);
            jCboCOCustomer.setEnabled(true);
            
            jBtnCOAdd.setEnabled(true);
            jBtnCOModify.setEnabled(true);
            jBtnCOSearch.setEnabled(true);
            jBtnCOCancelView.setEnabled(true); 
            jBtnCOExit.setEnabled(true);
     }
      
      /** @ Method called on click of Combo Search in jPnlGRNSearch to sort the strings*/      
     private void search(javax.swing.JList listSearch) {
       if(rowShown >= 1){  
            list=new Vector(rowShown);
            if( "CO No".equals( jCboCOSearch.getSelectedItem() ) )
                sortStrings(dataShown,rowShown,0,listSearch);
            else if("CO Date".equals( jCboCOSearch.getSelectedItem() ) )
                sortStrings(dataShown,rowShown,1,listSearch);
            else
                sortStrings(dataShown,rowShown,2,listSearch);
            displaySearch(jListCOSearch);        
            jTxtCOSearch.requestFocus();    
       }
     }
    
     /** @ Method called in Search Method (above) to sort the strings in the ListBox and display*/     
     public void sortStrings(Object[][] rawData, int rows, int colNo,javax.swing.JList listSearch) {        
        try{
            list.removeAllElements();  
        } 
        catch(Exception e){
            System.out.println("Error in sort Strings "+e);
        }
        //SORTS THE CONTENTS IN ASCENDING ORDER
        sorted=new String[rows];        
        unsorted=new String[rows];       
        
        for(j=0;j<rows;j++){
            unsorted[j]=((String)(rawData[j][colNo])).trim();
            sorted[j]=unsorted[j];            
        } 
        
        for(j=0;j<rows;j++){       
            for(i=j+1;i<rows;i++){ 
                if(sorted[i].compareToIgnoreCase(sorted[j]) <0){                    
                    String temp = sorted[j];
                    sorted[j]=sorted[i];
                    sorted[i]=temp;
                }
            }            
        }
        
        for(j=0;j<rows;j++){
            list.addElement(sorted[j]);
            listSearch.setListData(list);
            
        }     
    }
     
    /** @ Method called in Search Method (above)  to display the search element 
    *  corresponding to String typed in the Search TextBox, that in the Listbox
     */     
    public void displaySearch(javax.swing.JList listSearch) {        
        for(i=0;i<sorted.length;i++){            
            if( sorted[i].regionMatches( true,0,key,0,key.length() ) ){                
                listSearch.setSelectedValue(sorted[i],true);                
                jTblCOHeader.clearSelection();                
                int index=searchElement(sorted[i],unsorted);                
                jTblCOHeader.changeSelection( index ,0,true,false);                               
                eleFound=true;
                break;
            }            
        }
        if(listSearch.isSelectionEmpty()) 
            eleFound=true;
        
        if(!eleFound)
            JOptionPane.showMessageDialog(this," No match found. ","Sorry!",JOptionPane.ERROR_MESSAGE);
        
        eleFound=false;        
    }
    
    /** @ Method to get the index value of a particular String in the ListBox */
    private int searchElement(String key, String[] a) {
        int indx=-1;
        for(i=0;i<a.length;i++){
            if( key.equals(a[i]) )
                indx=i;
        }    
        
        return indx;
    }
        
     /** @ Method to Validate the entry in TextBox,where only integer to be entered */ 
     public long validEntry(javax.swing.JTextField jTxtField,long Qty,String nameOfField){
         if(jTxtField.getText().trim().equals("")){
              jTxtField.setText("0");
              jTxtField.requestFocus();
              jTxtField.selectAll();
              JOptionPane.showMessageDialog(this,"The"+ nameOfField +"Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    
         }
         else {
            try{
                Qty=Long.parseLong(jTxtField.getText());
                ValidEntry=true;
                if(Qty<0){
                    jTxtField.setText("0");
                    jTxtField.requestFocus();
                    jTxtField.selectAll();
                    ValidEntry=false;
                    JOptionPane.showMessageDialog(this,"The"+ nameOfField +"cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
                }               
            }
            catch(NumberFormatException e){
                 jTxtField.setText("0");                 
                 jTxtField.requestFocus();
                 jTxtField.selectAll();
                 ValidEntry=false;
                 JOptionPane.showMessageDialog(this,"Enter a valid number(Integer) in the"+ nameOfField +"field!","Error!",JOptionPane.ERROR_MESSAGE);    
            }
         }
         
         return Qty;
    }
    
    /** @ Method to Validate the entry in TextBox,where only Float value to be entered */ 
     public double validEntry(javax.swing.JTextField jTxtField,double Qty,String nameOfField){
         if(jTxtField.getText().trim().equals("")){
              jTxtField.setText("0");
              jTxtField.requestFocus();
              jTxtField.selectAll();
              JOptionPane.showMessageDialog(this,"The"+ nameOfField +"Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    
         }
         else {
            try{
                Qty=Double.parseDouble(jTxtField.getText());
                ValidEntry=true;
                System.out.println(jTxtField.getText());                
                if(Qty<0){
                    jTxtField.setText("0");
                    jTxtField.requestFocus();
                    jTxtField.selectAll();
                    ValidEntry=false;
                    JOptionPane.showMessageDialog(this,"The"+ nameOfField +"cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
                }               
            }
            catch(NumberFormatException e){
                 jTxtField.setText("0");
                 jTxtField.requestFocus();
                 jTxtField.selectAll();
                 ValidEntry=false;
                 JOptionPane.showMessageDialog(this,"Enter a valid number(Integer) in the"+ nameOfField +"field!","Error!",JOptionPane.ERROR_MESSAGE);    
            }
         }
         return Qty;
    }
     
     /** Method to the get only the Number in the Text */
     public double getNumber(String fromText,String OutPutText){       
        StringBuffer sb = new StringBuffer(fromText);
        double Qty=0;
                for(j=1;j<=sb.length();j++){                  
                   if(sb.charAt(j)=='-') 
                    {
                       try{  
                        Qty=Double.parseDouble(sb.substring(j+1,sb.length()-1).trim());                          
                        break;
                       }
                       catch(Exception ex)
                       {
                           Qty=0;
                           System.out.println("Error in getting the percentage "+OutPutText+""+ex);
                       }
                    }
                }  
        return Qty;
     }
     
     /**Method checks for item Selected */
     public void checkItemSelected(javax.swing.JComboBox cbo,String comboName){
         if(cbo.getSelectedIndex()==0){
             JOptionPane.showMessageDialog(this,"Select the "+comboName+"","Selection",JOptionPane.INFORMATION_MESSAGE);
             cbo.requestFocus();             
         }
     }
     
     /** Method to assign date from the Database */
     public void assignDate(String TextFromDB,javax.swing.JComboBox DD,javax.swing.JComboBox MM,javax.swing.JComboBox YY){
         int s[] = new int[3];
         StringTokenizer st = new StringTokenizer(TextFromDB , "/");
                   int k=0;
                      while( st.hasMoreTokens() )
                      {
                        s[k]=Integer.parseInt( st.nextToken() );
                        k++;
                      }//end while
         DD.setSelectedIndex(s[0]-1);MM.setSelectedIndex(s[1]-1);YY.setSelectedIndex(s[2]-1950);                                                                  
     }
     
     /** Method to calculate the Net Price of the Detail*/
     public void calNetPriceDetail(){       
         String DiscTextD=""+jCboCODiscountDetail.getSelectedItem();
         String TaxTextD=""+jCboCOTaxDetail.getSelectedItem();        
         double Price=0,DiscountD=0,TaxD=0;         
         NetPrice=0;
         Price=(BulkQty*BulkSP + PackQty*PackSP + LooseQty*LooseSP);
         NetPrice=Price;
          if(jCboCODiscountDetail.getSelectedIndex()==0){
             DiscNoD=0;             
          }
          else{
             DiscNoD = getNumber(DiscTextD,"Discount Amount Detail");             
             DiscountD=(DiscNoD*Price)/100;            
             NetPrice=NetPrice- DiscountD ;
          }
         
          if(jCboCOTaxDetail.getSelectedIndex()==0){
              TaxNoD=0;              
          }
          else{               
              TaxNoD = getNumber(TaxTextD,"Tax Amount Detail");
              TaxD=TaxNoD*(NetPrice)/100;
              NetPrice=NetPrice + TaxD;
          }
               
         jTxtCODiscAmtDetail.setText(""+DiscountD);
         jTxtCOTaxAmtDetail.setText(""+TaxD);    
         jTxtCONetPrice.setText(""+NetPrice);
     }
     
     /** Method to calculate the Gross Total and Net Total of the Header*/
     public void calNetPriceHeader()
     {
        String DiscTextH=""+jCboCODiscount.getSelectedItem();
        String TaxTextH=""+jCboCOTax.getSelectedItem();
        double PriceH=0,DiscountH=0,TaxH=0;
        
       // Miscellaneous=Double.parseDouble(jTxtCOMisc.getText());
        for(i=0;i<rowTblDetails;i++){
          PriceH = PriceH + Double.parseDouble(""+dataDetailsShown[i][12]);
        }        
           GrossTotal=PriceH + Misc;
           NetTotal=GrossTotal;
         if(jCboCODiscount.getSelectedIndex()==0){
             DiscNoH=0; 
         }
         else{
             DiscNoH=getNumber(DiscTextH,"Discount Amount Header");
             DiscountH = (DiscNoH*GrossTotal)/100;
             NetTotal = GrossTotal - DiscountH ;
         }
           
         if(jCboCOTax.getSelectedIndex()==0){
             TaxNoH=0;
         }
         else{ 
             TaxNoH=getNumber(TaxTextH,"Tax Amount Header");
             TaxH  = TaxNoH*(GrossTotal-DiscountH)/100; 
             NetTotal = NetTotal + TaxH  ;
         }            
         jTxtCOGrandTot.setText(""+GrossTotal);
         jTxtCODiscAmt.setText(""+DiscountH);
         jTxtCOTaxAmt.setText(""+TaxH);
         jTxtCONetTot.setText(""+NetTotal);
     }    
    
    /**
    * @param args the command line arguments
    */
    /*public static void main(String args[]) {
        new CO().show();
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLblCOPONo;
    private javax.swing.JComboBox jCboCOCustomer;
    private javax.swing.JLabel jLblCODMY;
    private javax.swing.JLabel jLblCOToDate;
    private javax.swing.JTextField jTxtCOLooseSP;
    private javax.swing.JComboBox jCboCOADateYYYY;
    private javax.swing.JTextField jTxtCOTaxAmtDetail;
    private javax.swing.JLabel jLblCOCode;
    private javax.swing.JScrollPane jScrPaneCOTerms;
    private javax.swing.JTextField jTxtCOMisc;
    private javax.swing.JComboBox jCboCOFromDD;
    private javax.swing.JButton jBtnCOSearchClose;
    private javax.swing.JComboBox jCboCODateYYYY;
    private javax.swing.JButton jBtnCOAddItem;
    private javax.swing.JButton jBtnCOSaveEdit;
    private javax.swing.JList jListCOSearch;
    private javax.swing.JComboBox jCboCODDateDD;
    private javax.swing.JButton jBtnCOModify;
    private javax.swing.JButton jBtnCORemoveItem;
    private javax.swing.JComboBox jCboCODiscount;
    private javax.swing.JComboBox jCboCOToMM;
    private javax.swing.JTable jTblCODetails;
    private javax.swing.JPanel jPnlGRNAddItem;
    private javax.swing.JTextArea jTxtAreaCOTerms;
    private javax.swing.JComboBox jCboCOFromMM;
    private javax.swing.JLabel jLblCOItemName;
    private javax.swing.JTextField jTxtCOTaxAmt;
    private javax.swing.JLabel jLblCODiscountDetail;
    private javax.swing.JLabel jLblCODDate;
    private javax.swing.JLabel jLblCOBulkSP;
    private javax.swing.JButton jBtnCOSearch;
    private javax.swing.JComboBox jCboCOFromYYYY;
    private javax.swing.JLabel jLblCOPackQty;
    private javax.swing.JScrollPane jScrPaneGRNItem;
    private javax.swing.JComboBox jCboCOCustomerName;
    private javax.swing.JTextField jTxtCODiscAmtDetail;
    private javax.swing.JLabel jLblPODate;
    private javax.swing.JComboBox jCboCOToYYYY;
    private javax.swing.JLabel jLblCODate;
    private javax.swing.JLabel jLblGRNTerms;
    private javax.swing.JComboBox jCboCOGroupH;
    private javax.swing.JTextField jTxtCOPONo;
    private javax.swing.JLabel jLblCOGrandTot;
    private javax.swing.JLabel jLbCOTaxDetail;
    private javax.swing.JTable jTblCOHeader;
    private javax.swing.JLabel jLblCOLooseSP;
    private javax.swing.JLabel jLblCOAuthBy;
    private javax.swing.JLabel jLblCOCustomerName;
    private javax.swing.JButton jBtnCOBack;
    private javax.swing.JLabel jLblCOCustomer;
    private javax.swing.JLabel jLblCODiscAmtDetail;
    private javax.swing.JLabel jLblCODiscAmt;
    private javax.swing.JTextField jTxtCOSlNo;
    private javax.swing.JLabel jLblCOSlNo;
    private javax.swing.JScrollPane jSPaneCO;
    private javax.swing.JLabel jLblCOTax;
    private javax.swing.JLabel jLblCOPackSP;
    private javax.swing.JPanel jPnlCOSearch;
    private javax.swing.JTextField jTxtCODiscAmt;
    private javax.swing.JLabel jLblCOLooseQty;
    private javax.swing.JPanel jPnlGRNDetails;
    private javax.swing.JTextField jTxtCOGrandTot;
    private javax.swing.JLabel jLblCONetTot;
    private javax.swing.JComboBox jCboCOToDD;
    private javax.swing.JLabel jLblCOFromDMY;
    private javax.swing.JComboBox jCboCOTaxDetail;
    private javax.swing.JLabel jLblCOPONumber;
    private javax.swing.JTextField jTxtCOPackQty;
    private javax.swing.JTextField jTxtCOBulkSP;
    private javax.swing.JComboBox jCboCOItemName;
    private javax.swing.JTextField jTxtCOPackSP;
    private javax.swing.JPanel jPnlCOView;
    private javax.swing.JComboBox jCboCOADateMM;
    private javax.swing.JLabel jLblCOGroup;
    private javax.swing.JLabel jLblCOTaxAmt;
    private javax.swing.JButton jBtnCOExit;
    private javax.swing.JComboBox jCboCOTax;
    private javax.swing.JComboBox jCboCOADateDD;
    private javax.swing.JButton jBtnCOEditItem;
    private javax.swing.JComboBox jCboCODateMM;
    private javax.swing.JLabel jLblCODiscount;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTxtCOSearch;
    private javax.swing.JComboBox jCboCOPDateMM;
    private javax.swing.JTextField jTxtCONetPrice;
    private javax.swing.JPanel jPnlCOAdd;
    private javax.swing.JLabel jLblCONetPrice;
    private javax.swing.JTextField jTxtCONetTot;
    private javax.swing.JComboBox jCboCODiscountDetail;
    private javax.swing.JComboBox jCboCOAuthBy;
    private javax.swing.JButton jBtnCOCancelView;
    private javax.swing.JButton jBtnCOAdd;
    private javax.swing.JComboBox jCboCOGroup;
    private javax.swing.JButton jBtnCOSave;
    private javax.swing.JLabel jLblCOMisc;
    private javax.swing.JLabel jLblCOTaxAmtDetail;
    private javax.swing.JComboBox jCboCODDateMM;
    private javax.swing.JTextField jTxtCOCode;
    private javax.swing.JButton jBtnCOFinish;
    private javax.swing.JLabel jLblCOMain;
    private javax.swing.JComboBox jCboCOPDateYYYY;
    private javax.swing.JLabel jLblCOFromDate;
    private javax.swing.JTextField jTxtCOBulkQty;
    private javax.swing.JComboBox jCboCOSearch;
    private javax.swing.JTextField jTxtCOLooseQty;
    private javax.swing.JLabel jLblCOBulkQty;
    private javax.swing.JComboBox jCboCODateDD;
    private javax.swing.JLabel jLblCOAcptDate;
    private javax.swing.JComboBox jCboCOPDateDD;
    private javax.swing.JComboBox jCboCODDateYYYY;
    // End of variables declaration//GEN-END:variables

     Connection con;
     Statement stat;
     String getError;
        StringBuffer sb;
        Vector list;
        java.util.Date curDate= new java.util.Date();        
        java.util.Date CODate=new java.util.Date();
        java.util.Date AccpDate=new java.util.Date();  
        java.util.Date fromDate=new java.util.Date();
        java.util.Date toDate=new java.util.Date();
        java.util.Date DELDate=new java.util.Date();
        java.util.Date PODate=new java.util.Date();
        boolean ModFlag=false , detailsAreValid=false , dateCheckRequired=false,headerIsValid=false;
        int rowTblDetails=0,i=0,j=0,h=0;
        String sorted[],unsorted[],key="",ItemNoDetail="";
        final String colsShownH[] = {"CO No","CO Date","Customer Name","Total Amt","Cancelled"};
        Object dataShown[][],dataSpecific[][],dataDateSpecific[][];
        final String colAdd[] = {"Sl.No.","Item Name","Bulk Qty.","Pack Qty.","Loose Qty.","Bulk SP","Pack SP","Loose SP","Discount","Tax","Disc Amt","Tax Amt","Net Price"};
        Object dataDetailsShown[][];
        Object dataAdd[][]= new Object[50][13];
        boolean clickD=false,clickH=false,editPressed=false,AddItem=true,eleFound=false,ValidEntry=false,AllowTax=false,AllowDis=false;
        boolean GroupID=false,customer = false,NoDetailError=false,NoHeaderError=false,NoSaveStoreError=false,RemoveItem=false,NoModifyError=false;
        int selrow=0,selcol=0,selrowD=0,selcolD=0,ctr=0;
        int rowSpecific=0,rowDateSpecific=0,rowShown=0,initialRowsInDetTbl=0;
        long  LooseQty=0, PackQty=0,BulkQty=0;        
        double Misc=0,BulkSP=0,PackSP=0,LooseSP=0,DiscNoH=0,TaxNoH=0,NetPrice=0,GrossTotal=0,NetTotal=0,DiscNoD=0,TaxNoD=0;  
        int ItemPackPerBulk=0,ItemLoosePerPack=0,valueBeforeModifyCount=0;
        Object valueBeforeModify[][];// using this Object in modifySaveStoreDB By getting the value to this object in fillGRNAddDetail
}

