/*
 * DO_Cum_Inv.java
 *        
 * Created on January 21, 2002, 4:17 PM
 */ 

/**
 *
 * @author  Palash
 */

package view.transaction;

import usefulClasses.databaseOperations.LinkDB;

import java.sql.*;
import java.awt.*;
import java.util.*;
import javax.swing.JOptionPane;


public class DOCumInvPanel extends javax.swing.JPanel {

    /** Creates new form DO_Cum_Inv */
    public DOCumInvPanel() {
        
     try{
            accessDB();
            String ss = "SELECT * FROM SemaPhores WHERE TableName = 'DO_H'";
            
            ResultSet res = stat.executeQuery(ss);
            
            if(!res.next()){
                String ss1="Insert into SemaPhores (TableName,CtrName,MaxCtr) values('DO_H','',1)";
               stat.executeUpdate(ss1);               
            }//end if
            con.close();
        }//end try
        catch(Exception e){
        }//end catch*/
     
             int row = semaPhores.queryRow("WHERE TableName = 'Invoice_H'");
        if(row==0)
            try{
                accessDB();
                String ss="Insert into SemaPhores (TableName,CtrName,MaxCtr) values('Invoice_H','',1)";
                stat.executeUpdate(ss);               
                }
            catch(Exception e){
            }
        
        authBy.checkEmpty();  
        coH.checkEmpty();      
        curM.checkEmpty();       
        custM.checkEmpty();   
        disM.checkEmpty();
        itemM.checkEmpty();
        poH.checkEmpty();
        storeM.checkEmpty();
        taxM.checkEmpty();
        
        initComponents();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        pnlHome = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHeader = new javax.swing.JTable();
        btAdd = new javax.swing.JButton();
        btSearch = new javax.swing.JButton();
        btCancelPO = new javax.swing.JButton();
        btExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cbFrDD = new javax.swing.JComboBox();
        fillDaysInCombo(cbFrDD);
        cbFrMM = new javax.swing.JComboBox();
        fillMonthsInCombo(cbFrMM);
        cbFrYY = new javax.swing.JComboBox();
        fillYearsInCombo(cbFrYY);

        jLabel41 = new javax.swing.JLabel();
        cbToDD = new javax.swing.JComboBox();
        fillDaysInCombo(cbToDD);
        cbToDD.setSelectedItem("31");
        cbToMM = new javax.swing.JComboBox();
        fillMonthsInCombo(cbToMM);
        cbToMM.setSelectedItem("12");
        cbToYY = new javax.swing.JComboBox();
        fillYearsInCombo(cbToYY);
        cbToYY.setSelectedItem("2100");
        jLabel5 = new javax.swing.JLabel();
        cbStoreList = new javax.swing.JComboBox();
        cbStoreList.addItem("[All Items]");
        storeM.fillCombo(cbStoreList,"StoreName","WHERE Active = 'Y'","StoreName");
        jLabel7 = new javax.swing.JLabel();
        pnlAddHeader = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSL_TaxAmt = new javax.swing.JTextField();
        txtNetTotal = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        btSave = new javax.swing.JButton();
        btD_Cancel = new javax.swing.JButton();
        cbAddStore = new javax.swing.JComboBox();
        cbAddStore.addItem("[Select One]" );
        storeM.fillCombo(cbAddStore,"StoreName","WHERE Active = 'Y'","StoreName");
        cbPoNo = new javax.swing.JComboBox();
        cbPoNo.addItem("[Select One]" );
        poH.fillCombo(cbPoNo,"POM_No","WHERE Cancelled = 'N'","POM_No");

        cbDO_DD = new javax.swing.JComboBox();
        fillDaysInCombo(cbDO_DD);
        cbDO_MM = new javax.swing.JComboBox();
        fillMonthsInCombo(cbDO_MM);
        cbDO_YY = new javax.swing.JComboBox();
        fillYearsInCombo(cbDO_YY);
        jLabel91 = new javax.swing.JLabel();
        cbTaxSl = new javax.swing.JComboBox();
        cbTaxSl.addItem("0%");
        taxM.fillCombo(cbTaxSl,"TaxDesc"," - ","Percentage","%","WHERE Active = 'Y'","TaxDesc");
        cbDisSl = new javax.swing.JComboBox();
        cbDisSl.addItem("0%");
        disM.fillCombo(cbDisSl,"DM_Name"," - ","DM_Value","%","WHERE Active = 'Y'","DM_Name");
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        txtD_LsQt = new javax.swing.JTextField();
        txtD_LsQt.setText("0");
        txtD_LsQt.selectAll();
        txtD_LsPr = new javax.swing.JTextField();
        txtD_LsPr.setText("0");
        txtD_LsPr.selectAll();
        txtD_PcQt = new javax.swing.JTextField();
        txtD_PcQt.setText("0");
        txtD_PcQt.selectAll();
        txtD_PcPr = new javax.swing.JTextField();
        txtD_PcPr.setText("0");
        txtD_PcPr.selectAll();
        txtD_BlQt = new javax.swing.JTextField();
        txtD_BlQt.setText("0");
        txtD_BlQt.selectAll();
        txtD_BlPr = new javax.swing.JTextField();
        txtD_BlPr.setText("0");
        txtD_BlPr.selectAll();
        txtD_NtPr = new javax.swing.JTextField();
        txtD_NtPr.setText("0");
        txtD_NtPr.selectAll();
        cbD_ItN = new javax.swing.JComboBox();
        cbD_ItN.addItem("[Select Store]");

        cbD_Tax = new javax.swing.JComboBox();
        cbD_Tax.addItem("0%");
        taxM.fillCombo(cbD_Tax,"TaxDesc"," - ","Percentage","%","WHERE Active = 'Y'","TaxDesc");
        cbD_Dis = new javax.swing.JComboBox();
        cbD_Dis.addItem("0%");
        disM.fillCombo(cbD_Dis,"DM_Name"," - ","DM_Value","%","WHERE Active = 'Y'","DM_Name");

        txtD_SlNo = new javax.swing.JTextField();
        txtD_SlNo.setText("1");
        tblDetails = new javax.swing.JTable();
        jLabel361 = new javax.swing.JLabel();
        txtD_DiscAmt = new javax.swing.JTextField();
        txtD_DiscAmt.setText("0");

        txtD_TaxAmt = new javax.swing.JTextField();
        txtD_TaxAmt.setText("0");

        jLabel3611 = new javax.swing.JLabel();
        cbD_BchDt = new javax.swing.JComboBox();
        cbD_BchDt.addItem("[Select Item Name]");

        btD_Add = new javax.swing.JButton();
        btD_Edit = new javax.swing.JButton();
        btD_Remove = new javax.swing.JButton();
        btD_Finish = new javax.swing.JButton();
        btD_SaveEdit = new javax.swing.JButton();
        jLabel221 = new javax.swing.JLabel();
        txtGrossTotal = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        cbCustN = new javax.swing.JComboBox();
        cbCustN.addItem("[Select One]" );
        custM.fillCombo(cbCustN,"CustName","WHERE Active = 'Y'","CustName");

        jLabel12 = new javax.swing.JLabel();
        jLabel131 = new javax.swing.JLabel();
        cbCoNo = new javax.swing.JComboBox();
        cbCoNo.addItem("[Select One]");
        coH.fillCombo(cbCoNo,"CO_No","WHERE Cancelled = 'N'","CO_No");
        cbCur = new javax.swing.JComboBox();
        cbCur.addItem("[Select One]");
        curM.fillCombo(cbCur,"CM_Name","WHERE Active = 'Y'","CM_Name");

        txtSL_DscAmt = new javax.swing.JTextField();
        txtPO_Date = new javax.swing.JTextField();
        txtCO_Date = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbAuthBy = new javax.swing.JComboBox();
        cbAuthBy.addItem("[Select One]");
        authBy.fillCombo(cbAuthBy,"EmpName","WHERE Active = 'Y'","EmpName");

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlHome.setForeground(new java.awt.Color(51, 51, 255));
        pnlHome.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlHomeComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jLabel1.setForeground(new java.awt.Color(0, 51, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Delivery  Order Cum  Invoice");
        pnlHome.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 380, -1));

        jScrollPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane1ComponentResized(evt);
            }
        });

        tblHeader.setToolTipText("");
        tblHeader.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        fillHeaderTbl();
        tblHeader.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblHeaderKeyReleased(evt);
            }
        });

        tblHeader.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHeaderMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(tblHeader);

        pnlHome.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 500, 300));

        btAdd.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\new5.gif"));
        btAdd.setMnemonic('A');
        btAdd.setText("Add");
        btAdd.setToolTipText(" ");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        pnlHome.add(btAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 510, 110, 27));

        btSearch.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\find5.gif"));
        btSearch.setMnemonic('S');
        btSearch.setText("Search");
        btSearch.setToolTipText(" ");
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });

        pnlHome.add(btSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 510, 110, 27));

        btCancelPO.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\delete2.jpg"));
        btCancelPO.setMnemonic('C');
        btCancelPO.setText("Cancel D.O.");
        btCancelPO.setToolTipText(" ");
        btCancelPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelPOActionPerformed(evt);
            }
        });

        pnlHome.add(btCancelPO, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 510, 127, 27));

        btExit.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\delete1.jpg"));
        btExit.setMnemonic('X');
        btExit.setText("Exit");
        btExit.setToolTipText(" ");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        pnlHome.add(btExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(557, 510, 120, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 102));
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("From: ");
        pnlHome.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, -1, 20));

        cbFrDD.setFont(new java.awt.Font("Dialog", 0, 12));
        cbFrDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFrDDActionPerformed(evt);
            }
        });

        pnlHome.add(cbFrDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 50, 20));

        cbFrMM.setFont(new java.awt.Font("Dialog", 0, 12));
        cbFrMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFrMMActionPerformed(evt);
            }
        });

        pnlHome.add(cbFrMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 50, 20));

        cbFrYY.setFont(new java.awt.Font("Dialog", 0, 12));
        cbFrYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFrYYActionPerformed(evt);
            }
        });

        pnlHome.add(cbFrYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, 70, 20));

        jLabel41.setBackground(new java.awt.Color(255, 255, 102));
        jLabel41.setForeground(new java.awt.Color(0, 0, 153));
        jLabel41.setText("To:");
        pnlHome.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, -1, 20));

        cbToDD.setFont(new java.awt.Font("Dialog", 0, 12));
        cbToDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbToDDActionPerformed(evt);
            }
        });

        pnlHome.add(cbToDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 50, 20));

        cbToMM.setFont(new java.awt.Font("Dialog", 0, 12));
        cbToMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbToMMActionPerformed(evt);
            }
        });

        pnlHome.add(cbToMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 50, 20));

        cbToYY.setFont(new java.awt.Font("Dialog", 0, 12));
        cbToYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbToYYActionPerformed(evt);
            }
        });

        pnlHome.add(cbToYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 110, 70, 20));

        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setText("Store:");
        pnlHome.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, -1, 20));

        cbStoreList.setFont(new java.awt.Font("Dialog", 0, 12));
        cbStoreList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbStoreListActionPerformed(evt);
            }
        });

        pnlHome.add(cbStoreList, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 80, 210, 20));

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel7.setForeground(new java.awt.Color(0, 51, 204));
        jLabel7.setText("      DD      /      MM    /     Y YYY");
        pnlHome.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 65, 170, 20));

        add(pnlHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 750));

        pnlAddHeader.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlAddHeader.setVisible(false);
        pnlAddHeader.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlAddHeaderComponentShown(evt);
            }
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                pnlAddHeaderComponentHidden(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Code *");
        pnlAddHeader.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 50, 20));

        txtCode.setBackground(new java.awt.Color(204, 255, 153));
        txtCode.setEditable(false);
        pnlAddHeader.add(txtCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 100, -1));

        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("D.O. Date*");
        pnlAddHeader.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 90, 20));

        txtSL_TaxAmt.setBackground(new java.awt.Color(204, 204, 255));
        txtSL_TaxAmt.setEditable(false);
        txtSL_TaxAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pnlAddHeader.add(txtSL_TaxAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 480, 220, 20));

        txtNetTotal.setBackground(new java.awt.Color(204, 204, 255));
        txtNetTotal.setEditable(false);
        txtNetTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pnlAddHeader.add(txtNetTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 505, 220, -1));

        jLabel10.setForeground(new java.awt.Color(0, 0, 153));
        jLabel10.setText("Store *");
        pnlAddHeader.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 70, 90, 20));

        jLabel13.setForeground(new java.awt.Color(0, 0, 153));
        jLabel13.setText("P.O. Ref Date *");
        pnlAddHeader.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 90, 20));

        jLabel14.setForeground(new java.awt.Color(0, 0, 153));
        jLabel14.setText("P.O. Ref. No.  ");
        pnlAddHeader.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, 20));

        jLabel15.setForeground(new java.awt.Color(0, 0, 153));
        jLabel15.setText("Currency *");
        pnlAddHeader.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 130, 90, 20));

        jLabel17.setForeground(new java.awt.Color(0, 0, 153));
        jLabel17.setText("Tax Amt.");
        pnlAddHeader.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 480, 90, 20));

        jLabel19.setForeground(new java.awt.Color(0, 0, 153));
        jLabel19.setText("C.O. No.");
        pnlAddHeader.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 50, 20));

        jLabel20.setForeground(new java.awt.Color(0, 0, 153));
        jLabel20.setText("Discount %");
        pnlAddHeader.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 62, 20));

        jLabel21.setForeground(new java.awt.Color(0, 0, 153));
        jLabel21.setText("Tax %");
        pnlAddHeader.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 40, 20));

        jLabel22.setForeground(new java.awt.Color(0, 0, 153));
        jLabel22.setText("Net Total");
        pnlAddHeader.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 505, 70, 20));

        btSave.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\save1.gif"));
        btSave.setMnemonic('S');
        btSave.setText("Save");
        btSave.setToolTipText(" ");
        btSave.setEnabled(false);
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        pnlAddHeader.add(btSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 90, 27));

        btD_Cancel.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\back1.jpg"));
        btD_Cancel.setMnemonic('B');
        btD_Cancel.setText("Back");
        btD_Cancel.setToolTipText(" ");
        btD_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_CancelActionPerformed(evt);
            }
        });

        pnlAddHeader.add(btD_Cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 440, 90, -1));

        cbAddStore.setBackground(new java.awt.Color(204, 255, 255));
        cbAddStore.setFont(new java.awt.Font("Dialog", 0, 12));
        cbAddStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAddStoreActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbAddStore, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 70, 190, 20));

        cbPoNo.setBackground(new java.awt.Color(204, 255, 255));
        cbPoNo.setFont(new java.awt.Font("Dialog", 0, 12));
        cbPoNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPoNoActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbPoNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 100, 20));

        cbDO_DD.setBackground(new java.awt.Color(204, 255, 255));
        cbDO_DD.setFont(new java.awt.Font("Dialog", 0, 12));

        cbDO_DD.setSelectedIndex(curDate.getDate()-1);
        pnlAddHeader.add(cbDO_DD, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 70, 50, 20));

        cbDO_MM.setBackground(new java.awt.Color(204, 255, 255));
        cbDO_MM.setFont(new java.awt.Font("Dialog", 0, 12));

        cbDO_MM.setSelectedIndex(curDate.getMonth());

        pnlAddHeader.add(cbDO_MM, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 70, 50, 20));

        cbDO_YY.setBackground(new java.awt.Color(204, 255, 255));
        cbDO_YY.setFont(new java.awt.Font("Dialog", 0, 12));

        cbDO_YY.setSelectedIndex( curDate.getYear()-50 );
        pnlAddHeader.add(cbDO_YY, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 80, 20));

        jLabel91.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel91.setForeground(new java.awt.Color(51, 51, 255));
        jLabel91.setText("      DD      /      MM    /     Y YYY");
        pnlAddHeader.add(jLabel91, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, 180, 30));

        cbTaxSl.setBackground(new java.awt.Color(204, 255, 255));
        cbTaxSl.setFont(new java.awt.Font("Dialog", 0, 12));
        cbTaxSl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTaxSlActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbTaxSl, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, 100, 20));

        cbDisSl.setBackground(new java.awt.Color(204, 255, 255));
        cbDisSl.setFont(new java.awt.Font("Dialog", 0, 12));
        cbDisSl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDisSlActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbDisSl, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, 180, 20));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder(null, "Delivery Order Details", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 18), new java.awt.Color(0, 0, 204)));
        jScrollPane3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane3.setViewportBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 1, 1), new java.awt.Color(51, 51, 255)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel24.setForeground(new java.awt.Color(0, 0, 153));
        jLabel24.setText("Sl. No.");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 40, -1));

        jLabel25.setForeground(new java.awt.Color(0, 0, 153));
        jLabel25.setText("Item Name");
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, -1, -1));

        jLabel26.setForeground(new java.awt.Color(0, 0, 153));
        jLabel26.setText("Batch No.");
        jPanel1.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, -1, -1));

        jLabel27.setForeground(new java.awt.Color(0, 0, 153));
        jLabel27.setText("Expiry Date");
        jPanel1.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, -1));

        jLabel28.setForeground(new java.awt.Color(0, 0, 153));
        jLabel28.setText("Loose Qty.");
        jPanel1.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        jLabel29.setForeground(new java.awt.Color(0, 0, 153));
        jLabel29.setText("Loose Price");
        jPanel1.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, -1, -1));

        jLabel30.setForeground(new java.awt.Color(0, 0, 153));
        jLabel30.setText("Pack Qty.");
        jPanel1.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, -1, -1));

        jLabel32.setForeground(new java.awt.Color(0, 0, 153));
        jLabel32.setText("Pack Price");
        jPanel1.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 10, 70, -1));

        jLabel33.setForeground(new java.awt.Color(0, 0, 153));
        jLabel33.setText("Bulk Qty.");
        jPanel1.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 10, -1, -1));

        jLabel31.setForeground(new java.awt.Color(0, 0, 153));
        jLabel31.setText("Bulk Price ");
        jPanel1.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 10, -1, -1));

        jLabel35.setForeground(new java.awt.Color(0, 0, 153));
        jLabel35.setText("Discount %");
        jPanel1.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 10, -1, -1));

        jLabel34.setForeground(new java.awt.Color(0, 0, 153));
        jLabel34.setText("Tax %");
        jPanel1.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 10, -1, -1));

        jLabel36.setForeground(new java.awt.Color(0, 0, 153));
        jLabel36.setText("Discount Amt.");
        jPanel1.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 10, 80, -1));

        txtD_LsQt.setBackground(new java.awt.Color(204, 255, 255));
        txtD_LsQt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_LsQt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_LsQtFocusLost(evt);
            }
        });

        jPanel1.add(txtD_LsQt, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 93, 20));

        txtD_LsPr.setBackground(new java.awt.Color(204, 255, 255));
        txtD_LsPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_LsPr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_LsPrFocusLost(evt);
            }
        });

        jPanel1.add(txtD_LsPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 95, 20));

        txtD_PcQt.setBackground(new java.awt.Color(204, 255, 255));
        txtD_PcQt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_PcQt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtD_PcQtActionPerformed(evt);
            }
        });

        txtD_PcQt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_PcQtFocusLost(evt);
            }
        });

        jPanel1.add(txtD_PcQt, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 30, 93, 20));

        txtD_PcPr.setBackground(new java.awt.Color(204, 255, 255));
        txtD_PcPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_PcPr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtD_PcPrActionPerformed(evt);
            }
        });

        txtD_PcPr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_PcPrFocusLost(evt);
            }
        });

        jPanel1.add(txtD_PcPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 30, 93, 20));

        txtD_BlQt.setBackground(new java.awt.Color(204, 255, 255));
        txtD_BlQt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_BlQt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_BlQtFocusLost(evt);
            }
        });

        jPanel1.add(txtD_BlQt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 30, 97, 20));

        txtD_BlPr.setBackground(new java.awt.Color(204, 255, 255));
        txtD_BlPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_BlPr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtD_BlPrActionPerformed(evt);
            }
        });

        txtD_BlPr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_BlPrFocusLost(evt);
            }
        });

        jPanel1.add(txtD_BlPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(835, 30, 95, 20));

        txtD_NtPr.setBackground(new java.awt.Color(204, 255, 153));
        txtD_NtPr.setEditable(false);
        txtD_NtPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtD_NtPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 30, 89, 20));

        cbD_ItN.setBackground(new java.awt.Color(204, 255, 255));
        cbD_ItN.setFont(new java.awt.Font("Dialog", 1, 10));
        cbD_ItN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbD_ItNActionPerformed(evt);
            }
        });

        jPanel1.add(cbD_ItN, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 30, 97, 20));

        cbD_Tax.setBackground(new java.awt.Color(204, 255, 255));
        cbD_Tax.setFont(new java.awt.Font("Dialog", 1, 10));
        cbD_Tax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbD_TaxActionPerformed(evt);
            }
        });

        jPanel1.add(cbD_Tax, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 30, 96, 20));

        cbD_Dis.setBackground(new java.awt.Color(204, 255, 255));
        cbD_Dis.setFont(new java.awt.Font("Dialog", 1, 10));
        cbD_Dis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbD_DisActionPerformed(evt);
            }
        });

        jPanel1.add(cbD_Dis, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 30, 93, 20));

        txtD_SlNo.setBackground(new java.awt.Color(204, 255, 153));
        txtD_SlNo.setEditable(false);
        txtD_SlNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(txtD_SlNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 93, 20));

        tblDetails.setSelectionBackground(new java.awt.Color(204, 255, 255));
        changeDetailsTbl();
        tblDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetailsMouseClicked(evt);
            }
        });

        jPanel1.add(tblDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 1380, -1));

        jLabel361.setForeground(new java.awt.Color(0, 0, 153));
        jLabel361.setText("Net Price");
        jPanel1.add(jLabel361, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 10, 60, -1));

        txtD_DiscAmt.setBackground(new java.awt.Color(204, 255, 153));
        txtD_DiscAmt.setEditable(false);
        txtD_DiscAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtD_DiscAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 30, 89, 20));

        txtD_TaxAmt.setBackground(new java.awt.Color(204, 255, 153));
        txtD_TaxAmt.setEditable(false);
        txtD_TaxAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtD_TaxAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1206, 30, 93, 20));

        jLabel3611.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3611.setText("Tax Amt.");
        jPanel1.add(jLabel3611, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 10, 60, -1));

        cbD_BchDt.setBackground(new java.awt.Color(204, 255, 255));
        cbD_BchDt.setFont(new java.awt.Font("Dialog", 1, 10));
        cbD_BchDt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbD_BchDtActionPerformed(evt);
            }
        });

        jPanel1.add(cbD_BchDt, new org.netbeans.lib.awtextra.AbsoluteConstraints(201, 30, 180, 20));

        jScrollPane3.setViewportView(jPanel1);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 759, 160));

        btD_Add.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\add1.gif"));
        btD_Add.setMnemonic('A');
        btD_Add.setText("Add Item");
        btD_Add.setToolTipText(" ");
        btD_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_AddActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 190, 120, -1));

        btD_Edit.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\edit.gif"));
        btD_Edit.setMnemonic('E');
        btD_Edit.setText("Edit Item");
        btD_Edit.setToolTipText(" ");
        btD_Edit.setVisible(false);
        btD_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_EditActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 190, 120, -1));

        btD_Remove.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\minus3.gif"));
        btD_Remove.setMnemonic('R');
        btD_Remove.setText("Remove Item");
        btD_Remove.setToolTipText(" ");
        btD_Remove.setEnabled(false);
        btD_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_RemoveActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Remove, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 190, 140, -1));

        btD_Finish.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\finish2.gif"));
        btD_Finish.setMnemonic('F');
        btD_Finish.setText("Finish");
        btD_Finish.setToolTipText(" ");
        btD_Finish.setEnabled(false);
        btD_Finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_FinishActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Finish, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 190, 120, 27));

        btD_SaveEdit.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\save2.gif"));
        btD_SaveEdit.setMnemonic('V');
        btD_SaveEdit.setText("Save Edit");
        btD_SaveEdit.setToolTipText(" ");
        btD_SaveEdit.setVisible(false);
        btD_SaveEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_SaveEditActionPerformed(evt);
            }
        });

        jPanel2.add(btD_SaveEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 190, 120, -1));

        pnlAddHeader.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 780, 230));

        jLabel221.setForeground(new java.awt.Color(0, 0, 153));
        jLabel221.setText("Gross Total");
        pnlAddHeader.add(jLabel221, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 430, 70, 20));

        txtGrossTotal.setBackground(new java.awt.Color(204, 204, 255));
        txtGrossTotal.setEditable(false);
        txtGrossTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pnlAddHeader.add(txtGrossTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 430, 220, 20));

        jLabel16.setForeground(new java.awt.Color(0, 0, 153));
        jLabel16.setText("Discount Amt.");
        pnlAddHeader.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 455, 90, 20));

        cbCustN.setBackground(new java.awt.Color(204, 255, 255));
        cbCustN.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlAddHeader.add(cbCustN, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 190, 20));

        jLabel12.setForeground(new java.awt.Color(0, 0, 153));
        jLabel12.setText("Customer*");
        pnlAddHeader.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 100, 90, 20));

        jLabel131.setForeground(new java.awt.Color(0, 0, 153));
        jLabel131.setText("C.O.  Date *");
        pnlAddHeader.add(jLabel131, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 90, 20));

        cbCoNo.setBackground(new java.awt.Color(204, 255, 255));
        cbCoNo.setFont(new java.awt.Font("Dialog", 0, 12));
        cbCoNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCoNoActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbCoNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 130, 100, 20));

        cbCur.setBackground(new java.awt.Color(204, 255, 255));
        cbCur.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlAddHeader.add(cbCur, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 130, 190, 20));

        txtSL_DscAmt.setBackground(new java.awt.Color(204, 204, 255));
        txtSL_DscAmt.setEditable(false);
        txtSL_DscAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pnlAddHeader.add(txtSL_DscAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 455, 220, 20));

        txtPO_Date.setBackground(new java.awt.Color(204, 255, 153));
        txtPO_Date.setEditable(false);
        txtPO_Date.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pnlAddHeader.add(txtPO_Date, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, 180, 20));

        txtCO_Date.setBackground(new java.awt.Color(204, 255, 153));
        txtCO_Date.setEditable(false);
        txtCO_Date.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pnlAddHeader.add(txtCO_Date, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 130, 180, 20));

        jLabel11.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jLabel11.setForeground(new java.awt.Color(0, 51, 204));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Delivery  Order Cum  Invoice");
        pnlAddHeader.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 380, -1));

        jLabel8.setForeground(new java.awt.Color(0, 0, 153));
        jLabel8.setText("Auth. By *");
        pnlAddHeader.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 160, -1, -1));

        cbAuthBy.setBackground(new java.awt.Color(204, 255, 255));
        cbAuthBy.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlAddHeader.add(cbAuthBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 160, 190, 20));

        add(pnlAddHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 750));

    }//GEN-END:initComponents

    private void jScrollPane1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane1ComponentResized
int h=tblHeader.getRowHeight()*(rowH_Shown+1); 
 if(h<300)
jScrollPane1.setSize(500,h+5);  
 else
     jScrollPane1.setSize(500,300);  
    }//GEN-LAST:event_jScrollPane1ComponentResized

    private void cbD_BchDtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbD_BchDtActionPerformed
        if(rowD_Shown >= 1 && (!editPressed )){

         outer:   for(int i=0;i<rowD_Shown;i++){

                if(dataD_Shown[i][1].equals(cbD_ItN.getSelectedItem())){
                    if(cbD_BchDt.getSelectedIndex()>0){ 
                    System.out.println("966\t"+cbD_BchDt.getSelectedItem());    
                    StringTokenizer st = new StringTokenizer(""+cbD_BchDt.getSelectedItem(),"-");
                    String temp=st.nextToken();
                    System.out.println("968\t"+temp);
                    for(int j=0;j<rowD_Shown;j++)
                  if(dataD_Shown[j][2].toString().trim().equals(temp.trim())){   
                    cbD_BchDt.setSelectedIndex(0);
JOptionPane.showMessageDialog(this,"You have already selected this Batch No. for the selected Item!","Select another Batch No.",JOptionPane.INFORMATION_MESSAGE);                        
                    break outer;
                    }//end inner if
                    }//end if(cbD_BchDt.getSelectedIndex()>0)
                }//end if
            }//end for

        }//end  if


    }//GEN-LAST:event_cbD_BchDtActionPerformed

    private void btCancelPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelPOActionPerformed
cancelDO();

    }//GEN-LAST:event_btCancelPOActionPerformed

    private void btD_SaveEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_SaveEditActionPerformed
        modDetails();

    }//GEN-LAST:event_btD_SaveEditActionPerformed

    private void btD_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_EditActionPerformed
        editPressed=true;
        detailsModify();
        clickD=false;
        editPressed = false;

    }//GEN-LAST:event_btD_EditActionPerformed

    private void tblHeaderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHeaderMouseClicked
clickH=true;
selrowH=tblHeader.getSelectedRow();                

    }//GEN-LAST:event_tblHeaderMouseClicked

    private void tblHeaderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblHeaderKeyReleased
        if( evt.getKeyCode() == evt.VK_UP || evt.getKeyCode() == evt.VK_DOWN || evt.getKeyCode() == evt.VK_TAB){
              selrowH = tblHeader.getSelectedRow() ;
              
            if(selrowH>=0)
                clickH = true;
            else
                clickH = false;

        }

    }//GEN-LAST:event_tblHeaderKeyReleased

    private void pnlHomeComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlHomeComponentShown
fillHeaderTbl();  
    }//GEN-LAST:event_pnlHomeComponentShown

    private void cbStoreListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbStoreListActionPerformed
System.out.println("2068");
        if(rowH_Raw!=0)
        fillHeaderTbl();   
else{
JOptionPane.showMessageDialog(this,"The DataBase is currently empty.","From the DataBase:",JOptionPane.INFORMATION_MESSAGE);    
cbStoreList.setSelectedIndex(0);
}    

    }//GEN-LAST:event_cbStoreListActionPerformed

    private void cbToYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbToYYActionPerformed
if(rowH_Raw!=0){
    if( rangeMatching)
         fillHeaderTbl();  
    }//end if
else{
JOptionPane.showMessageDialog(this,"The DataBase is currently empty.","From the DataBase:",JOptionPane.INFORMATION_MESSAGE);    
 cbToYY.setSelectedItem("2100");
}    

    }//GEN-LAST:event_cbToYYActionPerformed

    private void cbToMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbToMMActionPerformed
if(rowH_Raw!=0){
    if( rangeMatching)
         fillHeaderTbl();  
    }//end if
else{
JOptionPane.showMessageDialog(this,"The DataBase is currently empty.","From the DataBase:",JOptionPane.INFORMATION_MESSAGE);    
cbToMM.setSelectedIndex(11);
}

    }//GEN-LAST:event_cbToMMActionPerformed

    private void cbToDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbToDDActionPerformed
if(rowH_Raw!=0){
    if( rangeMatching)
        fillHeaderTbl();   
    }//end if
else{
JOptionPane.showMessageDialog(this,"The DataBase is currently empty.","From the DataBase:",JOptionPane.INFORMATION_MESSAGE);    
cbToDD.setSelectedIndex(30);
}

    }//GEN-LAST:event_cbToDDActionPerformed

    private void cbFrYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFrYYActionPerformed
if(rowH_Raw!=0){
    if( rangeMatching)
         fillHeaderTbl();  
    }//end if
else{
JOptionPane.showMessageDialog(this,"The DataBase is currently empty.","From the DataBase:",JOptionPane.INFORMATION_MESSAGE);    
cbFrYY.setSelectedIndex(0);
}    
    }//GEN-LAST:event_cbFrYYActionPerformed

    private void cbFrMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFrMMActionPerformed
if(rowH_Raw!=0){
    if( rangeMatching)
         fillHeaderTbl();  
    }//end if
else{
JOptionPane.showMessageDialog(this,"The DataBase is currently empty.","From the DataBase:",JOptionPane.INFORMATION_MESSAGE);    
cbFrMM.setSelectedIndex(0);
}
    }//GEN-LAST:event_cbFrMMActionPerformed

    private void cbFrDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFrDDActionPerformed
if(rowH_Raw!=0){
    if( rangeMatching)
        fillHeaderTbl();  
    }//end if
else{
JOptionPane.showMessageDialog(this,"The DataBase is currently empty.","From the DataBase:",JOptionPane.INFORMATION_MESSAGE);    
cbFrDD.setSelectedIndex(0);
}

    }//GEN-LAST:event_cbFrDDActionPerformed

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
try{
    updateDatabase();
}
catch(Exception e){
    System.out.println("1865\t"+e);
}


    }//GEN-LAST:event_btSaveActionPerformed

    private void btD_FinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_FinishActionPerformed
btSave.setEnabled(true);
btD_Add.setEnabled(false);
btD_Edit.setEnabled(false);
btD_Remove.setEnabled(false);
btD_Finish.setEnabled(false);

    }//GEN-LAST:event_btD_FinishActionPerformed

    private void tblDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetailsMouseClicked
clickD=true;
if(tblDetails.isEnabled())
selrowD=tblDetails.getSelectedRow();      

    }//GEN-LAST:event_tblDetailsMouseClicked

    private void btD_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_RemoveActionPerformed
        if(clickD){//item selected from Details Table---------- main if
            
removeDetails=true;            //generate SQL statements to delete items
if(!add && rowD_Shown>0){   
    try{
deleteDetails[deleteNo] = "DELETE FROM DO_D WHERE DO_No = '"+txtCode.getText()+"' AND Item_Code = (SELECT itemNo FROM Item_M WHERE itemName = '"+dataD_Total[selrowD][1] + "') AND Batch_No ='"+dataD_Shown[selrowD][2]+"'"; 
storeDeleted[deleteNo]=updateStoreTbl(selrowD,true);
deleteNo++;
    }//end try
    catch(ArrayIndexOutOfBoundsException e){
        System.out.println("1761");
JOptionPane.showMessageDialog(this,"The max. no. of permitted delete operation is 50 for a given table.\nIf you want to delete still more items from the table, select the P.O. No. from the main table and try again.","Sorry!",JOptionPane.INFORMATION_MESSAGE);            
        deleteArrayOverflow=true;
    }//end catch
}//end if(!add && rowD_Shown>0){   
     
//to remove item from table
    if(!deleteArrayOverflow){
     for(int i=0;i<rowD_Shown;i++)
            for(int j=0;j<COL_D_SHOWN;j++){
                                if( i >= selrowD && i < (rowD_Shown-1) ){
                                    if(j==0)
                                        dataD_Total[i][j] ="" + (i+1);
                                    else
                    dataD_Total[i][j] = dataD_Total[i+1][j]; 
                                }
                            }//end for
        
                     rowD_Shown --;                    
dataD_Shown = new Object[rowD_Shown][COL_D_SHOWN];
                          for(int i=0;i<rowD_Shown;i++)
            for(int j=0;j<COL_D_SHOWN;j++)
                dataD_Shown[i][j] = dataD_Total[i][j];
                                             dataD_Total=dataD_Shown ;
            txtD_SlNo.setText("" + (rowD_Shown+1));                                                      

            showDetailsTbl();
            
    }//end if(!deleteArrayOverflow){

if(rowD_Shown<=1 || deleteArrayOverflow)
btD_Remove.setEnabled(false);
else
    btD_Remove.setEnabled(true);

if(rowD_Shown==1 && add)
    btD_Remove.setEnabled(true);
    
if(rowD_Shown==0)
    btD_Edit.setEnabled(false);
else
    if(!add)
    btD_Edit.setEnabled(true);

if(rowD_Shown!=0)
btD_Finish.setEnabled(true);
else
    btD_Finish.setEnabled(false);

if(!btD_Add.isEnabled())
    btD_Add.setEnabled(true);

    resetDetails(); 
    clickD=false;
    
    fillAmts();
        }//end main if
           else 
            JOptionPane.showMessageDialog(this,"Select the row you want to delete.","Error!",JOptionPane.INFORMATION_MESSAGE);                
        
            tblDetails.clearSelection();

    }//GEN-LAST:event_btD_RemoveActionPerformed
                          
    private void cbCoNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCoNoActionPerformed
if(cbCoNo.getSelectedIndex()>0)
    txtCO_Date.setText(""+coH.queryOneEle(5,"WHERE CO_No = '"+cbCoNo.getSelectedItem()+"'"));
else
    txtCO_Date.setText("[Select a C.O. No.]");
    }//GEN-LAST:event_cbCoNoActionPerformed

    private void cbPoNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPoNoActionPerformed
if(cbPoNo.getSelectedIndex()>0)
    txtPO_Date.setText(""+poH.queryOneEle(3,"WHERE POM_No = '"+cbPoNo.getSelectedItem()+"'"));
else
    txtPO_Date.setText("[Select a P.O. No.]");
    }//GEN-LAST:event_cbPoNoActionPerformed

    private void cbTaxSlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTaxSlActionPerformed
try{
            if(cbTaxSl.getSelectedIndex()!=0){
            String s = ""+cbTaxSl.getSelectedItem();
            StringTokenizer st = new StringTokenizer(s , "-");
            while( st.hasMoreTokens() ){
                String ss = st.nextToken();
                StringBuffer sb = new StringBuffer(st.nextToken());
                sb.setLength(sb.length()-1);
                taxSl = Double.parseDouble(sb.toString())/100;
            }//end while
            }//end if
            else
                taxSl=0;
                fillAmts();    
        }//end try
        catch(NumberFormatException e){
System.out.println(e+"\n1175");
        }//end catch*/


    }//GEN-LAST:event_cbTaxSlActionPerformed

    private void cbDisSlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDisSlActionPerformed
        try{
  
            if(cbDisSl.getSelectedIndex()!=0){
            String s = ""+cbDisSl.getSelectedItem();
            StringTokenizer st = new StringTokenizer(s , "-");
            while( st.hasMoreTokens() ){
                String ss = st.nextToken();
                StringBuffer sb = new StringBuffer(st.nextToken());
                sb.setLength(sb.length()-1);
                disSl = Double.parseDouble(sb.toString())/100;
                }//end while
            }//end if
            else
                disSl=0;
                fillAmts();    

        }//end try
        catch(NumberFormatException e){
System.out.println(e+"\n1175");
        }//end catch*/
             

    }//GEN-LAST:event_cbDisSlActionPerformed

    private void txtD_BlPrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_BlPrFocusLost
blPr=checkFloatNumber(txtD_BlPr);
fillAmts();
    }//GEN-LAST:event_txtD_BlPrFocusLost

    private void txtD_PcPrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_PcPrFocusLost
pcPr=checkFloatNumber(txtD_PcPr);
fillAmts();
    }//GEN-LAST:event_txtD_PcPrFocusLost

    private void txtD_PcQtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_PcQtFocusLost
pcQt=checkIntNumber(txtD_PcQt);
fillAmts();
    }//GEN-LAST:event_txtD_PcQtFocusLost

    private void txtD_BlQtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_BlQtFocusLost
blQt=checkIntNumber(txtD_BlQt);
fillAmts();

    }//GEN-LAST:event_txtD_BlQtFocusLost

    private void txtD_PcQtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtD_PcQtActionPerformed

    }//GEN-LAST:event_txtD_PcQtActionPerformed

    private void txtD_BlPrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtD_BlPrActionPerformed

    }//GEN-LAST:event_txtD_BlPrActionPerformed

    private void txtD_PcPrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtD_PcPrActionPerformed

    }//GEN-LAST:event_txtD_PcPrActionPerformed

    private void txtD_LsPrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_LsPrFocusLost
lsPr=checkFloatNumber(txtD_LsPr);
fillAmts();
    }//GEN-LAST:event_txtD_LsPrFocusLost

    private void pnlAddHeaderComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlAddHeaderComponentHidden
pnlHeaderShown = false;
removeDetails=false;
deleteArrayOverflow=false;
deleteNo=0;
        for(int i=0;i<rowD_Shown;i++)
            for(int j=0;j<COL_D_SHOWN;j++)
               dataD_Total[i][j]="";
                resetDetails(); 
                rowD_Shown=0;
                 changeDetailsTbl();    

    }//GEN-LAST:event_pnlAddHeaderComponentHidden

    private void txtD_LsQtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_LsQtFocusLost
lsQt=checkIntNumber(txtD_LsQt);
fillAmts();

    }//GEN-LAST:event_txtD_LsQtFocusLost

    private void btD_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_AddActionPerformed
        if(rowD_Shown>=50){
            btD_Add.setEnabled(false);
            JOptionPane.showMessageDialog(this,"You are not allowed to add more than 50 Items in a single Delivery Order. \nIf you want to add more, create a new Delivery Order.","Error!",JOptionPane.INFORMATION_MESSAGE);
        }//end if
        else{//main else
            
            if(checkDetailsValidation()){
                rowD_Shown ++ ;
                changeDetailsTbl();
                txtD_SlNo.setText("" + (rowD_Shown+1));
                resetDetails();
                if(!deleteArrayOverflow)
                    btD_Remove.setEnabled(true);
                btD_Finish.setEnabled(true);
                if(rowD_Shown>0)
                    btD_Edit.setEnabled(true);
            }//end if
        }//end main else
        

    }//GEN-LAST:event_btD_AddActionPerformed

    private void cbD_TaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbD_TaxActionPerformed
        try{
    
        if(cbD_Tax.getSelectedIndex()!=0){
            StringTokenizer st = new StringTokenizer(cbD_Tax.getSelectedItem().toString() , "-");
            while( st.hasMoreTokens() ){
                String ss = st.nextToken();
                StringBuffer sb = new StringBuffer(st.nextToken());
                sb.setLength(sb.length()-1);
                taxD = Double.parseDouble(sb.toString())/100;
            }//end while
            }//end if
            else   
                taxD=0;
        }//end try
        catch(NumberFormatException e){
System.out.println(e+"\n1199");
        }//end catch*/
        
        fillAmts();


    }//GEN-LAST:event_cbD_TaxActionPerformed

    private void cbD_DisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbD_DisActionPerformed
        try{
  
            if(cbD_Dis.getSelectedIndex()!=0){
            StringTokenizer st = new StringTokenizer(""+cbD_Dis.getSelectedItem() , "-");
            while( st.hasMoreTokens() ){
                String ss = st.nextToken();
                StringBuffer sb = new StringBuffer(st.nextToken());
                sb.setLength(sb.length()-1);
                disD = Double.parseDouble(sb.toString())/100;
                }//end while
            }//end if
            else
                disD=0;
        }//end try
        catch(NumberFormatException e){
System.out.println(e+"\n1219");
        }//end catch*/
fillAmts();
    }//GEN-LAST:event_cbD_DisActionPerformed

    private void cbAddStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAddStoreActionPerformed

       removeItemComboElements();           
        
        if(cbAddStore.getSelectedIndex()>0 ){
            
    Object storeId = storeM.queryOneEle(2,"WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'");
    String ss = "Store_"+storeId;//to get the table corresponding to that store
    //to fill item name combo
    LinkDB strTbl = new LinkDB(ss);
    System.out.println("778");
    int row = strTbl.queryRow("");

    if(row==0){
        JOptionPane.showMessageDialog(this,"This Store is empty.\nSelect another Store.","You have selected an empty Store!",JOptionPane.INFORMATION_MESSAGE);
        cbAddStore.setSelectedIndex(0);
    }
    else{
        storeTblSpecific=ss;
      removeBatchComboElements();
            
            int k=0;  
            if(add)
            k = JOptionPane.showConfirmDialog(this,"You are allowed to select the Store Name only once.           \nAre you sure your selection is correct?","Confirm your selection....",JOptionPane.YES_NO_OPTION);
            if(k==0){
    Object item[] = new Object[row];
    item = strTbl.query1Col(row,2,true,"");
    
    try{
    for(int i=0;i<item.length;i++)
        if(item[i].equals("null"))
            break;
        else
        cbD_ItN.addItem(itemM.queryOneEle(3,"WHERE itemNo = '"+item[i]+"'"));
    }//end try
    catch(java.lang.NullPointerException e){
        System.out.println("784 :\t"+e);
    }
    
        cbAddStore.setEnabled(false);
            }//end if(k==0)
            
            else
                cbAddStore.setSelectedIndex(0);
}//end if(cbAddStore.getSelectedIndex()!=0)
        }//end else-- if(row==0)
    }//GEN-LAST:event_cbAddStoreActionPerformed

    private void cbD_ItNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbD_ItNActionPerformed
        //to fill batch no. & exp. date
        removeBatchComboElements();
        if(cbD_ItN.getSelectedIndex()>0){     
        LinkDB strTbl = new LinkDB( storeTblSpecific);
        if(!add) 
        strTbl.fillCombo(cbD_BchDt,"BatchNo"," - ","ExpiryDate","","WHERE ItemNo = '"+itemM.queryOneEle(2,"WHERE itemName = '"+cbD_ItN.getSelectedItem()+"'")+"'","ExpiryDate"); 
        else
        strTbl.fillCombo(cbD_BchDt,"BatchNo"," - ","ExpiryDate","","WHERE ItemNo = '"+itemM.queryOneEle(2,"WHERE itemName = '"+cbD_ItN.getSelectedItem()+"'")+"' AND ClosingStock>0","ExpiryDate");             

        }//end if(cbD_ItN.getSelectedIndex()!=0)

            

    }//GEN-LAST:event_cbD_ItNActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void pnlAddHeaderComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlAddHeaderComponentShown
     
        pnlHeaderShown = true;
        detailsEditable();
        btSave.setEnabled(false);
        btD_Add.setVisible(true);
        btD_Add.setEnabled(true);
        btD_SaveEdit.setVisible(true);
        btD_SaveEdit.setEnabled(false);
      
        btD_Edit.setEnabled(false);
      
      btD_Edit.setVisible(true);
      btD_Finish.setVisible(true);
      btD_Finish.setEnabled(false);
      btD_Remove.setVisible(true);
      btD_Remove.setEnabled(false);

 
        if(add){
            
            generateCode_DO();
resetDetails();
resetHeader();
headerEditable();

                     
}//end if
        else{
            headerUnEditable();
                 btD_Edit.setEnabled(true);
                                    btD_Remove.setEnabled(true);
if(rowD_Shown==1)
btD_Remove.setEnabled(false);                                    
            
        }//end else


    }//GEN-LAST:event_pnlAddHeaderComponentShown

    private void btD_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_CancelActionPerformed
        addCancelPressed();
    }//GEN-LAST:event_btD_CancelActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
this.setVisible(false);
    }//GEN-LAST:event_btExitActionPerformed
 
    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
  //      searchPressed();
        
    }//GEN-LAST:event_btSearchActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
addPressed();
    }//GEN-LAST:event_btAddActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
         
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
   /* public static void main(String args[]) {
        new DO_Cum_Inv().show();
    }*/

    //METHOD DECLARATION
    
    private String updateStoreTbl(int i,boolean delete){
        
                     LinkDB st = new LinkDB(storeTblSpecific);
                     
                     String cond = "WHERE ItemNo = '"+itemM.queryOneEle(2,"WHERE itemName = '"+dataD_Shown[i][1]+"'")+"' AND BatchNo ='"+dataD_Shown[i][2]+"'"; 
                     String cond1 = "WHERE DO_No = '"+txtCode.getText()+"' AND Item_Code = '"+itemM.queryOneEle(2,"WHERE ItemName = '"+dataD_Shown[i][1]+"'")+"' AND Batch_No ='"+dataD_Shown[i][2]+"'"; 
                     Object[] val = new Object[2];
                     lsQt = Long.parseLong(""+dataD_Shown[i][4]);
                     pcQt = Long.parseLong(""+dataD_Shown[i][6]);
                     blQt = Long.parseLong(""+dataD_Shown[i][8]);
                     int packPerBulk = Integer.parseInt(""+st.queryOneEle(9,cond));
                     int loosePerPack = Integer.parseInt(""+st.queryOneEle(8,cond));
                     long currentIssues = lsQt +(pcQt + blQt*packPerBulk)*loosePerPack;
                     lsQt = 0;
                     pcQt = 0;
                     blQt = 0;      
                     if(!add)
                         if(delete)
                             currentIssues=-currentIssues;
                         else
                            currentIssues=currentIssues - (Long.parseLong(""+doD.queryOneEle(7,cond1))+(Long.parseLong(""+doD.queryOneEle(9,cond1))+Long.parseLong(""+doD.queryOneEle(11,cond1))*packPerBulk)*loosePerPack);
                                     
                     System.out.println("currentIssues "+currentIssues); 
                     val[0]=""+ (Long.parseLong(""+st.queryOneEle(5,cond))+currentIssues);
                     val[1]=""+ (Long.parseLong(""+st.queryOneEle(10,cond))-currentIssues);
                     String ss=""+st.modifyData(new int[]{5,10},val,cond);
                     
                     return ss;
        
    }//end 
    
    private void saveModifiedDetails()throws java.sql.SQLException{
    //to delete selected data
     if(removeDetails){
         
    try{
        accessDB();
         for(int i=0;i<deleteNo;i++){
System.out.println(deleteDetails[i]); 
               stat.executeUpdate(storeDeleted[i]);
System.out.println(storeDeleted[i]);                
              stat.executeUpdate(deleteDetails[i]);            
         }//end for
         
    con.close();
   
    }//end try
    
    catch(Exception e){
        System.out.println(e+"    2584");
    }//end exception
         
         
     }//end if removeDetails
     
     String[] ss = new String[rowD_Shown];
     String[] store = new String[rowD_Shown];
     String[] ssMod = new String[rowD_Shown];
     String[] srlNo = new String[rowD_Shown];//to update the serial no.
         
              for(int i=0;i<rowD_Shown;i++){
                  
                  String cond = "WHERE DO_No = '"+txtCode.getText()+"' AND Item_Code = '"+itemM.queryOneEle(2,"WHERE itemName = '"+dataD_Shown[i][1]+"'")+"' AND Batch_No ='"+dataD_Shown[i][2]+"'"; 
                  srlNo[i]=doD.modifyData(new int[]{3},new Object[]{""+dataD_Shown[i][0]},cond);
                  int test = doD.queryRow(cond);
   if(test>0 ){
       if( row_modified[i]){
        ss[i] =doD.addData(new int[]{2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17},findValuesDO_D(i));                                                                       
        ssMod[i]=doD.modifyData(new int[]{18,19},new Object[]{"Y",""+curDate},cond);
        store[i]=updateStoreTbl(i,false);
   }
   }
   else{
        ss[i] =doD.addData(new int[]{2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17},findValuesDO_D(i));                                                                        
       add=true;
       store[i]=updateStoreTbl(i,false);
       add=false;
   }
                                                   
              }//end for
     
     //to insert/update database

     try{
         
     accessDB();
     //con.setAutoCommit(false);
         
     for(int i=0;i<rowD_Shown;i++){
         if(store[i]!=null){
System.out.println(store[i]);          
         stat.executeUpdate(store[i]);
     }       
         if(ssMod[i]!=null){
System.out.println("ssMod[i] = "+ssMod[i]);              
             stat.executeUpdate(ssMod[i]);
         }
                           if(ss[i]!=null){
System.out.println(ss[i]);          
        stat.executeUpdate(ss[i]);
                           }//end if
         stat.executeUpdate(srlNo[i]);
     }//end for
         
     //con.commit();
     con.close();
     }
     catch(java.lang.NullPointerException e){
         System.out.println("NULL POINTER EXCEPTION IN saveModifiedDetails");
     }
     catch(Exception e){
              System.out.println("ERROR IN saveModifiedDetails():1522 \t"+e);      
              //con.rollback();
              //con.setAutoCommit(true);
              con.close();
     }
     
    fillHeaderTbl(); 
        pnlHome.setVisible(true);
        pnlAddHeader.setVisible(false);

         
    }//end saveModifiedDetails()
    
    private boolean checkHeaderValidation() {
        
        boolean headerIsValid=false;
        
        if(cbCustN.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(this,"Select an Item from the list of Customers","No Customer selected!",JOptionPane.INFORMATION_MESSAGE);
        headerIsValid=false;
        }//end if
        else if(cbCur.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(this,"Select an Item from the list of Currency","No Currency selected!",JOptionPane.INFORMATION_MESSAGE);
        headerIsValid=false;
        }//end else if
        else if(cbDisSl.getSelectedIndex()==0 ||cbTaxSl.getSelectedIndex()==0 ){
            int k=JOptionPane.showConfirmDialog(this,"You have selected the default value for Discount or Tax.\nAre you sure your selection is correct?","Default value selected",JOptionPane.YES_NO_OPTION );
            if(k==0)
                headerIsValid=true;
            else
                headerIsValid=false;
        }//end else if
        else if(cbAuthBy.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(this,"Select an Item from the list of Authorised By","",JOptionPane.INFORMATION_MESSAGE);
            headerIsValid=false;
        }//end if

        else
            headerIsValid=true;
        
        return headerIsValid;
        
    }//end
    
    private Object[] findValuesDO_H(){
        Object[] val = new Object[doH.no_of_cols-1];
        
        val[0] = ""+txtCode.getText();
        val[1]=""+cbDO_DD.getSelectedItem()+"/"+cbDO_MM.getSelectedItem()+"/"+cbDO_YY.getSelectedItem();
        val[2]=custM.queryOneEle(2,"WHERE CustName = '"+cbCustN.getSelectedItem()+"'");
        
        val[3]="    ";
        val[4]="    ";
        if(cbCoNo.getSelectedIndex()>0){
            val[3]=cbCoNo.getSelectedItem();
            val[4]=""+txtCO_Date.getText();
        }//end if
        
        val[5]="    ";
        val[6]="    ";
        if(cbPoNo.getSelectedIndex()>0){
            val[5]=cbPoNo.getSelectedItem();
            val[6]=""+txtPO_Date.getText();
        }//end if
        
        val[7]=curM.queryOneEle(2,"WHERE CM_Name = '"+cbCur.getSelectedItem()+"'");
        
        val[8] ="";
        if(cbDisSl.getSelectedIndex()>0){
                 StringTokenizer st = new StringTokenizer(""+cbDisSl.getSelectedItem() , "-");
                 val[8] = ""+disM.queryOneEle(2,"WHERE DM_Name = '"+st.nextToken().trim()+"'");
        }//end if
        
        val[10]="";       
        if(cbTaxSl.getSelectedIndex()>0){
                 StringTokenizer st = new StringTokenizer(""+cbTaxSl.getSelectedItem() , "-");
                 val[10] = ""+taxM.queryOneEle(2,"WHERE TaxDesc = '"+st.nextToken().trim()+"'");
        }//end if
        
       
        val[9]=""+txtSL_DscAmt.getText();

        val[11]=""+txtSL_TaxAmt.getText();
        
        val[12]=""+txtNetTotal.getText();
        
        val[13]=storeM.queryOneEle(2,"WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'");
        
        val[14]="N";
        
        val[15]="Y";
        
        val[16]="N";        
        return val;
    }//end findValuesDO_H
    
    //end findValuesDO_D
    
    private long checkIntNumber(javax.swing.JTextField txtFld){
           long num=0;
         if(txtFld.getText().trim().equals("")){
                txtFld.setText("0");
                txtFld.selectAll();
                txtFld.requestFocus();             
                JOptionPane.showMessageDialog(this,"This Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    

        }//end else if
         
         else
       try{
            num=Long.parseLong(txtFld.getText());   
            if(num<0){
                num=0;
                txtFld.setText("0");
                txtFld.requestFocus();
                txtFld.selectAll();
                JOptionPane.showMessageDialog(this,"This Field cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
            }//end if
        }//end try
        catch(NumberFormatException e){
            txtFld.setText("0");
            txtFld.selectAll();
            txtFld.requestFocus();
JOptionPane.showMessageDialog(this,"Enter a valid number(Integer)!","Error!",JOptionPane.ERROR_MESSAGE);    
        }//end catch
            return num;
    }//end checkNumber

    private double checkFloatNumber(javax.swing.JTextField txtFld){
         double num=0;
         if(txtFld.getText().trim().equals("")){
                txtFld.setText("0.00");
                txtFld.selectAll();
                txtFld.requestFocus();             
                JOptionPane.showMessageDialog(this,"This Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    

        }//end else if
         
         else
       try{
            num=Double.parseDouble(txtFld.getText());   
            if(num<0){
                num=0;
                txtFld.setText("0.00");
                txtFld.requestFocus();
                txtFld.selectAll();
                JOptionPane.showMessageDialog(this,"This Field cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
            }//end if
            else{     
            String s = adjustDecimal(""+num);
            txtFld.setText(s);
            num=Double.parseDouble(s);   
            
            }//end else
               
        }//end try
        catch(NumberFormatException e){
            txtFld.setText("0.00");
            txtFld.requestFocus();
JOptionPane.showMessageDialog(this,"Enter a valid number!","Error!",JOptionPane.ERROR_MESSAGE);    
txtFld.selectAll();
        }//end catch
 return num;       
    }//end checkNumber
    
    
    //end removeItemComboElements
    
    //end removeBatchComboElements
    
    public void accessDB() {
        try {
        	con=new LinkDB().getConnection();
            stat=con.createStatement();
        }
        catch(Exception ex) {
            System.out.println(ex);
        }
    }    //end accessDB
    
    
    private void fillDaysInCombo(javax.swing.JComboBox cbName){
        
    for(int i=1;i<=31;i++){//DDMM for loop
        if(i<10)
            cbName.addItem("0"+i);
            
        else
            cbName.addItem(""+i);
 }//end DDMM for loop
        
    }//end fillDaysInCombo

    
    private void fillMonthsInCombo(javax.swing.JComboBox cbName){
        
    for(int i=1;i<=12;i++){//DDMM for loop
        if(i<10)
            cbName.addItem("0"+i);
            
        else
            cbName.addItem(""+i);

    }//end DDMM for loop
        
    }//end fillDaysInCombo

    
    private void fillYearsInCombo(javax.swing.JComboBox cbName){
        
    for(int i=1950;i<=2100;i++)
            cbName.addItem(""+i);        
    }
    
    private void addPressed() {
        
        add=true;
        pnlHome.setVisible(false);
        pnlAddHeader.setVisible(true);
    }
    
    private void addCancelPressed() {
        txtCode.setText("");
        
        add=false;
        pnlAddHeader.setVisible(false);
        pnlHome.setVisible(true);
    }
    
    private void detailsEditable() {
        cbD_ItN.setEnabled(true);
        cbD_BchDt.setEnabled(true);
        tblDetails.setEnabled(true);
        
    }
    
    private void generateCode_DO() {
       int ctr = Integer.parseInt(""+semaPhores.queryOneEle(4,"WHERE TableName = 'DO_H'"));
       String prefix = ""+semaPhores.queryOneEle(3,"WHERE TableName = 'DO_H'");
               if(prefix.equals("null"))
       prefix="";
       txtCode.setText(""+prefix+ctr);
        
    }
    
    private void resetDetails() {
        cbD_ItN.setEnabled(true);
        cbD_ItN.setSelectedIndex(0);
        cbD_Dis.setSelectedIndex(0);
        cbD_Tax.setSelectedIndex(0);
        
        txtD_LsQt.setText("0");
        txtD_LsPr.setText("0");
        txtD_PcQt.setText("0");
        txtD_PcPr.setText("0");
        txtD_BlQt.setText("0");
        txtD_BlPr.setText("0");
        txtD_NtPr.setText("0");
        
        txtD_LsQt.selectAll();
        txtD_LsPr.selectAll();
        txtD_PcQt.selectAll();
        txtD_PcPr.selectAll();
        txtD_BlQt.selectAll();
        txtD_BlPr.selectAll();
        txtD_NtPr.selectAll();
        
        lsQt=0;lsPr=0;pcQt=0;pcPr=0;blQt=0;blPr=0;
        
    }
    
    private void resetHeader() {
        cbAddStore.setEnabled(true);
        cbAddStore.setSelectedIndex(0);
        cbPoNo.setSelectedIndex(0);
        cbCoNo.setSelectedIndex(0);
        cbCur.setSelectedIndex(0);
        cbCustN.setSelectedIndex(0);
        cbDisSl.setSelectedIndex(0);
        cbTaxSl.setSelectedIndex(0);
        cbDO_DD.setSelectedIndex(curDate.getDate()-1);
        cbDO_MM.setSelectedIndex(curDate.getMonth());
        cbDO_YY.setSelectedIndex( curDate.getYear()-50 );
        disSl=0;
        taxSl=0;
        txtGrossTotal.setText("0.00");
        txtNetTotal.setText("0.00");
        grossTotal=0;
        netTotal=0;
        txtPO_Date.setText("[Select a P.O. No.]");
        txtCO_Date.setText("[Select a C.O. No.]");
        txtSL_DscAmt.setText("0.00");
        txtSL_TaxAmt.setText("0.00");
        
    }
    
    private void headerEditable() {
        cbDO_DD.setEnabled(true);
        cbDO_MM.setEnabled(true);
        cbDO_YY.setEnabled(true);
        cbAddStore.setEnabled(true);
        cbPoNo.setEnabled(true);
        cbCur.setEnabled(true);
        cbDisSl.setEnabled(true);
        cbTaxSl.setEnabled(true);
        cbCoNo.setEnabled(true);
        cbCustN.setEnabled(true);
      }
    
    private void headerUnEditable() {
        cbDO_DD.setEnabled(false);
        cbDO_MM.setEnabled(false);
        cbDO_YY.setEnabled(false);
        cbAddStore.setEnabled(false);
        cbPoNo.setEnabled(false);
        cbCur.setEnabled(false);
        cbDisSl.setEnabled(false);
        cbTaxSl.setEnabled(false);
        cbCoNo.setEnabled(false);
        cbCustN.setEnabled(false);
        
        
    }
        
    private void updateCode_DO() {
               int ctr = Integer.parseInt(""+semaPhores.queryOneEle(4,"WHERE TableName = 'DO_H'"))+1;
               String ss1 = semaPhores.modifyData(new int[]{4},new Object[]{""+ctr},"WHERE TableName = 'DO_H'");
               
               
        try{
            accessDB();
            stat.executeUpdate(ss1);
            con.close();
        }//end try
        catch(Exception e){
            System.out.println(e+"\n2753");
        }//end catch
    }
    
    private void fillHeaderTbl(){
     int rows=0;   
        //check for empty database but do not show any message
        
        if(doH.queryRow("")==0)
            dataH_Shown = new Object[0][COLUMN_H_SHOWN.length];
        else if(cbStoreList.getSelectedIndex()==0){
            
            preStore = "[All Items]";
            
            rows = doH.queryRow("");
            
            rowH_Raw = rows;
            
            dataH_Raw = new Object[rowH_Raw][COLUMN_H_SHOWN.length]; 
            
            dataH_Raw = doH.queryMulCols(rowH_Raw,new int[]{2,3,4,14,16},"");
            }//end if
        else{//main else
            Object storeId = storeM.queryOneEle(2,"WHERE StoreName = '"+cbStoreList.getSelectedItem()+"'");
            
            rows = doH.queryRow("WHERE Store_ID = '"+storeId+"'");
            
    if(rows>0){  
        
            preStore=""+cbStoreList.getSelectedItem();
        
            rowH_Raw=rows;
            
            dataH_Raw = new Object[rowH_Raw][COLUMN_H_SHOWN.length]; 
         
            dataH_Raw = doH.queryMulCols(rowH_Raw,new int[]{2,3,4,14,16},"WHERE Store_ID = '"+storeId+"'");
    }//end if
    else{
        JOptionPane.showMessageDialog(this,"Sorry: No items were found according to your choice of Store","From the DataBase",JOptionPane.INFORMATION_MESSAGE);
        cbStoreList.setSelectedItem(preStore);
    }//end else
        }//end main else
        
    if(rows>0){
    
     for(int i=0;i<rowH_Raw;i++)
            dataH_Raw[i][2]=""+custM.queryOneEle(3,"WHERE CustCode = '"+dataH_Raw[i][2]+"'");
     
     dateConstraint(dataH_Raw,rowH_Raw);

            rowH_Shown=rowH_Date;
        
            dataH_Shown = new Object[rowH_Shown][COLUMN_H_SHOWN.length];
            dataH_Shown=dataH_Date;
    }//if 

   showHeaderTbl();
            
    }//end 
    
    private void showHeaderTbl() {
        for(int i=0;i<rowH_Shown;i++)
            dataH_Shown[i][3]=new Float(""+dataH_Shown[i][3]);
        
        tblHeader.setModel(new javax.swing.table.DefaultTableModel(dataH_Shown,COLUMN_H_SHOWN) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [5];//the default values of the array is 'false'

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        }); //end tableModel
        

    }//end 
    
    private void showDetailsTbl() {
        
        for(int i=0;i<rowD_Shown;i++)
            for(int j=0;j<COL_D_SHOWN;j++)
                try{
                if(j==0||j==4||j==6||j==8)
                    dataD_Shown[i][j]=new Integer(""+dataD_Shown[i][j]);
                else if(j==5||j==7||j==9||j==11||j==13||j==14)
                    dataD_Shown[i][j]=new Float(""+dataD_Shown[i][j]);
                }
                catch(Exception e){
                    System.out.println("1292 i="+i+" j="+j+"\t"+e);
                }
        
        tblDetails.setModel(new javax.swing.table.DefaultTableModel(
        dataD_Shown,new String [COL_D_SHOWN] ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Object.class, java.lang.Float.class, java.lang.Object.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [15];

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
//end table model
        
        dataD_Total = dataD_Shown;
        
    }//end showDetailsTbl() 
    
    private void changeDetailsTbl() {
        
        if(rowD_Shown == 0)
            txtD_SlNo.setText("1");

        dataD_Shown = new Object[rowD_Shown][COL_D_SHOWN];
        for(int i=0;i<(rowD_Shown -1);i++)
            for(int j=0;j<COL_D_SHOWN;j++)
                dataD_Shown[i][j] = dataD_Total[i][j];
        if(rowD_Shown != 0 )
            fillDetailsTbl(rowD_Shown-1);
        
        showDetailsTbl();
        
    }
    
    private void fillDetailsTbl(int r) {
        dataD_Shown[r][0] = ""+txtD_SlNo.getText();
        dataD_Shown[r][1] =cbD_ItN.getSelectedItem();

            
        StringTokenizer st = new StringTokenizer(cbD_BchDt.getSelectedItem().toString() , "-");
            
                    dataD_Shown[r][2] =st.nextToken();
                    dataD_Shown[r][3] =st.nextToken();
        
        dataD_Shown[r][4] =""+lsQt;
        dataD_Shown[r][5] =""+lsPr;
        dataD_Shown[r][6] =""+pcQt;
        dataD_Shown[r][7] =""+pcPr;
        dataD_Shown[r][8] =""+blQt;
        dataD_Shown[r][9] =""+blPr;
        dataD_Shown[r][10] = cbD_Dis.getSelectedItem();
        dataD_Shown[r][11] =txtD_DiscAmt.getText();
        dataD_Shown[r][12] =cbD_Tax.getSelectedItem();
        dataD_Shown[r][13] =txtD_TaxAmt.getText();
        dataD_Shown[r][14] =txtD_NtPr.getText();
        
            }    

    
    private boolean checkDetailsValidation() {
        
        boolean detailsAreValid=false;
        long  existingStock=0, orderedStock=0;
        LinkDB store;
        if(cbD_ItN.getSelectedIndex()>0 && cbD_BchDt.getSelectedIndex()>0 ){//main if
        store = new LinkDB(storeTblSpecific);
        String itemCode = ""+itemM.queryOneEle(2,"WHERE itemName = '"+cbD_ItN.getSelectedItem()+"'");        
        StringTokenizer st = new StringTokenizer(cbD_BchDt.getSelectedItem().toString() , "-");
        String batch = st.nextToken();
        String cond = "WHERE ItemNo = '"+itemCode+"' AND BatchNo ='"+batch+"'"; 
        String cond1 = "WHERE DO_No = '"+txtCode.getText()+"' AND Item_Code = '"+itemCode+"' AND Batch_No ='"+batch+"'"; 
        existingStock = Long.parseLong(""+store.queryOneEle(10,cond));

                     int packPerBulk = Integer.parseInt(""+store.queryOneEle(9,cond));
                     int loosePerPack = Integer.parseInt(""+store.queryOneEle(8,cond));
        
        
        orderedStock = lsQt +(pcQt + blQt*packPerBulk)*loosePerPack;
        
        if((!tblDetails.isEnabled()) && (!add) && doD.queryRow(cond1)!=0){
                     int lsQt = Integer.parseInt(""+doD.queryOneEle(7,cond1));
                     int pcQt = Integer.parseInt(""+doD.queryOneEle(9,cond1));
                     int blQt = Integer.parseInt(""+doD.queryOneEle(11,cond1));
                     long preIssued = lsQt +(pcQt + blQt*packPerBulk)*loosePerPack;
            existingStock+=preIssued;
System.out.println(" existingStock = "+existingStock+" preIssued = "+preIssued);
        }
        
        }//end main if

        
        if(cbD_ItN.getSelectedIndex()==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Select an item from the Item List.","Error!",JOptionPane.INFORMATION_MESSAGE);
            cbD_ItN.requestFocus();
        }
        else if(cbD_BchDt.getSelectedIndex()==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Select an item from the Batch No./Expiry Date List.","Error!",JOptionPane.INFORMATION_MESSAGE);
            cbD_BchDt.requestFocus();
        }       
        else{
            if(lsQt!=0 && lsPr==0){
                detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Loose Price !","Error!",JOptionPane.INFORMATION_MESSAGE);
                txtD_LsPr.setText("0");
                txtD_LsPr.requestFocus();
                txtD_LsPr.selectAll();
                
            }//end if
            else if(lsQt==0 && lsPr!=0){
                detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Loose Qty.!","Error!",JOptionPane.INFORMATION_MESSAGE);
                txtD_LsQt.setText("0");
                txtD_LsQt.selectAll();
                txtD_LsQt.requestFocus();
                
            }//end else if
            else if(pcQt!=0 && pcPr==0){
                detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Pack Price !","Error!",JOptionPane.INFORMATION_MESSAGE);
                txtD_PcPr.setText("0");
                txtD_PcPr.requestFocus();
                txtD_PcPr.selectAll();
                
            }//end if
            else if(pcQt==0 && pcPr!=0){
                detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Pack Qty.!","Error!",JOptionPane.INFORMATION_MESSAGE);
                txtD_PcQt.setText("0");
                txtD_PcQt.requestFocus();
                txtD_PcQt.selectAll();
                
            }//end else if
            else  if(lsQt==0 && pcQt==0 && blQt==0){
                detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"The Loose Qty., Pack Qty., and Bulk Qty. fields cannot be '0' at the same time!","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                txtD_LsQt.setText("0");
                txtD_LsQt.selectAll();
                txtD_LsQt.requestFocus();
            }
            else if(blQt!=0 && blPr==0){
                detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Bulk Price!","Error!",JOptionPane.INFORMATION_MESSAGE);
                txtD_BlPr.setText("0");
                txtD_BlPr.requestFocus();
                txtD_BlPr.selectAll();
            }//end if
            else if(blQt==0 && blPr!=0){
                detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Bulk Qty.!","Error!",JOptionPane.INFORMATION_MESSAGE);
                txtD_BlQt.setText("0");
                txtD_BlQt.requestFocus();
                txtD_BlQt.selectAll();
            }//end else if
            else if(existingStock<orderedStock){
                detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"The existing stock of total Loose Quantity in this Store is "+existingStock+" which is less than your entry by "+(orderedStock-existingStock)+".\nReduce your entry suitably.","From the DataBase: Stocks are less than your entry.",JOptionPane.INFORMATION_MESSAGE);
                txtD_LsQt.requestFocus();
                txtD_LsQt.selectAll();
            }//end else if
            
            else
                detailsAreValid=true;
        }//end else
        
        return detailsAreValid;
        
    }//end 
    
    private void fillAmts() {
      double d_NtPr = lsQt*lsPr + pcQt*pcPr + blQt*blPr;
        disAmtD = disD*d_NtPr ;
        txtD_DiscAmt.setText(""+disAmtD);
        d_NtPr-=disAmtD;
        taxAmtD = taxD*d_NtPr ;
        txtD_TaxAmt.setText(""+taxAmtD);
        d_NtPr-=taxAmtD;
        
        
        txtD_NtPr.setText(""+d_NtPr);
        
        if(pnlHeaderShown){
            grossTotal=0;
            netTotal=0;
            
            for(int i=0;i<rowD_Shown;i++){
                
                grossTotal+=Double.parseDouble(""+dataD_Total[i][14]);
                
            }//end for  
        }//end if
        
        txtGrossTotal.setText(""+grossTotal);
        netTotal=grossTotal;
        disAmtSL=netTotal*disSl;
        netTotal-=disAmtSL;
        taxAmtSL=netTotal*taxSl;
        netTotal+=taxAmtSL;
        
        if(rowD_Shown!=0){
            txtNetTotal.setText( ""+netTotal);
            txtSL_DscAmt.setText( ""+disAmtSL);
            txtSL_TaxAmt.setText( ""+taxAmtSL);
        }
        else
            txtNetTotal.setText("0.00");//*/
        
    }
    
    private String adjustDecimal(String f) {
     /*   StringBuffer sb = new StringBuffer(f);
                int k;
        for(k=0;k<sb.length();k++)
            if(sb.charAt(k)=='.')
                break;
        
        String s1 = "";
        
        
        if(k!=sb.length()-1)
            sb.setLength(k+3);//adjust for two digits after decimal
        else if(k==sb.length()-1)
            s1=".00";
        else if(sb.length()-k==2)
            s1="0";
        String s="";
        s+=sb.toString()+s1;*/
        
        return f;
    }
    
    private void removeBatchComboElements() {
        cbD_BchDt.setSelectedIndex(0);
        while(cbD_BchDt.getItemCount()>1)
            cbD_BchDt.removeItemAt(1);
    }
    
    private void removeItemComboElements() {
        cbD_ItN.setSelectedIndex(0);
        int count = cbD_ItN.getItemCount();
        
        if(count >1)
            for(int i=1;i<count;i++)
                cbD_ItN.removeItemAt(1);
    }
    
    private void updateDatabase() throws SQLException {
        if(add){
            if(checkHeaderValidation()){
                System.out.println("1048");
                String[] do_details = new String[rowD_Shown];
                String[] store = new String[rowD_Shown];
                
                for(int i=0;i<rowD_Shown;i++){
                     do_details[i]=""+doD.addData(new int[]{2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17},findValuesDO_D(i));                                                                       
                     store[i]=updateStoreTbl(i,false);
                }
                
                String do_header = ""+doH.addDataAllColsBut1st(findValuesDO_H());
                
                String inv_details=""+invD.addDataAllColsBut1st(findValuesInv_D());
                String inv_header=""+invH.addDataAllColsBut1st(findValuesInv_H());
                    
                try{
                    accessDB();
                    //con.setAutoCommit(false);
                    
                    //INSERT DO DETAILS
                    for(int i=0;i<rowD_Shown;i++){
                        stat.executeUpdate(do_details[i]);
                        stat.executeUpdate(store[i]);
                    }
                    System.out.println("1976");
                    //INSERT DO HEADER
                    stat.executeUpdate(do_header);
                    System.out.println("1979");
                    add=false;
                    
                    //INSERT INV DETAILS
                    stat.executeUpdate(inv_details);
                    //INSERT INV HEADER
                    stat.executeUpdate(inv_header);
                    //con.commit();
                    con.close();
                    
                    //udate semaphores table
                    updateCode_DO();
                    updateCode_Inv();
                    
                }
                catch(java.sql.SQLException e){
                    //con.rollback();
                    //con.setAutoCommit(true);
                    con.close();
                    System.out.println("ERROR IN addSave(): 1977 :\t"+e);
                }//end catch
                
                pnlHome.setVisible(true);
                pnlAddHeader.setVisible(false);
                add=false;
                
                
            }//end if
        }//end if
        else
            saveModifiedDetails();
        
    }
    

    private void dateConstraint(Object[][] raw, int row) {
        int frDD=Integer.parseInt( cbFrDD.getSelectedItem().toString() );
        int  frMM=Integer.parseInt( cbFrMM.getSelectedItem().toString() )-1;
        int frYY=Integer.parseInt( cbFrYY.getSelectedItem().toString() )-1900;
        
        int toDD=Integer.parseInt( cbToDD.getSelectedItem().toString() );
        int toMM=Integer.parseInt( cbToMM.getSelectedItem().toString() )-1;
        int toYY=Integer.parseInt( cbToYY.getSelectedItem().toString() )-1900;
        
        java.util.Date fromDate = new java.util.Date(frYY,frMM,frDD);
        java.util.Date toDate = new java.util.Date(toYY,toMM,toDD);
        
        rowH_Date=0;
        
        Object temp[][] = new Object[row][COLUMN_H_SHOWN.length];
        for(int i=0;i<row;i++){
            int s[] = new int[3];
            StringTokenizer st = new StringTokenizer(raw[i][1].toString() , "/");
            int k=0;
            while( st.hasMoreTokens() ){
                s[k]=Integer.parseInt( st.nextToken() );
                k++;
            }//end while
            java.util.Date dataDate = new java.util.Date(s[2]-1900,s[1]-1,s[0]);
            
            if(fromDate.compareTo(dataDate)<=0 && toDate.compareTo(dataDate)>=0){//YYif
                for(int j=0;j<COLUMN_H_SHOWN.length;j++){
                    temp[rowH_Date][j]=raw[i][j];
                }
                rowH_Date++;
                
            }//end YYif
            
        }//end for
        
        
        if(rowH_Date==0){
        rangeMatching=false;            
        cbFrYY.setSelectedIndex( preFromDate.getYear()-50 );
        cbFrMM.setSelectedIndex(preFromDate.getMonth());
        cbFrDD.setSelectedIndex(preFromDate.getDate()-1);
        cbToYY.setSelectedIndex( preToDate.getYear()-50 );
        cbToMM.setSelectedIndex(preToDate.getMonth());        
        cbToDD.setSelectedIndex(preToDate.getDate()-1);
        
            rangeMatching=true;
            
 JOptionPane.showMessageDialog(this,"No items were found corresponding to your date-limit.","Sorry!",JOptionPane.INFORMATION_MESSAGE);

        }//*/
        else{

            preFromDate=fromDate;
            preToDate=toDate;
        dataH_Date = new Object[rowH_Date][COLUMN_H_SHOWN.length];
        dataH_Date=temp;
        }//end else
        
    }
    
    private void modifyPressed() { 
        if(  rowH_Raw==0   )
            JOptionPane.showMessageDialog(this," The Database is currently empty.","Sorry!",JOptionPane.INFORMATION_MESSAGE );
        else if( clickH )
        if(doH.queryOneEle(18,"WHERE DO_No = '"+dataH_Shown[selrowH][0]+"'").equals("Y")){
            
            txtCode.setText(""+dataH_Shown[selrowH][0]);
            
                    int s[] = new int[3];
                    StringTokenizer st = new StringTokenizer(""+dataH_Shown[selrowH][1] , "/");
                    int k=0;
                    while( st.hasMoreTokens() ){
                        s[k]=Integer.parseInt( st.nextToken() );
                        k++;
                    }//end while
                    cbDO_DD.setSelectedIndex(s[0]-1);
                    cbDO_MM.setSelectedIndex(s[1]-1);
                    cbDO_YY.setSelectedIndex(s[2]-1950);
                    
                    cbCustN.setSelectedItem(dataH_Shown[selrowH][2]);
                    
                    String cond = "WHERE DO_No = '"+dataH_Shown[selrowH][0]+"'" ;
                    
                    cbAddStore.setSelectedItem(storeM.queryOneEle(3,"WHERE StoreID = '"+doH.queryOneEle(15,cond)+"'"));
                    
                    cbPoNo.setSelectedItem(doH.queryOneEle(7,cond));
                    
                    txtPO_Date.setText(""+doH.queryOneEle(8,cond));
                    
                    cbCoNo.setSelectedItem(doH.queryOneEle(5,cond));
                    
                    txtCO_Date.setText(""+doH.queryOneEle(6,cond));
                    
                    cbCur.setSelectedItem(curM.queryOneEle(3,"WHERE CM_ID = '"+doH.queryOneEle(9,cond)+"'"));
                    
                    txtSL_DscAmt.setText(""+doH.queryOneEle(11,cond));
                    
                    txtSL_TaxAmt.setText(""+doH.queryOneEle(13,cond));
                    
                    
                    String subCond = ""+doH.queryOneEle(10,cond);
                    if(subCond.trim().equals(""))
                        cbDisSl.setSelectedIndex(0);
                    else{
                        subCond = "WHERE DM_ID = '"+ subCond+"'";
                        cbDisSl.setSelectedItem(disM.queryOneEle(3,subCond)+" - "+disM.queryOneEle(4,subCond)+"%");
                    }
                    
                    subCond = ""+doH.queryOneEle(12,cond);
                    if(subCond.trim().equals(""))
                        cbTaxSl.setSelectedIndex(0);
                    else{
                        subCond = "WHERE TaxCode = '"+ subCond+"'";
                        cbTaxSl.setSelectedItem(taxM.queryOneEle(3,subCond)+" - "+taxM.queryOneEle(4,subCond)+"%");
                    }
            
                //To fillup the details
            
            rowD_Shown = doD.queryRow("WHERE DO_No = '"+dataH_Shown[selrowH][0]+"' AND Modified = 'N'");
            
            row_modified = new boolean[rowD_Shown];
            
            dataD_Shown = new Object[rowD_Shown][COL_D_SHOWN];
            if(rowD_Shown>0)
                dataD_Shown = doD.queryMulCols(rowD_Shown,new int[]{3,4,5,6,7,8,9,10,11,12,13,14,15,16,17},"WHERE DO_No = '"+dataH_Shown[selrowH][0]+"' AND Modified = 'N'");
                
                grossTotal=0;
            for(int i=0;i<rowD_Shown;i++){
                grossTotal+=Double.parseDouble(""+dataD_Shown[i][COL_D_SHOWN-1]);
                dataD_Shown[i][1] = itemM.queryOneEle(3,"WHERE itemNo = '"+dataD_Shown[i][1]+"'");
                if(!dataD_Shown[i][10].toString().trim().equals(""))
                    dataD_Shown[i][10] = disM.queryOneEle(3,"WHERE DM_ID = '"+dataD_Shown[i][10]+"'")+" - "+disM.queryOneEle(4,"WHERE DM_ID = '"+dataD_Shown[i][10]+"'")+"%";
                else
                    dataD_Shown[i][10]="0%";
                
                if(!dataD_Shown[i][12].toString().trim().equals(""))
                    dataD_Shown[i][12] = taxM.queryOneEle(3,"WHERE TaxCode = '"+dataD_Shown[i][12]+"'")+" - "+taxM.queryOneEle(4,"WHERE TaxCode = '"+dataD_Shown[i][12]+"'")+"%";
                else
                    dataD_Shown[i][12]="0%";
                
            }//end for
                
            txtD_SlNo.setText(""+(rowD_Shown+ 1));   
            txtGrossTotal.setText(""+grossTotal);
            txtNetTotal.setText(""+dataH_Shown[selrowH][3]);
                    
            showDetailsTbl();    
            
            pnlHome.setVisible(false);
            pnlAddHeader.setVisible(true);
            clickH=false;
            selrowH=0;
        }//end if
        else
            JOptionPane.showMessageDialog(this," You cannot modify the selected P.O.: the P.O. may have been Cancelled or Invoiced. ","Sorry!",JOptionPane.INFORMATION_MESSAGE,new javax.swing.ImageIcon("C:\\Exp\\images\\Error.gif") );
     else
            JOptionPane.showMessageDialog(this," Select the P.O. No. you want to Modify  from the Table. ","Sorry!",JOptionPane.INFORMATION_MESSAGE,new javax.swing.ImageIcon("C:\\Exp\\images\\Error.gif") );
        
        
    }
    
    private void modDetails() {
        if(checkDetailsValidation()){
            btD_Add.setVisible(true);
            btD_Edit.setVisible(true);
            btD_Remove.setVisible(true);
            btD_Finish.setVisible(true);
            btD_Remove.setEnabled(true);
            if(deleteArrayOverflow || rowD_Shown==1)
                btD_Remove.setEnabled(false);
            btD_Finish.setEnabled(true);
            btD_SaveEdit.setVisible(false);
            btD_SaveEdit.setEnabled(false);
            
                        fillDetailsTbl(selrowD);
                        
                        //to check whether the user has actually changed any entries
//get the changeable elements from the database            
            Object[] old_val = new Object[8];
            Object itemCode = itemM.queryOneEle(2,"WHERE itemName = '"+dataD_Shown[selrowD][1]+"'");
            String cond = "WHERE DO_No = '"+txtCode.getText()+"' AND Item_Code = '"+itemCode+"' AND Batch_No ='"+dataD_Shown[selrowD][2]+"' AND Modified = 'N'";
            int rowPresent = doD.queryRow(cond);
            System.out.println("rowPresent = "+rowPresent);
            
            if(rowPresent!=0){
            old_val = doD.queryMulEle(new int[]{7,8,9,10,11,12,13,15},cond);
            
//get the new entries from the table one by one and compare            
            
            boolean rowChanged = false;
            
            for(int i=0;i<8;i++){
                
                if(i==6){
                    String disId="";
        if(!dataD_Shown[selrowD][10].toString().trim().equals("0%")){
            StringTokenizer st = new StringTokenizer(""+dataD_Shown[selrowD][10] , "-");
            disId = ""+disM.queryOneEle(2,"WHERE DM_Name = '"+st.nextToken().trim()+"'");
            disId.trim();
        }//end if
                    System.out.println("disId = "+disId+"\tits length is "+disId.length());
                    if(!disId.equals(old_val[i].toString().trim()))
                    rowChanged=true;
                }
                else if(i==7){
            String taxId = "";        
            if(!dataD_Shown[selrowD][12].toString().trim().equals("0%")){
            StringTokenizer st = new StringTokenizer(""+dataD_Shown[selrowD][12] , "-");
            taxId = ""+taxM.queryOneEle(2,"WHERE TaxDesc = '"+st.nextToken().trim()+"'");
            taxId.trim();
        }//end if
                    if(!taxId.equals(old_val[i].toString().trim()))
                    rowChanged=true;
 }//end else if
                else{
                    double o = Double.parseDouble(""+old_val[i]);
                    double n = Double.parseDouble(""+dataD_Shown[selrowD][i+4]);
                    if(o!=n)
                    rowChanged=true;//*/
                    /*old_val[i]=new Double(""+old_val[i]);
                    if(!old_val[i].equals( new Double(""+dataD_Shown[selrowD][i+4]) ))
                    rowChanged=true;//*/
                    
                    
                }//end else
                
                if(rowChanged){
                    System.out.println("old_val["+i+"] = "+old_val[i]);
                    break;
                }
                
            }//end for
       
            System.out.println("rowChanged = "+rowChanged);
            
            if(rowChanged)
                row_modified[selrowD]=true;
        }//end if(row_present)
            
            resetDetails();
            txtD_SlNo.setText("" + (rowD_Shown+1));
            
showDetailsTbl();

detailsEditable();
            
        }//end if
        
        
    }
    
    
    private void detailsModify() {
        if(clickD && tblDetails.getSelectedRow()>=0){//main if
            selrowD=tblDetails.getSelectedRow();
            txtD_SlNo.setText(""+dataD_Shown[selrowD][0]);
            txtD_LsQt.setText(""+dataD_Shown[selrowD][4]);
            lsQt=Long.parseLong(""+dataD_Shown[selrowD][4]);
            txtD_LsPr.setText(""+dataD_Shown[selrowD][5]);
            lsPr=Double.parseDouble(""+dataD_Shown[selrowD][5]);
            txtD_PcQt.setText(""+dataD_Shown[selrowD][6]);
            pcQt=Long.parseLong(""+dataD_Shown[selrowD][6]);
            txtD_PcPr.setText(""+dataD_Shown[selrowD][7]);
            pcPr=Double.parseDouble(""+dataD_Shown[selrowD][7]);
            txtD_BlQt.setText(""+dataD_Shown[selrowD][8]);
            blQt=Long.parseLong(""+dataD_Shown[selrowD][8]);
            txtD_BlPr.setText(""+dataD_Shown[selrowD][9]);
            blPr=Double.parseDouble(""+dataD_Shown[selrowD][9]);
            txtD_NtPr.setText(""+dataD_Shown[selrowD][14]);
            
            txtD_LsQt.selectAll();
            txtD_LsQt.requestFocus();
            txtD_LsPr.selectAll();
            txtD_PcQt.selectAll();
            txtD_PcPr.selectAll();
            txtD_BlQt.selectAll();
            txtD_BlPr.selectAll();
            txtD_NtPr.selectAll();
            
            
            cbD_ItN.setSelectedItem(dataD_Shown[selrowD][1]);
            
            cbD_BchDt.setSelectedItem(""+dataD_Shown[selrowD][2].toString().trim()+" - "+dataD_Shown[selrowD][3].toString().trim());
            System.out.println("Expected cbD_BchDt.getSelectedItem() = "+dataD_Shown[selrowD][2].toString().trim()+" - "+dataD_Shown[selrowD][3].toString().trim());
            System.out.println("cbD_BchDt.getSelectedItem() = "+cbD_BchDt.getSelectedItem());
            
            if(dataD_Shown[selrowD][10].equals("0%"))
                cbD_Dis.setSelectedIndex(0);
            else
                cbD_Dis.setSelectedItem(dataD_Shown[selrowD][10]);
            
            if(dataD_Shown[selrowD][12].equals("0%"))
                cbD_Tax.setSelectedIndex(0);
            else
                cbD_Tax.setSelectedItem(dataD_Shown[selrowD][12]);
            
            detailsUnEditable();
            
            btD_Add.setVisible(false);
            btD_Remove.setVisible(false);
            btD_Edit.setVisible(false);
            btD_SaveEdit.setVisible(true);
            btD_SaveEdit.setEnabled(true);
            btD_Finish.setVisible(false);
        }//end main if
        else{//main else
            JOptionPane.showMessageDialog(this," Select a row from the Delivery Order Details to Edit.","No rows selected!",JOptionPane.INFORMATION_MESSAGE);
            tblDetails.clearSelection();
        }//end else
    }
    
    private void detailsUnEditable() {
        cbD_ItN.setEnabled(false);
        cbD_BchDt.setEnabled(false);
        tblDetails.setEnabled(false);
    }
    
    private Object[] findValuesDO_D(int rowNo) {
        
        Object[] val = new Object[COL_D_SHOWN+1];
        
        //'coz the first value will be DO_No
        
        val[0]=txtCode.getText();
        
        String d ="";
        if(!dataD_Shown[rowNo][10].toString().trim().equals("0%")){
            StringTokenizer st = new StringTokenizer(""+dataD_Shown[rowNo][10] , "-");
            d = ""+disM.queryOneEle(2,"WHERE DM_Name = '"+st.nextToken().trim()+"'");
        }//end if
        
        String t ="";
        if(!dataD_Shown[rowNo][12].toString().trim().equals("0%")){
            StringTokenizer st = new StringTokenizer(""+dataD_Shown[rowNo][12] , "-");
            t = ""+taxM.queryOneEle(2,"WHERE TaxDesc = '"+st.nextToken().trim()+"'");
        }//end if
        
        for(int j=0;j<COL_D_SHOWN;j++)
            try{
                if(j==1)
                    val[j+1]=itemM.queryOneEle(2,"WHERE itemName = '"+dataD_Shown[rowNo][j]+"'");
                else if(j==10)
                    val[j+1]=""+d;
                else if(j==12)
                    val[j+1]=""+t;
                else
                    val[j+1]=dataD_Shown[rowNo][j];
            }catch(Exception e){
                System.out.println(e+"\t:1344   j = "+j);
            }//end catch
        System.out.println("1347");
        return val;
        
    }
    
    private void cancelDO() {
        if(  rowH_Raw==0   )
            JOptionPane.showMessageDialog(this," The Database is currently empty.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
        else
            if(clickH){
                if(dataH_Shown[selrowH][4].toString().trim().equals("Y"))
                    JOptionPane.showMessageDialog(this," The selected D.O. is already CANCELLED. ","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                else{
                    try{
                        accessDB();
                        String ss = "UPDATE DO_H SET Cancelled = 'Y',Can_Modify='N' WHERE DO_No = '"+dataH_Shown[selrowH][0]+"'";
                        System.out.println(ss);
                        stat.executeUpdate(ss);
                        con.close();
                    }//end try  
                    catch(Exception e){
                        System.out.println(e+"\n2773");
                    }//end catch
               
                
                fillHeaderTbl();
                }//end else
                 clickH=false;
                 tblHeader.clearSelection();
            }//end if
            else
                JOptionPane.showMessageDialog(this," Select the D.O. No. you want to Cancel from the Table. ","Sorry!",JOptionPane.INFORMATION_MESSAGE);
        
    }
    
    private Object[] findValuesInv_D() {
        
        Object[] val = new Object[8];
        
        //'coz the first value will be DO_No
        
        val[0]=generateCode_Inv();
        val[1]="1";
        val[2]=txtCode.getText();
        val[3] = cbDO_DD.getSelectedItem()+"/"+cbDO_MM.getSelectedItem()+"/"+cbDO_YY.getSelectedItem(); 
        val[4]=curM.queryOneEle(2,"WHERE CM_Name = '"+cbCur.getSelectedItem()+"'");
        val[5]=""+txtSL_DscAmt.getText();
        val[6]=""+txtSL_TaxAmt.getText();
        val[7]=""+txtNetTotal.getText();
        
        
        return val;
        
    }
    
    private Object[] findValuesInv_H() {
        Object[] val = new Object[invH.no_of_cols-1];
        
        val[0] = generateCode_Inv();
        val[1]=""+cbDO_DD.getSelectedItem()+"/"+cbDO_MM.getSelectedItem()+"/"+cbDO_YY.getSelectedItem();
        val[2]=storeM.queryOneEle(2,"WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'");
        
        val[3]="    ";
        val[4]="    ";
        
        val[5]="    ";
        val[6]="    ";
        
        val[7]=custM.queryOneEle(2,"WHERE CustName = '"+cbCustN.getSelectedItem()+"'");
        
        val[8]=authBy.queryOneEle(2,"WHERE EmpName = '"+cbAuthBy.getSelectedItem()+"'");

        val[9]=""+txtSL_DscAmt.getText();
        val[10]=""+txtSL_TaxAmt.getText();
        val[11]=""+txtNetTotal.getText();
        
        val[12]="N";
        val[13]="N";
        val[14]="";
        
        return val;
    }
    
    private void updateCode_Inv() {
        int ctr = Integer.parseInt(""+semaPhores.queryOneEle(4,"WHERE TableName = 'Invoice_H'"))+1;
        String ss1 = semaPhores.modifyData(new int[]{4},new Object[]{""+ctr},"WHERE TableName = 'Invoice_H'");
        
        
        try{
            accessDB();
            stat.executeUpdate(ss1);
            con.close();
        }//end try
        catch(Exception e){
            System.out.println(e+"\n2753");
        }//end catch
    }
    
    private String generateCode_Inv() {
        int ctr = Integer.parseInt(""+semaPhores.queryOneEle(4,"WHERE TableName = 'Invoice_H'"));
        String prefix = ""+semaPhores.queryOneEle(3,"WHERE TableName = 'Invoice_H'");
        if(prefix.equals("null"))
            prefix="";
        return(prefix+ctr);
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbD_ItN;
    private javax.swing.JTextField txtSL_TaxAmt;
    private javax.swing.JButton btSave;
    private javax.swing.JTable tblDetails;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JButton btD_SaveEdit;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JComboBox cbFrMM;
    private javax.swing.JComboBox cbTaxSl;
    private javax.swing.JComboBox cbD_BchDt;
    private javax.swing.JComboBox cbToDD;
    private javax.swing.JLabel jLabel3611;
    private javax.swing.JTextField txtPO_Date;
    private javax.swing.JTextField txtD_TaxAmt;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JTable tblHeader;
    private javax.swing.JComboBox cbDisSl;
    private javax.swing.JTextField txtD_BlQt;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JTextField txtD_SlNo;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JButton btExit;
    private javax.swing.JComboBox cbDO_MM;
    private javax.swing.JComboBox cbDO_DD;
    private javax.swing.JComboBox cbCur;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jLabel221;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JButton btD_Remove;
    private javax.swing.JButton btD_Edit;
    private javax.swing.JComboBox cbToMM;
    private javax.swing.JTextField txtD_DiscAmt;
    private javax.swing.JComboBox cbCustN;
    private javax.swing.JLabel jLabel361;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JComboBox cbCoNo;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JComboBox cbToYY;
    private javax.swing.JTextField txtD_PcPr;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtNetTotal;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JTextField txtSL_DscAmt;
    private javax.swing.JButton btCancelPO;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox cbFrYY;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JComboBox cbD_Tax;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JButton btD_Add;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtGrossTotal;
    private javax.swing.JTextField txtD_NtPr;
    private javax.swing.JTextField txtD_LsPr;
    private javax.swing.JPanel pnlAddHeader;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JComboBox cbAddStore;
    private javax.swing.JTextField txtD_PcQt;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JComboBox cbD_Dis;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btSearch;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JComboBox cbPoNo;
    private javax.swing.JComboBox cbAuthBy;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JComboBox cbStoreList;
    private javax.swing.JComboBox cbDO_YY;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JTextField txtD_BlPr;
    private javax.swing.JTextField txtCO_Date;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JButton btD_Cancel;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtCode;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JTextField txtD_LsQt;
    private javax.swing.JComboBox cbFrDD;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JButton btD_Finish;
    // End of variables declaration//GEN-END:variables

    
//VARIABLES DECLARATION 

boolean clickH=false,add=false,pnlHeaderShown=false,removeDetails=false, deleteArrayOverflow=false;    
boolean  clickD=false,editPressed=false,rangeMatching=true;
boolean[] row_modified;
    
Connection con;

double mscSl=0,lsPr=0,pcPr=0,blPr=0,disD=0,taxD=0,netTotal=0,grossTotal=0,disSl=0,taxSl=0;
double disAmtD=0,taxAmtD=0,disAmtSL=0,taxAmtSL=0;

int rowD_Shown=0,cols=0,deleteNo=0,rowH_Raw=0,rowH_Date=0,rowH_Shown=0;
int selrowD=0,selrowH=0;

final int COL_D_SHOWN=15;

long lsQt=0,pcQt=0,blQt=0;

java.util.Date curDate= new java.util.Date();   
java.util.Date preFromDate= new java.util.Date(50,0,1);   
java.util.Date preToDate= new java.util.Date(200,11,31);   

//objects 0f class-type LinkDB

LinkDB semaPhores = new LinkDB("SemaPhores"), storeM = new LinkDB("StoreMaster");
LinkDB disM = new LinkDB("DiscountMaster"), taxM = new LinkDB("TaxMaster"); 
LinkDB poH = new LinkDB("PurchaseOrderHead"),curM = new LinkDB("CurrencyMaster");
LinkDB itemM = new LinkDB("Item_M"),custM = new LinkDB("CustMaster");
LinkDB coH = new LinkDB("CO_H"),doH = new LinkDB("DO_H"),doD = new LinkDB("DO_D");
LinkDB authBy = new LinkDB("EmployeeMaster"),invH = new LinkDB("Invoice_H"),invD = new LinkDB("Invoice_D");


Object[][] dataD_Total,dataD_Shown,dataH_Raw,dataH_Date,dataH_Shown;

Statement stat;

String storeTblSpecific="",preStore="[All Items]";

String[] deleteDetails=new String[50],storeDeleted=new String[50];

final String[] COLUMN_H_SHOWN = {"D.O. No."," Date"," Customer"," Total Amt."," Cancelled"};

    
}

//end main





