/*
 * Invoice.java
 *
 * Created on January 13, 2003, 6:06 PM
 */

package view.transaction;

import usefulClasses.databaseOperations.LinkDB;
import usefulClasses.generalUtilities.*;

import java.sql.*;
import java.awt.*;
import java.util.*;
import javax.swing.JOptionPane;


/**
 *
 * @author  Palash
 */
public class InvoicePanel extends javax.swing.JPanel {

    /** Creates new form Invoice */
    public InvoicePanel() {
        
        int row = semaPhores.queryRow("WHERE TableName = 'Invoice_H'");
        if(row==0)
            try{
                accessDB();
                String ss="Insert into SemaPhores (TableName,CtrName,MaxCtr) values('Invoice_H','',1)";
                stat.executeUpdate(ss);               
                }
            catch(Exception e){
            }
        
        authBy.checkEmpty();  
        coH.checkEmpty();
        curM.checkEmpty();    
        custM.checkEmpty();     
        doH.checkEmpty();  
        storeM.checkEmpty();        
        
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        pnlHome = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHeader = new javax.swing.JTable();
        btAdd = new javax.swing.JButton();
        btModify = new javax.swing.JButton();
        btSearch = new javax.swing.JButton();
        btCancelPO = new javax.swing.JButton();
        btExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cbFrDD = new javax.swing.JComboBox();
        FillDate.fillDaysInCombo(cbFrDD);
        cbFrMM = new javax.swing.JComboBox();
        FillDate.fillMonthsInCombo(cbFrMM);
        cbFrYY = new javax.swing.JComboBox();
        FillDate.fillYearsInCombo(cbFrYY);

        jLabel41 = new javax.swing.JLabel();
        cbToDD = new javax.swing.JComboBox();
        FillDate.fillDaysInCombo(cbToDD);
        cbToDD.setSelectedItem("31");
        cbToMM = new javax.swing.JComboBox();
        FillDate.fillMonthsInCombo(cbToMM);
        cbToMM.setSelectedItem("12");
        cbToYY = new javax.swing.JComboBox();
        FillDate.fillYearsInCombo(cbToYY);
        cbToYY.setSelectedItem("2100");
        jLabel5 = new javax.swing.JLabel();
        cbStoreList = new javax.swing.JComboBox();
        cbStoreList.addItem("[All Items]");
        storeM.fillCombo(cbStoreList,"StoreName","WHERE Active = 'Y'","StoreName");
        jLabel7 = new javax.swing.JLabel();
        pnlAddHeader = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btSave = new javax.swing.JButton();
        btD_Cancel = new javax.swing.JButton();
        cbAddStore = new javax.swing.JComboBox();
        cbDO_DD = new javax.swing.JComboBox();
        FillDate.fillDaysInCombo(cbDO_DD);
        cbDO_MM = new javax.swing.JComboBox();
        FillDate.fillMonthsInCombo(cbDO_MM);
        cbDO_YY = new javax.swing.JComboBox();
        FillDate.fillYearsInCombo(cbDO_YY);
        jLabel91 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        txtDO_Dis = new javax.swing.JTextField();
        cbDO_No = new javax.swing.JComboBox();
        cbDO_No.addItem("[Select One]");

        txtDO_SlNo = new javax.swing.JTextField();
        txtDO_SlNo.setText("1");
        tblDetails = new javax.swing.JTable();
        jLabel361 = new javax.swing.JLabel();
        txtDO_Date = new javax.swing.JTextField();

        txtCur = new javax.swing.JTextField();
        jLabel3611 = new javax.swing.JLabel();
        txtDO_Tax = new javax.swing.JTextField();
        txtDO_Total_Amt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btD_Add = new javax.swing.JButton();
        btD_Remove = new javax.swing.JButton();
        btD_Finish = new javax.swing.JButton();
        jLabel110 = new javax.swing.JLabel();
        cbCustN = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtDscAmt = new javax.swing.JTextField();
        txtTaxAmt = new javax.swing.JTextField();
        txtNetTotal = new javax.swing.JTextField();
        cbAuthBy = new javax.swing.JComboBox();
        cbAuthBy.addItem("[Select One]");
        authBy.fillCombo(cbAuthBy,"EmpName","WHERE Active = 'Y'","EmpName");

        jLabel8 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlHome.setForeground(new java.awt.Color(51, 51, 255));
        pnlHome.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlHomeComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jLabel1.setForeground(new java.awt.Color(0, 51, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Invoice");
        pnlHome.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 10, 200, -1));

        jScrollPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane1ComponentResized(evt);
            }
        });

        tblHeader.setToolTipText("");
        tblHeader.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        fillHeaderTbl();
        tblHeader.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblHeaderKeyReleased(evt);
            }
        });

        tblHeader.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHeaderMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(tblHeader);

        pnlHome.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 500, 300));

        btAdd.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\new5.gif"));
        btAdd.setMnemonic('A');
        btAdd.setText("Add");
        btAdd.setToolTipText(" ");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        pnlHome.add(btAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 510, 110, 27));

        btModify.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\modify2.gif"));
        btModify.setMnemonic('M');
        btModify.setText("Modify");
        btModify.setToolTipText(" ");
        btModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModifyActionPerformed(evt);
            }
        });

        pnlHome.add(btModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 510, 110, 27));

        btSearch.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\find5.gif"));
        btSearch.setMnemonic('S');
        btSearch.setText("Search");
        btSearch.setToolTipText(" ");
        pnlHome.add(btSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 510, 110, 27));

        btCancelPO.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\delete2.jpg"));
        btCancelPO.setMnemonic('C');
        btCancelPO.setText("Cancel Inv.");
        btCancelPO.setToolTipText(" ");
        btCancelPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelPOActionPerformed(evt);
            }
        });

        pnlHome.add(btCancelPO, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 510, 127, 27));

        btExit.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\delete1.jpg"));
        btExit.setMnemonic('X');
        btExit.setText("Exit");
        btExit.setToolTipText(" ");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        pnlHome.add(btExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(557, 510, 120, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 102));
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("From: ");
        pnlHome.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, -1, 20));

        cbFrDD.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbFrDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 50, 20));

        cbFrMM.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbFrMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 50, 20));

        cbFrYY.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbFrYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, 70, 20));

        jLabel41.setBackground(new java.awt.Color(255, 255, 102));
        jLabel41.setForeground(new java.awt.Color(0, 0, 153));
        jLabel41.setText("To:");
        pnlHome.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, -1, 20));

        cbToDD.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbToDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 50, 20));

        cbToMM.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbToMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 50, 20));

        cbToYY.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbToYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 110, 70, 20));

        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setText("Store:");
        pnlHome.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, -1, 20));

        cbStoreList.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbStoreList, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 80, 210, 20));

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel7.setForeground(new java.awt.Color(0, 51, 204));
        jLabel7.setText("      DD      /      MM    /     Y YYY");
        pnlHome.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 65, 170, 20));

        add(pnlHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 750));

        pnlAddHeader.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlAddHeader.setVisible(false);
        pnlAddHeader.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlAddHeaderComponentShown(evt);
            }
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                pnlAddHeaderComponentHidden(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Code");
        pnlAddHeader.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 50, 20));

        txtCode.setBackground(new java.awt.Color(204, 255, 153));
        txtCode.setEditable(false);
        pnlAddHeader.add(txtCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 150, -1));

        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("Date");
        pnlAddHeader.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 80, 30, 20));

        jLabel10.setForeground(new java.awt.Color(0, 0, 153));
        jLabel10.setText("Store");
        pnlAddHeader.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 110, 40, 20));

        btSave.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\save1.gif"));
        btSave.setMnemonic('S');
        btSave.setText("Save");
        btSave.setToolTipText(" ");
        btSave.setEnabled(false);
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        pnlAddHeader.add(btSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 90, 27));

        btD_Cancel.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\back1.jpg"));
        btD_Cancel.setMnemonic('B');
        btD_Cancel.setText("Back");
        btD_Cancel.setToolTipText(" ");
        btD_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_CancelActionPerformed(evt);
            }
        });

        pnlAddHeader.add(btD_Cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 440, 90, -1));

        cbAddStore.setBackground(new java.awt.Color(204, 255, 255));
        cbAddStore.setFont(new java.awt.Font("Dialog", 0, 12));
        cbAddStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAddStoreActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbAddStore, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 110, 180, 20));

        cbDO_DD.setBackground(new java.awt.Color(204, 255, 255));
        cbDO_DD.setFont(new java.awt.Font("Dialog", 0, 12));

        cbDO_DD.setSelectedIndex(curDate.getDate()-1);
        pnlAddHeader.add(cbDO_DD, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, 50, 20));

        cbDO_MM.setBackground(new java.awt.Color(204, 255, 255));
        cbDO_MM.setFont(new java.awt.Font("Dialog", 0, 12));

        cbDO_MM.setSelectedIndex(curDate.getMonth());

        pnlAddHeader.add(cbDO_MM, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 80, 50, 20));

        cbDO_YY.setBackground(new java.awt.Color(204, 255, 255));
        cbDO_YY.setFont(new java.awt.Font("Dialog", 0, 12));

        cbDO_YY.setSelectedIndex( curDate.getYear()-50 );
        pnlAddHeader.add(cbDO_YY, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 80, 80, 20));

        jLabel91.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel91.setForeground(new java.awt.Color(51, 51, 255));
        jLabel91.setText("      DD      /      MM    /     Y YYY");
        pnlAddHeader.add(jLabel91, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 180, 30));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder(null, "Invoice Details", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 18), new java.awt.Color(0, 0, 204)));
        jScrollPane3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane3.setViewportBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 1, 1), new java.awt.Color(51, 51, 255)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel24.setForeground(new java.awt.Color(0, 0, 153));
        jLabel24.setText("Sl. No.");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 40, -1));

        jLabel25.setForeground(new java.awt.Color(0, 0, 153));
        jLabel25.setText("D.O. No.");
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, -1, -1));

        jLabel26.setForeground(new java.awt.Color(0, 0, 153));
        jLabel26.setText("Date");
        jPanel1.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, -1, -1));

        jLabel36.setForeground(new java.awt.Color(0, 0, 153));
        jLabel36.setText("Total Amount");
        jPanel1.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, 80, -1));

        txtDO_Dis.setBackground(new java.awt.Color(204, 255, 153));
        txtDO_Dis.setEditable(false);
        txtDO_Dis.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtDO_Dis, new org.netbeans.lib.awtextra.AbsoluteConstraints(417, 30, 95, 20));

        cbDO_No.setBackground(new java.awt.Color(204, 255, 255));
        cbDO_No.setFont(new java.awt.Font("Dialog", 1, 10));
        cbDO_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDO_NoActionPerformed(evt);
            }
        });

        jPanel1.add(cbDO_No, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 93, 20));

        txtDO_SlNo.setBackground(new java.awt.Color(204, 255, 153));
        txtDO_SlNo.setEditable(false);
        txtDO_SlNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(txtDO_SlNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 93, 20));

        tblDetails.setSelectionBackground(new java.awt.Color(204, 255, 255));
        changeDetailsTbl();
        tblDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetailsMouseClicked(evt);
            }
        });

        jPanel1.add(tblDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 650, -1));

        jLabel361.setForeground(new java.awt.Color(0, 0, 153));
        jLabel361.setText("Tax");
        jPanel1.add(jLabel361, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, 30, -1));

        txtDO_Date.setBackground(new java.awt.Color(204, 255, 153));
        txtDO_Date.setEditable(false);
        txtDO_Date.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jPanel1.add(txtDO_Date, new org.netbeans.lib.awtextra.AbsoluteConstraints(232, 30, 93, 20));

        txtCur.setBackground(new java.awt.Color(204, 255, 153));
        txtCur.setEditable(false);
        txtCur.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtCur, new org.netbeans.lib.awtextra.AbsoluteConstraints(324, 30, 93, 20));

        jLabel3611.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3611.setText("Discount");
        jPanel1.add(jLabel3611, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, 60, -1));

        txtDO_Tax.setBackground(new java.awt.Color(204, 255, 153));
        txtDO_Tax.setEditable(false);
        txtDO_Tax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtDO_Tax, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 30, 93, 20));

        txtDO_Total_Amt.setBackground(new java.awt.Color(204, 255, 153));
        txtDO_Total_Amt.setEditable(false);
        txtDO_Total_Amt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtDO_Total_Amt, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 30, 93, 20));

        jLabel6.setForeground(new java.awt.Color(0, 0, 153));
        jLabel6.setText("Currency");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        jScrollPane3.setViewportView(jPanel1);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 759, 160));

        btD_Add.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\add1.gif"));
        btD_Add.setMnemonic('A');
        btD_Add.setText("Add Item");
        btD_Add.setToolTipText(" ");
        btD_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_AddActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 190, 120, -1));

        btD_Remove.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\minus3.gif"));
        btD_Remove.setMnemonic('R');
        btD_Remove.setText("Remove Item");
        btD_Remove.setToolTipText(" ");
        btD_Remove.setEnabled(false);
        btD_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_RemoveActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Remove, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 190, 140, -1));

        btD_Finish.setIcon(new javax.swing.ImageIcon("C:\\Exp\\images\\finish2.gif"));
        btD_Finish.setMnemonic('F');
        btD_Finish.setText("Finish");
        btD_Finish.setToolTipText(" ");
        btD_Finish.setEnabled(false);
        btD_Finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_FinishActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Finish, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 190, 120, 27));

        pnlAddHeader.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 780, 230));

        jLabel110.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jLabel110.setForeground(new java.awt.Color(0, 51, 204));
        jLabel110.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel110.setText("Invoice");
        pnlAddHeader.add(jLabel110, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 10, 200, -1));

        cbCustN.setBackground(new java.awt.Color(204, 255, 255));
        cbCustN.setFont(new java.awt.Font("Dialog", 0, 12));
        cbCustN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCustNActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbCustN, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 110, 170, 20));

        jLabel12.setForeground(new java.awt.Color(0, 0, 153));
        jLabel12.setText("Customer");
        pnlAddHeader.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 110, -1, 20));

        jLabel16.setForeground(new java.awt.Color(0, 0, 153));
        jLabel16.setText("Total Discount");
        pnlAddHeader.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 455, 90, 20));

        jLabel17.setForeground(new java.awt.Color(0, 0, 153));
        jLabel17.setText("Total Tax");
        pnlAddHeader.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 480, 90, 20));

        jLabel22.setForeground(new java.awt.Color(0, 0, 153));
        jLabel22.setText("Net Total");
        pnlAddHeader.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 505, 70, 20));

        txtDscAmt.setBackground(new java.awt.Color(204, 204, 255));
        txtDscAmt.setEditable(false);
        txtDscAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pnlAddHeader.add(txtDscAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 455, 220, 20));

        txtTaxAmt.setBackground(new java.awt.Color(204, 204, 255));
        txtTaxAmt.setEditable(false);
        txtTaxAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pnlAddHeader.add(txtTaxAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 480, 220, 20));

        txtNetTotal.setBackground(new java.awt.Color(204, 204, 255));
        txtNetTotal.setEditable(false);
        txtNetTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pnlAddHeader.add(txtNetTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 505, 220, -1));

        cbAuthBy.setBackground(new java.awt.Color(204, 255, 255));
        cbAuthBy.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlAddHeader.add(cbAuthBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 80, 170, 20));

        jLabel8.setForeground(new java.awt.Color(0, 0, 153));
        jLabel8.setText("Auth. By");
        pnlAddHeader.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, -1, -1));

        add(pnlAddHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 750));

    }//GEN-END:initComponents

    private void jScrollPane1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane1ComponentResized
int h=tblHeader.getRowHeight()*(rowH_Shown+1); 
 if(h<300)
jScrollPane1.setSize(500,h+5);  
 else
     jScrollPane1.setSize(500,300);  //*/

    }//GEN-LAST:event_jScrollPane1ComponentResized

    private void cbCustNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCustNActionPerformed
if((!cbAddStore.isPopupVisible()) && add &&(!loadingCombo))
        fillDO_Nos("cbCustN");//*/
    }//GEN-LAST:event_cbCustNActionPerformed

    private void tblHeaderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHeaderMouseClicked
clickH=true;
selrowH=tblHeader.getSelectedRow();                

    }//GEN-LAST:event_tblHeaderMouseClicked

    private void tblDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetailsMouseClicked
clickD=true;
if(tblDetails.isEnabled())
selrowD=tblDetails.getSelectedRow();      

    }//GEN-LAST:event_tblDetailsMouseClicked

    private void tblHeaderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblHeaderKeyReleased
        if( evt.getKeyCode() == evt.VK_UP || evt.getKeyCode() == evt.VK_DOWN || evt.getKeyCode() == evt.VK_TAB){
              selrowH = tblHeader.getSelectedRow() ;
              
            if(selrowH>=0)
                clickH = true;
            else
                clickH = false;

        }

    }//GEN-LAST:event_tblHeaderKeyReleased

    private void btCancelPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelPOActionPerformed
cancel();

    }//GEN-LAST:event_btCancelPOActionPerformed

    private void btModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btModifyActionPerformed
      modifyPressed();
      tblHeader.clearSelection();
        clickH=false;        
    }//GEN-LAST:event_btModifyActionPerformed

    private void pnlHomeComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlHomeComponentShown
fillHeaderTbl();  
    }//GEN-LAST:event_pnlHomeComponentShown

    private void cbDO_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDO_NoActionPerformed

        if(rowD_Shown >= 1 ){
            for(int i=0;i<rowD_Shown;i++){
                if(dataD_Shown[i][1].equals(cbDO_No.getSelectedItem())){
                    cbDO_No.setSelectedIndex(0);
JOptionPane.showMessageDialog(this,"Selected D.O. No. already exists in the list","Error!",JOptionPane.ERROR_MESSAGE);                        
                    break;
                }//end if
            }//end for
        }//end  if
      
        if(cbDO_No.getSelectedIndex()>0 && (!loadingCombo)){
            Object doNo = cbDO_No.getSelectedItem();
            Object[] details = new Object[5];
            details = doH.queryMulEle(new int[]{3,9,11,13,14},"WHERE DO_No = '"+doNo+"'");
            txtDO_Date.setText(""+details[0]);
            txtCur.setText(""+curM.queryOneEle(3,"WHERE CM_ID = '"+details[1]+"'"));
            txtDO_Dis.setText(""+details[2]);
            txtDO_Tax.setText(""+details[3]);
            txtDO_Total_Amt.setText(""+details[4]);
        }
    }//GEN-LAST:event_cbDO_NoActionPerformed

    private void cbAddStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAddStoreActionPerformed
if((!cbCustN.isPopupVisible()) && add &&(!loadingCombo))
        fillDO_Nos("cbAddStore");//*/
    }//GEN-LAST:event_cbAddStoreActionPerformed

    private void pnlAddHeaderComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlAddHeaderComponentHidden
pnlHeaderShown = false;
removeDetails=false;
deleteArrayOverflow=false;
deleteNo=0;
        for(int i=0;i<rowD_Shown;i++)
            for(int j=0;j<COL_D_SHOWN;j++)
               dataD_Total[i][j]="";
                resetDetails(); 
                rowD_Shown=0;
                 changeDetailsTbl();    

    }//GEN-LAST:event_pnlAddHeaderComponentHidden

    private void pnlAddHeaderComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlAddHeaderComponentShown
        
        pnlHeaderShown = true;
        detailsEditable();
        btSave.setEnabled(false);
        btD_Add.setVisible(true);
        btD_Add.setEnabled(true);

      btD_Finish.setVisible(true);
      btD_Finish.setEnabled(false);
      btD_Remove.setVisible(true);
      btD_Remove.setEnabled(false);

 
        if(add){
            
loadingCombo=true;            
ComboMnpl.removeComboElements(cbAddStore,"[Select One]");
ComboMnpl.removeComboElements(cbCustN,"[Select One]");
storeM.fillCombo(cbAddStore,"StoreName","WHERE Active = 'Y'","StoreName");     
custM.fillCombo(cbCustN,"CustName","WHERE Active = 'Y'","CustName");
ComboMnpl.removeComboElements(cbDO_No,"[Select One]");
loadingCombo=false;
            
generateCode();
resetDetails();
resetHeader();
headerEditable();

                     
}//end if
        else{
            headerUnEditable();
                                    btD_Remove.setEnabled(true);
if(rowD_Shown==1)
btD_Remove.setEnabled(false);                                    
            
        }//end else


    }//GEN-LAST:event_pnlAddHeaderComponentShown

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
try{
    updateDatabase();
}
catch(Exception e){
    System.out.println("1865\t"+e);
}

    }//GEN-LAST:event_btSaveActionPerformed

    private void btD_FinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_FinishActionPerformed
btSave.setEnabled(true);
btD_Add.setEnabled(false);
btD_Remove.setEnabled(false);
btD_Finish.setEnabled(false);

    }//GEN-LAST:event_btD_FinishActionPerformed

    private void btD_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_RemoveActionPerformed
        if(clickD){//item selected from Details Table---------- main if
            
removeDetails=true;            //generate SQL statements to delete items
if(!add && rowD_Shown>0){   
    try{
deleteDetails[deleteNo] = "DELETE FROM Invoice_D WHERE Inv_No = '"+txtCode.getText()+"' AND DO_No = '"+dataD_Shown[selrowD][1]+"'"; 
doTbl[deleteNo] = ""+doH.modifyData(new int[]{17,18},new Object[]{"N","Y"},"WHERE DO_No = '"+dataD_Shown[selrowD][1]+"'");
deleteNo++;
    }//end try
    catch(ArrayIndexOutOfBoundsException e){
        System.out.println("1761");
JOptionPane.showMessageDialog(this,"The max. no. of permitted delete operation is 50 for a given table.\nIf you want to delete still more items from the table, select the P.O. No. from the main table and try again.","Sorry!",JOptionPane.INFORMATION_MESSAGE);            
        deleteArrayOverflow=true;
    }//end catch
}//end if(!add && rowD_Shown>0){   
     
//to remove item from table
    if(!deleteArrayOverflow){
     for(int i=0;i<rowD_Shown;i++)
            for(int j=0;j<COL_D_SHOWN;j++){
                                if( i >= selrowD && i < (rowD_Shown-1) ){
                                    if(j==0)
                                        dataD_Total[i][j] ="" + (i+1);
                                    else
                    dataD_Total[i][j] = dataD_Total[i+1][j]; 
                                }
                            }//end for
        
                     rowD_Shown --;                    
dataD_Shown = new Object[rowD_Shown][COL_D_SHOWN];
                          for(int i=0;i<rowD_Shown;i++)
            for(int j=0;j<COL_D_SHOWN;j++)
                dataD_Shown[i][j] = dataD_Total[i][j];
                                             dataD_Total=dataD_Shown ;
            txtDO_SlNo.setText("" + (rowD_Shown+1));                                                      

            showDetailsTbl();
            
    }//end if(!deleteArrayOverflow){

if(rowD_Shown<=1 || deleteArrayOverflow)
btD_Remove.setEnabled(false);
else
    btD_Remove.setEnabled(true);

if(rowD_Shown==1 && add)
    btD_Remove.setEnabled(true);


if(rowD_Shown!=0)
btD_Finish.setEnabled(true);
else
    btD_Finish.setEnabled(false);

if(!btD_Add.isEnabled())
    btD_Add.setEnabled(true);

    resetDetails(); 
    clickD=false;
    
    fillAmts();
        }//end main if
           else 
            JOptionPane.showMessageDialog(this,"Select the row you want to delete.","Error!",JOptionPane.INFORMATION_MESSAGE);                
        
            tblDetails.clearSelection();

    }//GEN-LAST:event_btD_RemoveActionPerformed

    private void btD_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_AddActionPerformed
        if(rowD_Shown>=50){
            btD_Add.setEnabled(false);
            JOptionPane.showMessageDialog(this,"You are not allowed to add more than 50 Items in a single Delivery Order. \nIf you want to add more, create a new Delivery Order.","Error!",JOptionPane.INFORMATION_MESSAGE);
        }//end if
        else{//main else
            
            if(checkDetailsValidation()){
                rowD_Shown ++ ;
                changeDetailsTbl();
                fillAmts();
                txtDO_SlNo.setText("" + (rowD_Shown+1));
                resetDetails();
                if(!deleteArrayOverflow)
                    btD_Remove.setEnabled(true);
                btD_Finish.setEnabled(true);
            }//end if
        }//end main else

    }//GEN-LAST:event_btD_AddActionPerformed

    private void btD_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_CancelActionPerformed
        addCancelPressed();
    }//GEN-LAST:event_btD_CancelActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
this.setVisible(false);
    }//GEN-LAST:event_btExitActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
addPressed();
    }//GEN-LAST:event_btAddActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
         
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    /*public static void main(String args[]) {
        new Invoice().show();
    }*/

    private void addPressed() {
        
        add=true;
        pnlHome.setVisible(false);
        pnlAddHeader.setVisible(true);
    }    

    private void addCancelPressed() {
        txtCode.setText("");
        
        add=false;
        pnlAddHeader.setVisible(false);
        pnlHome.setVisible(true);
    }
    
    private void updateDatabase() throws SQLException {
        if(add){
            if(checkHeaderValidation()){
                String[] ssD = new String[rowD_Shown];
                String[] ssDoTbl = new String[rowD_Shown];
                for(int i=0;i<rowD_Shown;i++){
                    ssD[i]=""+invD.addDataAllColsBut1st(findValues_D(i));
                System.out.println("ssD["+i+"] = "+ssD[i]);
                ssDoTbl[i]=""+doH.modifyData(new int[]{17,18},new Object[]{"Y","N"},"WHERE DO_No = '"+dataD_Shown[i][1]+"'");
                }
                String ssH = ""+invH.addDataAllColsBut1st(findValues_H());
                System.out.println("ssH = "+ssH);
                
                
                try{
                    accessDB();
                    con.setAutoCommit(false);
                    
                    //INSERT DETAILS
                    for(int i=0;i<rowD_Shown;i++){
                        stat.executeUpdate(ssD[i]);
                        stat.executeUpdate(ssDoTbl[i]);
                    }//end for
                     
                    //INSERT HEADER
                    stat.executeUpdate(ssH);

                    add=false;
                    
                    con.commit();
                    con.close();
                    
                    updateCode();
                    
                }
                catch(Exception e){
                    con.rollback();
                    con.setAutoCommit(true);
                    con.close();
                    System.out.println("ERROR IN addSave(): 1977 :\t"+e);
                }//end catch
                
                pnlHome.setVisible(true);
                pnlAddHeader.setVisible(false);
                add=false;
                
                
            }//end if
        }//end if
        else
            saveModifiedDetails();
        
    }
    
    private void modDetails() {
       if(checkDetailsValidation()){
            btD_Add.setVisible(true);
            btD_Remove.setVisible(true);
            btD_Finish.setVisible(true);
            btD_Remove.setEnabled(true);
            if(deleteArrayOverflow || rowD_Shown==1)
                btD_Remove.setEnabled(false);
            btD_Finish.setEnabled(true);
            fillDetailsTbl(selrowD);
            
            resetDetails();
            txtDO_SlNo.setText("" + (rowD_Shown+1));
            
            showDetailsTbl();
            
            detailsEditable();
            
       }//end if
        
        
    }
    
    private void detailsModify() {
        if(clickD && tblDetails.getSelectedRow()>=0){//main if
            selrowD=tblDetails.getSelectedRow();
            txtDO_SlNo.setText(""+dataD_Shown[selrowD][0]);
            cbDO_No.setSelectedItem(dataD_Shown[selrowD][1]);
            txtDO_Date.setText(""+dataD_Shown[selrowD][2]);
            txtCur.setText(""+dataD_Shown[selrowD][3]);
            txtDO_Dis.setText(""+dataD_Shown[selrowD][4]);
            txtDO_Tax.setText(""+dataD_Shown[selrowD][5]);
            txtDO_Total_Amt.setText(""+dataD_Shown[selrowD][6]);
            
            detailsUnEditable();
            
            btD_Add.setVisible(false);
            btD_Remove.setVisible(false);
            btD_Finish.setVisible(false);
        }//end main if
        else{//main else
            JOptionPane.showMessageDialog(this," Select a row from the Delivery Order Details to Edit.","No rows selected!",JOptionPane.INFORMATION_MESSAGE);
            tblDetails.clearSelection();
        }//end else
    }//*/
    
    private void fillAmts() {
                    double dis=0,tax=0,net=0;
                    
            for(int i=0;i<rowD_Shown;i++){
                double cur=Double.parseDouble(""+curM.queryOneEle(4,"WHERE CM_Name = '"+dataD_Total[i][3]+"'"));        
                dis+=Double.parseDouble(""+dataD_Total[i][4])*cur;
                tax+=Double.parseDouble(""+dataD_Total[i][5])*cur;
                net+=Double.parseDouble(""+dataD_Total[i][6])*cur;
            }//end for
                
        txtDscAmt.setText(""+dis);
        txtTaxAmt.setText(""+tax);
        txtNetTotal.setText(""+net);
    }//end fillAmts
    
    private boolean checkHeaderValidation() {
        
        boolean headerIsValid=false;

        if(cbAuthBy.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(this,"Select an Item from the list of Authorised By","",JOptionPane.INFORMATION_MESSAGE);
            headerIsValid=false;
        }//end if
        
        else
            headerIsValid=true;
        
        return headerIsValid;
        
    }
    
    private void showDetailsTbl() {
        
        for(int i=0;i<rowD_Shown;i++)
            for(int j=0;j<COL_D_SHOWN;j++)
                try{
                        if(j==4||j==5||j==6)
                        dataD_Shown[i][j]=new Double(""+dataD_Shown[i][j]);
                }
                catch(Exception e){
                    System.out.println("1292 i="+i+" j="+j+"\t"+e);
                }
        
        tblDetails.setModel(new javax.swing.table.DefaultTableModel(
            dataD_Shown,
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
//end table model
        
        dataD_Total = dataD_Shown;
        
    }
    
    private void resetDetails() {
        cbDO_No.setEnabled(true);
        cbDO_No.setSelectedIndex(0);
        txtDO_Date.setText("[Select D.O. No.]");
        txtCur.setText("[Select D.O. No.]");
        txtDO_Dis.setText("0");
        txtDO_Tax.setText("0");
        txtDO_Total_Amt.setText("0");
    }//end resetDetails
    
    private void changeDetailsTbl() {
        
        if(rowD_Shown == 0)
            txtDO_SlNo.setText("1");
        
        dataD_Shown = new Object[rowD_Shown][COL_D_SHOWN];
        for(int i=0;i<(rowD_Shown -1);i++)
            for(int j=0;j<COL_D_SHOWN;j++)
                dataD_Shown[i][j] = dataD_Total[i][j];
        if(rowD_Shown != 0 )
            fillDetailsTbl(rowD_Shown-1);
        
        showDetailsTbl();
        
    }
    
    private boolean checkDetailsValidation() {
        
        boolean detailsAreValid=false;
        
       if(cbAddStore.isEnabled()){
            JOptionPane.showMessageDialog(this,"Select an Item from the list of Stores","No Store selected!",JOptionPane.INFORMATION_MESSAGE);
            detailsAreValid=false;
        }//end if
        
        else if(cbCustN.isEnabled()){
            JOptionPane.showMessageDialog(this,"Select an Item from the list of Customers","No Customer selected!",JOptionPane.INFORMATION_MESSAGE);
            detailsAreValid=false;
        }//end if
        
        else if(cbDO_No.getSelectedIndex()==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Select a D.O. No. from the List.","Error!",JOptionPane.INFORMATION_MESSAGE);
            cbDO_No.requestFocus();
        }
            else
                detailsAreValid=true;

        return detailsAreValid;
        
    }//*/
    

    
    private Object[] findValues_D(int rowNo) {
        
        Object[] val = new Object[COL_D_SHOWN+1];
        
        //'coz the first value will be Inv_No
        
        val[0]=txtCode.getText();
        
        for(int j=0;j<COL_D_SHOWN;j++)
            if(j==3)
                val[j+1]=curM.queryOneEle(2,"WHERE CM_Name = '"+dataD_Shown[rowNo][j]+"'");
            else
                val[j+1]=dataD_Shown[rowNo][j];
        return val;
        
    }//end 
    
    private Object[] findValues_H() {
        Object[] val = new Object[invH.no_of_cols-1];
        
        val[0] = ""+txtCode.getText();
        val[1]=""+cbDO_DD.getSelectedItem()+"/"+cbDO_MM.getSelectedItem()+"/"+cbDO_YY.getSelectedItem();
        val[2]=storeM.queryOneEle(2,"WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'");
                
        val[3]="    ";
        val[4]="    ";
        
        val[5]="    ";
        val[6]="    ";

        
        val[7]=custM.queryOneEle(2,"WHERE CustName = '"+cbCustN.getSelectedItem()+"'");
        
        val[8]=authBy.queryOneEle(2,"WHERE EmpName = '"+cbAuthBy.getSelectedItem()+"'");
        
        val[9]=""+txtDscAmt.getText();
        val[10]=""+txtTaxAmt.getText();
        val[11]=""+txtNetTotal.getText();
        
        val[12]="N";
        val[13]="N";
        val[14]="";
        
        return val;
    }
    
    public void accessDB() {
        try {
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            con=DriverManager.getConnection("jdbc:odbc:sha");
            stat=con.createStatement();
        }
        catch(Exception ex) {
            System.out.println(ex);
        }
    }
    
    private void updateCode() {
        int ctr = Integer.parseInt(""+semaPhores.queryOneEle(4,"WHERE TableName = 'Invoice_H'"))+1;
        String ss1 = semaPhores.modifyData(new int[]{4},new Object[]{""+ctr},"WHERE TableName = 'Invoice_H'");
        
        
        try{
            accessDB();
            stat.executeUpdate(ss1);
            con.close();
        }//end try
        catch(Exception e){
            System.out.println(e+"\n2753");
        }//end catch
    }
    
    private void saveModifiedDetails() throws java.sql.SQLException {
//to change the 'Modified' column of the header table to "Y" 
//the date and time is automatically set to the current date and time since column ModifiedOn is of the type TIMESTAMP
//hence the old code is commented out        
        
        //String modHeader = invH.modifyData(new int[]{15,16},new Object[]{"Y",""+curDate},"WHERE Inv_No = '"+txtCode.getText()+"'");
        
        String modHeader = invH.modifyData(new int[]{15},new Object[]{"Y"},"WHERE Inv_No = '"+txtCode.getText()+"'");
        
        //to delete selected data
        if(removeDetails){
            
            try{
                accessDB();
                for(int i=0;i<deleteNo;i++){
                    stat.executeUpdate(deleteDetails[i]);
                    stat.executeUpdate(doTbl[i]);
           
                }//end for
                con.close();
                
            }//end try
            
            catch(Exception e){
                System.out.println(e+"    2584");
            }//end exception
            
            
        }//end if removeDetails
        
        String[] ss = new String[rowD_Shown];
        String[] ssDoTbl = new String[rowD_Shown];
        for(int i=0,j=0;i<rowD_Shown;i++){
            String cond = "WHERE Inv_No = '"+txtCode.getText()+"'  AND DO_No = '"+dataD_Shown[i][1]+"'";
            int test = invD.queryRow(cond);
            ssDoTbl[i]="null";
            if(test>0)
                ss[i] =invD.modifyDataAllColsBut1st(findValues_D(i),cond);
            else{
            
                ss[i] = invD.addDataAllColsBut1st(findValues_D(i));
                ssDoTbl[j] = ""+doH.modifyData(new int[]{17,18},new Object[]{"Y","N"},"WHERE DO_No = '"+dataD_Shown[i][1]+"'");
                j++;
            }
        }//end for
        
        //to insert/update database
        
        try{
            
            accessDB();
            con.setAutoCommit(false);
            
            for(int i=0;i<rowD_Shown;i++){
                stat.executeUpdate(ss[i]);
                try{
                if(!ssDoTbl[i].equals("null") )
                stat.executeUpdate(ssDoTbl[i]);
                }catch(Exception e){System.out.println("XXXXXXXXXXXXXXXX\ti = "+i+"\tssDoTbl.length = "+ssDoTbl.length);}
            }
            stat.executeUpdate(modHeader);
            
            con.commit();
            con.close();
        }
        catch(Exception e){
            System.out.println("ERROR IN saveModifiedDetails():1522 \t"+e);
            con.rollback();
            con.setAutoCommit(true);
            con.close();
        }
        
        fillHeaderTbl();
        pnlHome.setVisible(true);
        pnlAddHeader.setVisible(false);
        
        
    }
    
    private void fillDetailsTbl(int r) {
        dataD_Shown[r][0] = ""+txtDO_SlNo.getText();
        dataD_Shown[r][1] =cbDO_No.getSelectedItem();
        dataD_Shown[r][2] =""+txtDO_Date.getText();
        dataD_Shown[r][3] =""+txtCur.getText();
        dataD_Shown[r][4] =""+txtDO_Dis.getText();
        dataD_Shown[r][5] =""+txtDO_Tax.getText();
        dataD_Shown[r][6] =""+txtDO_Total_Amt.getText();
    }//end 
    
    private void detailsEditable() {
        cbDO_No.setEnabled(true);
        tblDetails.setEnabled(true);
        
    }
    
    private void detailsUnEditable() {
        cbDO_No.setEnabled(false);
        
        tblDetails.setEnabled(false);
    }
    
    private void fillHeaderTbl() {
        int rows=0;
        //check for empty database but do not show any message
        
        if(invH.queryRow("")==0)
            dataH_Shown = new Object[0][COLUMN_H_SHOWN.length];
        else if(cbStoreList.getSelectedIndex()==0){
            
            preStore = "[All Items]";
            
            rows = invH.queryRow("");
            
            rowH_Raw = rows;
            
            dataH_Raw = new Object[rowH_Raw][COLUMN_H_SHOWN.length];
            
            dataH_Raw = invH.queryMulCols(rowH_Raw,new int[]{2,3,9,13,14},"");
        }//end if
        else{//main else
            Object storeId = storeM.queryOneEle(2,"WHERE StoreName = '"+cbStoreList.getSelectedItem()+"'");
            
            rows = invH.queryRow("WHERE Store_ID = '"+storeId+"'");
            
            if(rows>0){
                
                preStore=""+cbStoreList.getSelectedItem();
                
                rowH_Raw=rows;
                
                dataH_Raw = new Object[rowH_Raw][COLUMN_H_SHOWN.length];
                
                dataH_Raw = invH.queryMulCols(rowH_Raw,new int[]{2,3,9,13,14},"WHERE Store_ID = '"+storeId+"'");
            }//end if
            else{
                JOptionPane.showMessageDialog(this,"Sorry: No items were found according to your choice of Store","From the DataBase",JOptionPane.INFORMATION_MESSAGE);
                cbStoreList.setSelectedItem(preStore);
            }//end else
        }//end main else
        
        if(rows>0){
            
            for(int i=0;i<rowH_Raw;i++)
                dataH_Raw[i][2]=""+custM.queryOneEle(3,"WHERE CustCode = '"+dataH_Raw[i][2]+"'");
            
            dateConstraint(dataH_Raw,rowH_Raw);
            
            rowH_Shown=rowH_Date;
            
            dataH_Shown = new Object[rowH_Shown][COLUMN_H_SHOWN.length];
            dataH_Shown=dataH_Date;
        }//if
        
        showHeaderTbl();
        
    }
    
    private void dateConstraint(Object[][] raw, int row) {
        int frDD=Integer.parseInt( cbFrDD.getSelectedItem().toString() );
        int  frMM=Integer.parseInt( cbFrMM.getSelectedItem().toString() )-1;
        int frYY=Integer.parseInt( cbFrYY.getSelectedItem().toString() )-1900;
        
        int toDD=Integer.parseInt( cbToDD.getSelectedItem().toString() );
        int toMM=Integer.parseInt( cbToMM.getSelectedItem().toString() )-1;
        int toYY=Integer.parseInt( cbToYY.getSelectedItem().toString() )-1900;
        
        java.util.Date fromDate = new java.util.Date(frYY,frMM,frDD);
        java.util.Date toDate = new java.util.Date(toYY,toMM,toDD);
        
        rowH_Date=0;
        
        Object temp[][] = new Object[row][COLUMN_H_SHOWN.length];
        for(int i=0;i<row;i++){
            int s[] = new int[3];
            StringTokenizer st = new StringTokenizer(raw[i][1].toString() , "/");
            int k=0;
            while( st.hasMoreTokens() ){
                s[k]=Integer.parseInt( st.nextToken() );
                k++;
            }//end while
            java.util.Date dataDate = new java.util.Date(s[2]-1900,s[1]-1,s[0]);
            
            if(fromDate.compareTo(dataDate)<=0 && toDate.compareTo(dataDate)>=0){//YYif
                for(int j=0;j<COLUMN_H_SHOWN.length;j++){
                    temp[rowH_Date][j]=raw[i][j];
                }
                rowH_Date++;
                
            }//end YYif
            
        }//end for
        
        
        if(rowH_Date==0){
            rangeMatching=false;
            cbFrYY.setSelectedIndex( preFromDate.getYear()-50 );
            cbFrMM.setSelectedIndex(preFromDate.getMonth());
            cbFrDD.setSelectedIndex(preFromDate.getDate()-1);
            cbToYY.setSelectedIndex( preToDate.getYear()-50 );
            cbToMM.setSelectedIndex(preToDate.getMonth());
            cbToDD.setSelectedIndex(preToDate.getDate()-1);
            
            rangeMatching=true;
            
            JOptionPane.showMessageDialog(this,"No items were found corresponding to your date-limit.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
            
        }//*/
        else{
            
            preFromDate=fromDate;
            preToDate=toDate;
            dataH_Date = new Object[rowH_Date][COLUMN_H_SHOWN.length];
            dataH_Date=temp;
        }//end else
        
    }
    
    private void showHeaderTbl() {
        for(int i=0;i<rowH_Shown;i++)
            dataH_Shown[i][3]=new Float(""+dataH_Shown[i][3]);
        
        tblHeader.setModel(new javax.swing.table.DefaultTableModel(dataH_Shown,COLUMN_H_SHOWN) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };
            
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        }); //end tableModel
        
        
    }
    
    private void generateCode() {
        int ctr = Integer.parseInt(""+semaPhores.queryOneEle(4,"WHERE TableName = 'Invoice_H'"));
        String prefix = ""+semaPhores.queryOneEle(3,"WHERE TableName = 'Invoice_H'");
        if(prefix.equals("null"))
            prefix="";
        txtCode.setText(""+prefix+ctr);
        
    }
    
    private void headerEditable() {
        cbDO_DD.setEnabled(true);
        cbDO_MM.setEnabled(true);
        cbDO_YY.setEnabled(true);
        cbAddStore.setEnabled(true);


        cbCustN.setEnabled(true);
        cbAuthBy.setEnabled(true);
    }
    
    private void headerUnEditable() {
        cbDO_DD.setEnabled(false);
        cbDO_MM.setEnabled(false);
        cbDO_YY.setEnabled(false);
        cbAddStore.setEnabled(false);
        cbCustN.setEnabled(false);
         cbAuthBy.setEnabled(false);
        
        
    }
    
    private void resetHeader() {
        
        cbAddStore.setEnabled(true);
        cbAddStore.setSelectedIndex(0);
        cbCustN.setSelectedIndex(0);
        cbAuthBy.setSelectedIndex(0);
        cbDO_DD.setSelectedIndex(curDate.getDate()-1);
        cbDO_MM.setSelectedIndex(curDate.getMonth());
        cbDO_YY.setSelectedIndex( curDate.getYear()-50 );
        txtDscAmt.setText("0");
        txtTaxAmt.setText("0");
        txtNetTotal.setText("0");
        
    }
    
    private void cancel() {
        if(  rowH_Raw==0   )
            JOptionPane.showMessageDialog(this," The Database is currently empty.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
        else
            if(clickH){
                if(dataH_Shown[selrowH][4].toString().trim().equals("Y"))
                    JOptionPane.showMessageDialog(this," The selected Inv. No. is already CANCELLED. ","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                else{
                    try{
                        accessDB();
                        String ss = "UPDATE Invoice_H SET Cancelled = 'Y' WHERE Inv_No = '"+dataH_Shown[selrowH][0]+"'";
                        System.out.println(ss);
                        stat.executeUpdate(ss);
                        con.close();
                    }//end try
                    catch(Exception e){
                        System.out.println(e+"\n2773");
                    }//end catch
                    
                    
                    fillHeaderTbl();
                }//end else
                clickH=false;
                tblHeader.clearSelection();
            }//end if
            else
                JOptionPane.showMessageDialog(this," Select the Inv. No. you want to Cancel from the Table. ","Sorry!",JOptionPane.INFORMATION_MESSAGE);
        
    }
    
    private void modifyPressed() {
        if(  rowH_Raw==0   )
            JOptionPane.showMessageDialog(this," The Database is currently empty.","Sorry!",JOptionPane.INFORMATION_MESSAGE );
        else if( clickH ){
            
            txtCode.setText(""+dataH_Shown[selrowH][0]);
            
            int s[] = new int[3];
            StringTokenizer st = new StringTokenizer(""+dataH_Shown[selrowH][1] , "/");
            int k=0;
            while( st.hasMoreTokens() ){
                s[k]=Integer.parseInt( st.nextToken() );
                k++;
            }//end while
            cbDO_DD.setSelectedIndex(s[0]-1);
            cbDO_MM.setSelectedIndex(s[1]-1);
            cbDO_YY.setSelectedIndex(s[2]-1950);
            
            ComboMnpl.removeAllComboElements(cbCustN);
            cbCustN.addItem(dataH_Shown[selrowH][2]);
            
            String cond = "WHERE Inv_No = '"+dataH_Shown[selrowH][0]+"'" ;
            
            Object storeId = invH.queryOneEle(4,cond);
            ComboMnpl.removeAllComboElements(cbAddStore);
            cbAddStore.addItem(storeM.queryOneEle(3,"WHERE StoreID = '"+storeId+"'"));
            
            txtNetTotal.setText(""+dataH_Shown[selrowH][3]);
          
            Object authId = invH.queryOneEle(10,cond);
            cbAuthBy.setSelectedItem(authBy.queryOneEle(3,"WHERE EmpCode = '"+authId+"'"));//*/
            
            //To fillup the details
            
            loadingCombo = true;
            ComboMnpl.removeComboElements(cbDO_No,"[Select One]");
            
            Object custId = custM.queryOneEle(2,"WHERE CustName = '"+cbCustN.getSelectedItem()+"'");
            doH.fillCombo(cbDO_No,"DO_No","WHERE Cust_Code = '"+custId+"' AND Store_ID = '"+storeId+"' AND Invoiced = 'N'","DO_No");
            loadingCombo=false;
            rowD_Shown = invD.queryRow("WHERE Inv_No = '"+dataH_Shown[selrowH][0]+"'");
            
            dataD_Shown = new Object[rowD_Shown][COL_D_SHOWN];
            if(rowD_Shown>0)
                dataD_Shown = invD.queryMulCols(rowD_Shown,new int[]{3,4,5,6,7,8,9},"WHERE Inv_No = '"+dataH_Shown[selrowH][0]+"'");
                double tax=0,dis=0;
                for(int i=0;i<rowD_Shown;i++){
                    dis+=Double.parseDouble(""+dataD_Shown[i][4]);
                    tax+=Double.parseDouble(""+dataD_Shown[i][5]);
                    dataD_Shown[i][3] = curM.queryOneEle(3,"WHERE CM_ID = '"+dataD_Shown[i][3]+"'");
                }//end for
                
                txtDO_SlNo.setText(""+(rowD_Shown+ 1));
                txtDO_Tax.setText(""+tax);
                txtDO_Dis.setText(""+dis);//*/
                
                showDetailsTbl();
                
                pnlHome.setVisible(false);
                pnlAddHeader.setVisible(true);
                clickH=false;
                selrowH=0;
        }//end else if
        else
            JOptionPane.showMessageDialog(this," Select the Inv. No. you want to Modify  from the Table. ","Sorry!",JOptionPane.INFORMATION_MESSAGE,new javax.swing.ImageIcon("C:\\Exp\\images\\Error.gif") );
        
        
    }
    
    private void fillDO_Nos(String x) {
        
        // the flag storeSelected=true if cbAddStore is selected
        boolean storeSelected = false;
        if(x.equals("cbAddStore"))
            storeSelected=true;
        
        if(storeSelected){ //if store combo is selected
            if( cbCustN.isEnabled() && cbAddStore.getSelectedIndex()>0){//if store combo is selected before the customer combo
                        Object storeId = storeM.queryOneEle(2,"WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'");
                        String cond = "WHERE Store_ID = '"+storeId+"' AND Invoiced = 'N'";
                        int r = doH.queryRow(cond);
    if(r==0 && add){
        JOptionPane.showMessageDialog(this,"There is no pending D.O. corresponding to the selected Store.\nPlease Select another Store.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
        cbAddStore.setSelectedIndex(0);
    }
    else {
            int k=0;  
            if(add)
            k = JOptionPane.showConfirmDialog(this,"You are allowed to select the Store Name only once.           \nAre you sure your selection is correct?","Confirm your selection....",JOptionPane.YES_NO_OPTION);
            if(k==0){
                        ComboMnpl.removeComboElements(cbCustN,"[Select One]");
                        Object[] cust = new Object[r];
                        cust = doH.query1Col(r,4,true,cond);
                        for(int i=0;i<r;i++)
                            if(!cust[i].equals("null"))
                            cbCustN.addItem(custM.queryOneEle(3,"Where CustCode = '"+cust[i]+"'"));
                        
                                cbAddStore.setEnabled(false);
            }//end if(k==0)
                        else//if k==1
                cbAddStore.setSelectedIndex(0);
    }//end else
            }
            else if((!cbCustN.isEnabled()) && cbAddStore.getSelectedIndex()>0){
                
                        Object storeId = storeM.queryOneEle(2,"WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'");
                        Object custId = custM.queryOneEle(2,"WHERE CustName = '"+cbCustN.getSelectedItem()+"'");
                        
                        String cond = "WHERE Store_ID = '"+storeId+"' AND Cust_Code = '"+custId+"' AND Invoiced = 'N'";
                        int r = doH.queryRow(cond);
    if(r==0 && add){
        JOptionPane.showMessageDialog(this,"There is no pending D.O. corresponding to the selected Store and Customer.\nPlease Select another Store.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
        cbAddStore.setSelectedIndex(0);
    }
    else {
            int k=0;  
            if(add)
            k = JOptionPane.showConfirmDialog(this,"You are allowed to select the Store Name only once.           \nAre you sure your selection is correct?","Confirm your selection....",JOptionPane.YES_NO_OPTION);
            if(k==0){
    Object doNo[] = new Object[r];
    doNo = doH.query1Col(r,2,false,cond);
    
    try{
    for(int i=0;i< r;i++)
        cbDO_No.addItem(doNo[i]);
    }//end try
    catch(Exception e){
        System.out.println("ERROR IN COMBO cbAddStore ACTION-PERFORMED :\t"+e);
    }
    
        cbAddStore.setEnabled(false);
            }//end if(k==0)
                        else//if k==1
                cbAddStore.setSelectedIndex(0);
    }//end else
                
            }
        }
        else{//if customer combo is selected
            if(cbAddStore.isEnabled() && cbCustN.getSelectedIndex()>0){//if customer combo is selected before the store combo
                        Object custId = custM.queryOneEle(2,"WHERE CustName = '"+cbCustN.getSelectedItem()+"'");
                        String cond = "WHERE Cust_Code = '"+custId+"' AND Invoiced = 'N'";
                        int r = doH.queryRow(cond);
    if(r==0 && add){
        JOptionPane.showMessageDialog(this,"There is no pending D.O. corresponding to the selected Customer.\nPlease Select another Customer.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
        cbCustN.setSelectedIndex(0);
    }
    else {
            int k=0;  
            if(add)
            k = JOptionPane.showConfirmDialog(this,"You are allowed to select the Customer Name only once.           \nAre you sure your selection is correct?","Confirm your selection....",JOptionPane.YES_NO_OPTION);
            if(k==0){
                        ComboMnpl.removeComboElements(cbAddStore,"[Select One]");
                        Object[] store = new Object[r];
                        store = doH.query1Col(r,15,true,cond);
                        for(int i=0;i<r;i++)
                             if(!store[i].equals("null"))
                            cbAddStore.addItem(storeM.queryOneEle(3,"Where StoreID = '"+store[i]+"'"));
                        
                                cbCustN.setEnabled(false);
            }//end if(k==0)
                        else//if k==1
                cbCustN.setSelectedIndex(0);
    }//end else
                
            }
            else if((!cbAddStore.isEnabled()) && cbCustN.getSelectedIndex()>0){
                
                        Object storeId = storeM.queryOneEle(2,"WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'");
                        Object custId = custM.queryOneEle(2,"WHERE CustName = '"+cbCustN.getSelectedItem()+"'");
                        
                        String cond = "WHERE Store_ID = '"+storeId+"' AND Cust_Code = '"+custId+"' AND Invoiced = 'N'";
                        int r = doH.queryRow(cond);
    if(r==0 && add){
        JOptionPane.showMessageDialog(this,"There is no pending D.O. corresponding to the selected Store and Customer.\nPlease Select another Customer.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
        cbCustN.setSelectedIndex(0);
    }
    else {
            int k=0;  
            if(add)
            k = JOptionPane.showConfirmDialog(this,"You are allowed to select the Customer Name only once.           \nAre you sure your selection is correct?","Confirm your selection....",JOptionPane.YES_NO_OPTION);
            if(k==0){
    Object doNo[] = new Object[r];
    doNo = doH.query1Col(r,2,false,cond);
    
    try{
    for(int i=0;i< r;i++)
        cbDO_No.addItem(doNo[i]);
    }//end try
    catch(Exception e){
        System.out.println("ERROR IN COMBO cbAddStore ACTION-PERFORMED :\t"+e);
    }
    
        cbCustN.setEnabled(false);
            }//end if(k==0)
                        else//if k==1
                cbCustN.setSelectedIndex(0);
    }//end else
                
            }   
            }
    }
    
//end 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField txtDO_Date;
    private javax.swing.JButton btSave;
    private javax.swing.JTable tblDetails;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JComboBox cbFrMM;
    private javax.swing.JComboBox cbToDD;
    private javax.swing.JLabel jLabel3611;
    private javax.swing.JTextField txtDO_Tax;
    private javax.swing.JTable tblHeader;
    private javax.swing.JTextField txtDO_SlNo;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JButton btExit;
    private javax.swing.JComboBox cbDO_MM;
    private javax.swing.JComboBox cbDO_DD;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JButton btD_Remove;
    private javax.swing.JComboBox cbToMM;
    private javax.swing.JComboBox cbCustN;
    private javax.swing.JLabel jLabel361;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtDscAmt;
    private javax.swing.JComboBox cbToYY;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton btModify;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JTextField txtDO_Total_Amt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtNetTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox cbDO_No;
    private javax.swing.JButton btCancelPO;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox cbFrYY;
    private javax.swing.JTextField txtTaxAmt;
    private javax.swing.JTextField txtCur;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JButton btD_Add;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtDO_Dis;
    private javax.swing.JPanel pnlAddHeader;
    private javax.swing.JComboBox cbAddStore;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btSearch;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JComboBox cbAuthBy;
    private javax.swing.JComboBox cbStoreList;
    private javax.swing.JComboBox cbDO_YY;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JButton btD_Cancel;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtCode;
    private javax.swing.JComboBox cbFrDD;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JButton btD_Finish;
    // End of variables declaration//GEN-END:variables

    //variable declaration

boolean clickH=false,add=false,pnlHeaderShown=false,removeDetails=false, deleteArrayOverflow=false;    
boolean  clickD=false,editPressed=false,rangeMatching=true,loadingCombo=false;    

Connection con;

double mscSl=0,lsPr=0,pcPr=0,blPr=0,disD=0,taxD=0,netTotal=0,grossTotal=0,disSl=0,taxSl=0;
double disAmtD=0,taxAmtD=0,disAmtSL=0,taxAmtSL=0;

int rowD_Shown=0,cols=0,deleteNo=0,rowH_Raw=0,rowH_Date=0,rowH_Shown=0;
int selrowD=0,selrowH=0;

final int COL_D_SHOWN=7;

long lsQt=0,pcQt=0,blQt=0;

java.util.Date curDate= new java.util.Date();   
java.util.Date preFromDate= new java.util.Date(50,0,1);   
java.util.Date preToDate= new java.util.Date(200,11,31);       
    
LinkDB semaPhores = new LinkDB("SemaPhores"), storeM = new LinkDB("StoreMaster");
LinkDB curM = new LinkDB("CurrencyMaster"),invH = new LinkDB("Invoice_H"),invD = new LinkDB("Invoice_D");
LinkDB custM = new LinkDB("CustMaster"),authBy = new LinkDB("EmployeeMaster");
LinkDB coH = new LinkDB("CO_H"),doH = new LinkDB("DO_H");

Object[][] dataD_Total,dataD_Shown,dataH_Raw,dataH_Date,dataH_Shown;

Statement stat;

String storeTblSpecific="",preStore="[All Items]";

String[] deleteDetails=new String[50],storeDeleted=new String[50],doTbl=new String[50];

final String[] COLUMN_H_SHOWN = {"D.O. No."," Date"," Customer"," Total Amt."," Cancelled"};
    
}

