/*
 * PurchaseOrder003.java
 *
 * Created on November 20, 2003, 4:16 PM
 */

/** 
 *
 * @author  Palash
 */
package view.transaction;

import java.sql.*;
import java.awt.*;
import java.util.*;
import javax.swing.JOptionPane;

import usefulClasses.databaseOperations.LinkDB;
import usefulClasses.generalUtilities.*;

public class PurchaseOrderPanel extends javax.swing.JPanel {
    
    private ReadPropertyFile Props = new ReadPropertyFile("view/transaction/TransactionViewProps/PurchaseOrderView");

    /** Creates new form PurchaseOrder003 */
    public PurchaseOrderPanel() {

    try{
            accessDB();
            String ss = "SELECT * FROM SemaPhores WHERE TableName = '"+tableName+"'";
            
            ResultSet res = stat.executeQuery(ss);
            
            if(!res.next()){
                String ss1="Insert into SemaPhores (TableName,CtrName,MaxCtr) values('"+tableName+"','',1)";
               stat.executeUpdate(ss1);               
            }//end if
            con.close();
        }//end try
        catch(Exception e){
        }//end catch*/

checkForEmptyDataBase("StoreMaster");
checkForEmptyDataBase("SupplierMaster");
checkForEmptyDataBase("EmployeeMaster");
checkForEmptyDataBase("CurrencyMaster");
//checkForEmptyDataBase("POMaster ");
checkForEmptyDataBase("DiscountMaster");
checkForEmptyDataBase("TaxMaster");
checkForEmptyDataBase("Item_M");
checkForEmptyDataBase("Item_G");
checkForEmptyDataBase("UnitMaster");
        
        
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        pnlHome = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnlSearch = new javax.swing.JPanel();
        cbSearch = new javax.swing.JComboBox();
        cbSearch.addItem("P.O.M.No.");
        cbSearch.addItem("Date");
        cbSearch.addItem("Supplier");
        txtSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        listSearch = new javax.swing.JList();
        btSearchCancel = new javax.swing.JButton();
        btAdd = new javax.swing.JButton();
        btModify = new javax.swing.JButton();
        btSearch = new javax.swing.JButton();
        btCancelPO = new javax.swing.JButton();
        btExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cbFrDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            cbFrDD.addItem("0"+i);

            else
            cbFrDD.addItem(""+i);
        }//end DDMM for loop

        cbFrMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            cbFrMM.addItem("0"+i);

            else
            cbFrMM.addItem(""+i);

        }//end DDMM for loop

        cbFrYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        cbFrYY.addItem(""+i);

        jLabel41 = new javax.swing.JLabel();
        cbToDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            cbToDD.addItem("0"+i);

            else
            cbToDD.addItem(""+i);

        }//end DDMM for loop

        cbToMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            cbToMM.addItem("0"+i);

            else
            cbToMM.addItem(""+i);

        }//end DDMM for loop

        cbToYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        cbToYY.addItem(""+i);

        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbStoreList = new javax.swing.JComboBox();
        cbStoreList.addItem("[All Items]");
        try{
            accessDB();
            String ss = "SELECT StoreName FROM StoreMaster ORDER BY StoreName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbStoreList.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch
        cbStoreList.setSelectedIndex(0 );

        cbSupplierList = new javax.swing.JComboBox();
        cbSupplierList.addItem("[All Items]");
        try{
            accessDB();
            String ss = "SELECT SupName FROM SupplierMaster ORDER BY SupName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbSupplierList.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch
        cbSupplierList.setSelectedIndex(0 );
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbPurHeader = new javax.swing.JTable();
        pnlAddHeader = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCstRef = new javax.swing.JTextField();
        txtMscSl = new javax.swing.JTextField();
        txtMscSl.setText("0");
        txtMscSl.selectAll();
        txtNetTotal = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        cbAddDlyStore = new javax.swing.JComboBox();
        cbAddDlyStore.addItem("[Select One]" );
        try{
            accessDB();
            String ss = "SELECT StoreName FROM StoreMaster WHERE Active = 'Y' ORDER BY StoreName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbAddDlyStore.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        cbAddSup = new javax.swing.JComboBox();
        cbAddSup.addItem("[Select One]" );
        try{
            accessDB();
            String ss = "SELECT SupName FROM SupplierMaster ORDER BY SupName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbAddSup.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        btSave = new javax.swing.JButton();
        btD_Cancel = new javax.swing.JButton();
        cbAddStore = new javax.swing.JComboBox();
        cbAddStore.addItem("[Select One]" );
        try{
            accessDB();
            String ss = "SELECT StoreName FROM StoreMaster WHERE Active = 'Y'  ORDER BY StoreName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbAddStore.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
        }//end catch

        cbPoGrp = new javax.swing.JComboBox();
        cbPoGrp.addItem("[Select One]" );
        try{
            accessDB();
            String ss = "SELECT PoGroup FROM POMaster ORDER BY PoGroup";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbPoGrp.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        cbAuthBy = new javax.swing.JComboBox();
        cbAuthBy.addItem("[Select One]");
        try{
            accessDB();
            String ss = "SELECT EmpName FROM EmployeeMaster ORDER BY EmpName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbAuthBy.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        cbCur = new javax.swing.JComboBox();
        cbCur.addItem("[Select One]");
        try{
            accessDB();
            String ss = "SELECT CM_Name FROM CurrencyMaster WHERE Active = 'Y' ORDER BY CM_Name";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbCur.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        cbDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            cbDD.addItem("0"+i);

            else
            cbDD.addItem(""+i);

        }//end DDMM for loop

        cbMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            cbMM.addItem("0"+i);

            else
            cbMM.addItem(""+i);

        }//end DDMM for loop

        cbYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        cbYY.addItem(""+i);

        cbDlyDD = new javax.swing.JComboBox();
        for(int i=1;i<=31;i++){//DDMM for loop
            if(i<10)
            cbDlyDD.addItem("0"+i);

            else
            cbDlyDD.addItem(""+i);

        }//end DDMM for loop

        cbDlyMM = new javax.swing.JComboBox();
        for(int i=1;i<=12;i++){//DDMM for loop
            if(i<10)
            cbDlyMM.addItem("0"+i);

            else
            cbDlyMM.addItem(""+i);

        }//end DDMM for loop

        cbDlyYY = new javax.swing.JComboBox();
        for(int i=1950;i<=2100;i++)
        cbDlyYY.addItem(""+i);

        jLabel91 = new javax.swing.JLabel();
        cbTaxSl = new javax.swing.JComboBox();
        cbTaxSl.addItem("0%");
        try{
            accessDB();
            String ss = "SELECT TaxDesc,Percentage FROM TaxMaster WHERE Active='Y' ORDER BY TaxDesc";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbTaxSl.addItem(res.getString(1)+" - "+res.getString(2)+"%" );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        cbDisSl = new javax.swing.JComboBox();
        cbDisSl.addItem("0%");
        try{
            accessDB();
            String ss = "SELECT DM_Name,DM_Value FROM DiscountMaster WHERE Active='Y' ORDER BY DM_Name";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbDisSl.addItem(res.getString(1)+" - "+res.getString(2)+"%" );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        txtD_LsQt = new javax.swing.JTextField();
        txtD_LsQt.setText("0");
        txtD_LsQt.selectAll();
        txtD_LsPr = new javax.swing.JTextField();
        txtD_LsPr.setText("0");
        txtD_LsPr.selectAll();
        txtD_PcQt = new javax.swing.JTextField();
        txtD_PcQt.setText("0");
        txtD_PcQt.selectAll();
        txtD_PcPr = new javax.swing.JTextField();
        txtD_PcPr.setText("0");
        txtD_PcPr.selectAll();
        txtD_BlQt = new javax.swing.JTextField();
        txtD_BlQt.setText("0");
        txtD_BlQt.selectAll();
        txtD_BlPr = new javax.swing.JTextField();
        txtD_BlPr.setText("0");
        txtD_BlPr.selectAll();
        txtD_NtPr = new javax.swing.JTextField();
        txtD_NtPr.setText("0");
        txtD_NtPr.selectAll();
        cbD_GrId = new javax.swing.JComboBox();
        cbD_ItN = new javax.swing.JComboBox();
        cbD_ItN.addItem("[Select One]");
        try{
            accessDB();
            String ss = "SELECT itemName FROM Item_M ORDER BY itemName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbD_ItN.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        cbD_UomId = new javax.swing.JComboBox();
        cbD_Tax = new javax.swing.JComboBox();
        cbD_Tax.addItem("0%");
        try{
            accessDB();
            String ss = "SELECT TaxDesc,Percentage FROM TaxMaster WHERE Active='Y' ORDER BY TaxDesc";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbD_Tax.addItem(res.getString(1)+" - "+res.getString(2)+"%" );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        cbD_Dis = new javax.swing.JComboBox();
        cbD_Dis.addItem("0%");
        try{
            accessDB();
            String ss = "SELECT DM_Name,DM_Value FROM DiscountMaster WHERE Active='Y' ORDER BY DM_Name";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbD_Dis.addItem(res.getString(1)+" - "+res.getString(2)+"%" );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        txtD_SlNo = new javax.swing.JTextField();
        tbPurDetails = new javax.swing.JTable();
        btD_Add = new javax.swing.JButton();
        btD_Edit = new javax.swing.JButton();
        btD_Remove = new javax.swing.JButton();
        btD_Finish = new javax.swing.JButton();
        btD_SaveEdit = new javax.swing.JButton();
        jLabel110 = new javax.swing.JLabel();
        jLabel221 = new javax.swing.JLabel();
        txtGrossTotal = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtTerms = new javax.swing.JTextArea();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        pnlHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlHome.setForeground(new java.awt.Color(51, 51, 255));
        pnlHome.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlHomeComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jLabel1.setForeground(new java.awt.Color(0, 51, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Purchase  Order");
        pnlHome.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 10, 200, -1));

        pnlSearch.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlSearch.setBorder(new javax.swing.border.TitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14)));
        pnlSearch.setVisible(false);
        pnlSearch.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlSearchComponentShown(evt);
            }
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                pnlSearchComponentHidden(evt);
            }
        });

        cbSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSearchActionPerformed(evt);
            }
        });

        pnlSearch.add(cbSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 30, 170, 20));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        pnlSearch.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 65, 170, 20));

        listSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listSearchKeyReleased(evt);
            }
        });

        listSearch.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSearchValueChanged(evt);
            }
        });

        listSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listSearchMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(listSearch);

        pnlSearch.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 100, 170, 160));

        btSearchCancel.setMnemonic('E');
        btSearchCancel.setText("SEARCH  CANCEL");
        btSearchCancel.setToolTipText(" ");
        btSearchCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchCancelActionPerformed(evt);
            }
        });

        pnlSearch.add(btSearchCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 270, 170, -1));

        pnlHome.add(pnlSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 170, 180, 300));

        btAdd.setIcon(new javax.swing.ImageIcon("C:\\NeoInventory\\images\\new5.gif"));
        btAdd.setMnemonic('A');
        btAdd.setText("Add");
        btAdd.setToolTipText(" ");
        btAdd.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.Add")));

        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        pnlHome.add(btAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 510, 110, 27));

        btModify.setMnemonic('M');
        btModify.setText("Modify");
        btModify.setToolTipText(" ");
        btModify.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.Modify")));

        btModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModifyActionPerformed(evt);
            }
        });

        pnlHome.add(btModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 510, 110, 27));

        btSearch.setMnemonic('S');
        btSearch.setText("Search");
        btSearch.setToolTipText(" ");
        btSearch.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.Search")));

        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });

        pnlHome.add(btSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 510, 110, 27));

        btCancelPO.setMnemonic('C');
        btCancelPO.setText("Cancel P.O.");
        btCancelPO.setToolTipText(" ");
        btCancelPO.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.CancelPO")));

        btCancelPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelPOActionPerformed(evt);
            }
        });

        pnlHome.add(btCancelPO, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 510, 110, 27));

        btExit.setMnemonic('D');
        btExit.setText("Done");
        btExit.setToolTipText(" ");
        btExit.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.Done")));

        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        pnlHome.add(btExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 510, 110, 27));

        jLabel4.setBackground(new java.awt.Color(255, 255, 102));
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("From: ");
        pnlHome.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, -1, 20));

        cbFrDD.setFont(new java.awt.Font("Dialog", 0, 12));
        cbFrDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFrDDActionPerformed(evt);
            }
        });

        pnlHome.add(cbFrDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 50, 20));

        cbFrMM.setFont(new java.awt.Font("Dialog", 0, 12));
        cbFrMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFrMMActionPerformed(evt);
            }
        });

        pnlHome.add(cbFrMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 50, 20));

        cbFrYY.setFont(new java.awt.Font("Dialog", 0, 12));
        cbFrYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFrYYActionPerformed(evt);
            }
        });

        pnlHome.add(cbFrYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, 70, 20));

        jLabel41.setBackground(new java.awt.Color(255, 255, 102));
        jLabel41.setForeground(new java.awt.Color(0, 0, 153));
        jLabel41.setText("To:");
        pnlHome.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, -1, 20));

        cbToDD.setFont(new java.awt.Font("Dialog", 0, 12));
        cbToDD.setSelectedItem("31");
        cbToDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbToDDActionPerformed(evt);
            }
        });

        pnlHome.add(cbToDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 50, 20));

        cbToMM.setFont(new java.awt.Font("Dialog", 0, 12));
        cbToMM.setSelectedItem("12");
        cbToMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbToMMActionPerformed(evt);
            }
        });

        pnlHome.add(cbToMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 50, 20));

        cbToYY.setFont(new java.awt.Font("Dialog", 0, 12));
        cbToYY.setSelectedItem("2100");
        cbToYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbToYYActionPerformed(evt);
            }
        });

        pnlHome.add(cbToYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 110, 70, 20));

        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setText("Store:");
        pnlHome.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, -1, 20));

        jLabel6.setForeground(new java.awt.Color(0, 0, 153));
        jLabel6.setText("Supplier:");
        pnlHome.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, -1, 20));

        cbStoreList.setFont(new java.awt.Font("Dialog", 0, 12));
        cbStoreList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbStoreListActionPerformed(evt);
            }
        });

        pnlHome.add(cbStoreList, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 80, 210, 20));

        cbSupplierList.setFont(new java.awt.Font("Dialog", 0, 12));
        cbSupplierList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSupplierListActionPerformed(evt);
            }
        });

        pnlHome.add(cbSupplierList, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 210, 20));

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel7.setForeground(new java.awt.Color(0, 51, 204));
        jLabel7.setText("      DD      /      MM    /     Y YYY");
        pnlHome.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 65, 170, 20));

        jScrollPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane1ComponentResized(evt);
            }
        });

        tbPurHeader.setToolTipText("");
        tbPurHeader.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        displayData();
        tbPurHeader.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbPurHeaderKeyReleased(evt);
            }
        });

        tbPurHeader.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPurHeaderMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(tbPurHeader);

        pnlHome.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 500, 300));

        add(pnlHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 750));

        pnlAddHeader.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlAddHeader.setVisible(false);
        pnlAddHeader.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlAddHeaderComponentShown(evt);
            }
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                pnlAddHeaderComponentHidden(evt);
            }
        });

        pnlAddHeader.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pnlAddHeaderFocusLost(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Code *");
        pnlAddHeader.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 50, 20));

        txtCode.setBackground(new java.awt.Color(204, 255, 255));
        txtCode.setEditable(false);
        pnlAddHeader.add(txtCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 100, -1));

        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("Date *");
        pnlAddHeader.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 90, 20));

        txtCstRef.setBackground(new java.awt.Color(204, 255, 255));
        txtCstRef.setText("       ");
        pnlAddHeader.add(txtCstRef, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 190, 180, 20));

        txtMscSl.setBackground(new java.awt.Color(204, 255, 255));
        txtMscSl.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMscSl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMscSlFocusLost(evt);
            }
        });

        pnlAddHeader.add(txtMscSl, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 100, 20));

        txtNetTotal.setBackground(new java.awt.Color(204, 204, 255));
        txtNetTotal.setEditable(false);
        txtNetTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pnlAddHeader.add(txtNetTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 490, 220, -1));

        jLabel10.setForeground(new java.awt.Color(0, 0, 153));
        jLabel10.setText("Store *");
        pnlAddHeader.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 70, 90, 20));

        jLabel11.setForeground(new java.awt.Color(0, 0, 153));
        jLabel11.setText("Supplier *");
        pnlAddHeader.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 90, 20));

        jLabel12.setForeground(new java.awt.Color(0, 0, 153));
        jLabel12.setText("Delivery Store *");
        pnlAddHeader.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 100, 90, 20));

        jLabel13.setForeground(new java.awt.Color(0, 0, 153));
        jLabel13.setText("Delivery Date *");
        pnlAddHeader.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 90, 20));

        jLabel14.setForeground(new java.awt.Color(0, 0, 153));
        jLabel14.setText("PO Grp  ");
        pnlAddHeader.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 50, 20));

        jLabel15.setForeground(new java.awt.Color(0, 0, 153));
        jLabel15.setText("Currency *");
        pnlAddHeader.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 90, 20));

        jLabel16.setForeground(new java.awt.Color(0, 0, 153));
        jLabel16.setText("Authorised  By ");
        pnlAddHeader.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 130, 90, 20));

        jLabel17.setForeground(new java.awt.Color(0, 0, 153));
        jLabel17.setText("Cust. Ref. No. ");
        pnlAddHeader.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 190, 90, 20));

        jLabel18.setForeground(new java.awt.Color(0, 0, 153));
        jLabel18.setText("Terms ");
        pnlAddHeader.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 160, 80, 20));

        jLabel19.setForeground(new java.awt.Color(0, 0, 153));
        jLabel19.setText("Misc.  ");
        pnlAddHeader.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 40, 20));

        jLabel20.setForeground(new java.awt.Color(0, 0, 153));
        jLabel20.setText("Discount");
        pnlAddHeader.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 60, 20));

        jLabel21.setForeground(new java.awt.Color(0, 0, 153));
        jLabel21.setText("Tax ");
        pnlAddHeader.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 30, 20));

        jLabel22.setForeground(new java.awt.Color(0, 0, 153));
        jLabel22.setText("Net Total");
        pnlAddHeader.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 490, 70, 20));

        cbAddDlyStore.setBackground(new java.awt.Color(204, 255, 255));
        cbAddDlyStore.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlAddHeader.add(cbAddDlyStore, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 190, 20));

        cbAddSup.setBackground(new java.awt.Color(204, 255, 255));
        cbAddSup.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlAddHeader.add(cbAddSup, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, 180, 20));

        btSave.setMnemonic('S');
        btSave.setText("Save");
        btSave.setToolTipText(" ");
        btSave.setEnabled(false);
        btSave.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.Save")));

        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        pnlAddHeader.add(btSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, 90, 27));

        btD_Cancel.setMnemonic('B');
        btD_Cancel.setText("Back");
        btD_Cancel.setToolTipText(" ");
        btD_Cancel.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.Back")));

        btD_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_CancelActionPerformed(evt);
            }
        });

        pnlAddHeader.add(btD_Cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 460, 90, 27));

        cbAddStore.setBackground(new java.awt.Color(204, 255, 255));
        cbAddStore.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlAddHeader.add(cbAddStore, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 70, 190, 20));

        cbPoGrp.setBackground(new java.awt.Color(204, 255, 255));
        cbPoGrp.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlAddHeader.add(cbPoGrp, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 100, 20));

        cbAuthBy.setBackground(new java.awt.Color(204, 255, 255));
        cbAuthBy.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlAddHeader.add(cbAuthBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 130, 190, 20));

        cbCur.setBackground(new java.awt.Color(204, 255, 255));
        cbCur.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlAddHeader.add(cbCur, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, 180, 20));

        cbDD.setBackground(new java.awt.Color(204, 255, 255));
        cbDD.setFont(new java.awt.Font("Dialog", 0, 12));

        cbDD.setSelectedIndex(curDate.getDate()-1);
        pnlAddHeader.add(cbDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 70, 50, 20));

        cbMM.setBackground(new java.awt.Color(204, 255, 255));
        cbMM.setFont(new java.awt.Font("Dialog", 0, 12));
        cbMM.setSelectedIndex(curDate.getMonth());

        pnlAddHeader.add(cbMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 70, 50, 20));

        cbYY.setBackground(new java.awt.Color(204, 255, 255));
        cbYY.setFont(new java.awt.Font("Dialog", 0, 12));
        cbYY.setSelectedIndex( curDate.getYear()-50 );
        pnlAddHeader.add(cbYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 80, 20));

        cbDlyDD.setBackground(new java.awt.Color(204, 255, 255));
        cbDlyDD.setFont(new java.awt.Font("Dialog", 0, 12));

        cbDlyDD.setSelectedIndex(curDate.getDate()-1);
        pnlAddHeader.add(cbDlyDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 130, 50, 20));

        cbDlyMM.setBackground(new java.awt.Color(204, 255, 255));
        cbDlyMM.setFont(new java.awt.Font("Dialog", 0, 12));
        cbDlyMM.setSelectedIndex(curDate.getMonth());

        pnlAddHeader.add(cbDlyMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 130, 50, 20));

        cbDlyYY.setBackground(new java.awt.Color(204, 255, 255));
        cbDlyYY.setFont(new java.awt.Font("Dialog", 0, 12));
        cbDlyYY.setSelectedIndex( curDate.getYear()-50 );
        pnlAddHeader.add(cbDlyYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, 80, 20));

        jLabel91.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel91.setForeground(new java.awt.Color(51, 51, 255));
        jLabel91.setText("      DD      /      MM    /     Y YYY");
        pnlAddHeader.add(jLabel91, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, 180, 30));

        cbTaxSl.setBackground(new java.awt.Color(204, 255, 255));
        cbTaxSl.setFont(new java.awt.Font("Dialog", 0, 12));
        cbTaxSl.setSelectedIndex(0);
        cbTaxSl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTaxSlActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbTaxSl, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 100, 20));

        cbDisSl.setBackground(new java.awt.Color(204, 255, 255));
        cbDisSl.setFont(new java.awt.Font("Dialog", 0, 12));
        cbDisSl.setSelectedIndex(0);
        cbDisSl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDisSlActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbDisSl, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 100, 20));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder(null, "Purchase Order Details", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 18), new java.awt.Color(0, 0, 204)));
        jScrollPane3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane3.setViewportBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 1, 1), new java.awt.Color(51, 51, 255)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel24.setForeground(new java.awt.Color(0, 0, 153));
        jLabel24.setText("Sl. No.");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 40, -1));

        jLabel25.setForeground(new java.awt.Color(0, 0, 153));
        jLabel25.setText("Item Name");
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, -1, -1));

        jLabel26.setForeground(new java.awt.Color(0, 0, 153));
        jLabel26.setText("Item Group ");
        jPanel1.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, -1, -1));

        jLabel27.setForeground(new java.awt.Color(0, 0, 153));
        jLabel27.setText("UOM Name");
        jPanel1.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, -1));

        jLabel28.setForeground(new java.awt.Color(0, 0, 153));
        jLabel28.setText("Loose Qty.");
        jPanel1.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        jLabel29.setForeground(new java.awt.Color(0, 0, 153));
        jLabel29.setText("Loose Price");
        jPanel1.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, -1, -1));

        jLabel30.setForeground(new java.awt.Color(0, 0, 153));
        jLabel30.setText("Pack Qty.");
        jPanel1.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, -1, -1));

        jLabel32.setForeground(new java.awt.Color(0, 0, 153));
        jLabel32.setText("Pack Price");
        jPanel1.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, 70, -1));

        jLabel33.setForeground(new java.awt.Color(0, 0, 153));
        jLabel33.setText("Bulk Qty.");
        jPanel1.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 10, -1, -1));

        jLabel31.setForeground(new java.awt.Color(0, 0, 153));
        jLabel31.setText("Bulk Price ");
        jPanel1.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 10, -1, -1));

        jLabel35.setForeground(new java.awt.Color(0, 0, 153));
        jLabel35.setText("Discount");
        jPanel1.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 10, -1, -1));

        jLabel34.setForeground(new java.awt.Color(0, 0, 153));
        jLabel34.setText("Tax");
        jPanel1.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 10, -1, -1));

        jLabel36.setForeground(new java.awt.Color(0, 0, 153));
        jLabel36.setText("Net Price");
        jPanel1.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 10, 60, -1));

        txtD_LsQt.setBackground(new java.awt.Color(204, 255, 255));
        txtD_LsQt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_LsQt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_LsQtFocusLost(evt);
            }
        });

        jPanel1.add(txtD_LsQt, new org.netbeans.lib.awtextra.AbsoluteConstraints(382, 30, 93, 20));

        txtD_LsPr.setBackground(new java.awt.Color(204, 255, 255));
        txtD_LsPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_LsPr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_LsPrFocusLost(evt);
            }
        });

        jPanel1.add(txtD_LsPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(475, 30, 93, 20));

        txtD_PcQt.setBackground(new java.awt.Color(204, 255, 255));
        txtD_PcQt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_PcQt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_PcQtFocusLost(evt);
            }
        });

        jPanel1.add(txtD_PcQt, new org.netbeans.lib.awtextra.AbsoluteConstraints(568, 30, 93, 20));

        txtD_PcPr.setBackground(new java.awt.Color(204, 255, 255));
        txtD_PcPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_PcPr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_PcPrFocusLost(evt);
            }
        });

        jPanel1.add(txtD_PcPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(661, 30, 93, 20));

        txtD_BlQt.setBackground(new java.awt.Color(204, 255, 255));
        txtD_BlQt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_BlQt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtD_BlQtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_BlQtFocusLost(evt);
            }
        });

        jPanel1.add(txtD_BlQt, new org.netbeans.lib.awtextra.AbsoluteConstraints(754, 30, 93, 20));

        txtD_BlPr.setBackground(new java.awt.Color(204, 255, 255));
        txtD_BlPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_BlPr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_BlPrFocusLost(evt);
            }
        });

        jPanel1.add(txtD_BlPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(847, 30, 93, 20));

        txtD_NtPr.setBackground(new java.awt.Color(204, 255, 153));
        txtD_NtPr.setEditable(false);
        txtD_NtPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtD_NtPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(1126, 30, 89, 20));

        cbD_GrId.setBackground(new java.awt.Color(204, 255, 255));
        cbD_GrId.setFont(new java.awt.Font("Dialog", 1, 10));
        cbD_GrId.addItem("[Select One]");
        try{
            accessDB();
            String ss = "SELECT itemGroupName FROM Item_G ORDER BY itemGroupName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbD_GrId.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jPanel1.add(cbD_GrId, new org.netbeans.lib.awtextra.AbsoluteConstraints(196, 30, 93, 20));

        cbD_ItN.setBackground(new java.awt.Color(204, 255, 255));
        cbD_ItN.setFont(new java.awt.Font("Dialog", 1, 10));
        cbD_ItN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbD_ItNActionPerformed(evt);
            }
        });

        cbD_ItN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cbD_ItNFocusGained(evt);
            }
        });

        cbD_ItN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbD_ItNMouseClicked(evt);
            }
        });

        jPanel1.add(cbD_ItN, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 30, 92, 20));

        cbD_UomId.setBackground(new java.awt.Color(204, 255, 255));
        cbD_UomId.setFont(new java.awt.Font("Dialog", 1, 10));
        cbD_UomId.addItem("[Select One]");
        try{
            accessDB();
            String ss = "SELECT UnitName FROM UnitMaster ORDER BY UnitName";
            ResultSet res = stat.executeQuery(ss);
            while( res.next() )
            cbD_UomId.addItem(res.getString(1) );
            con.close();
        }//end try
        catch(Exception e){
            System.out.println("Exception in comboInit Method.Details\n   "+e);
        }//end catch

        jPanel1.add(cbD_UomId, new org.netbeans.lib.awtextra.AbsoluteConstraints(289, 30, 93, 20));

        cbD_Tax.setBackground(new java.awt.Color(204, 255, 255));
        cbD_Tax.setFont(new java.awt.Font("Dialog", 1, 10));
        cbD_Tax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbD_TaxActionPerformed(evt);
            }
        });

        jPanel1.add(cbD_Tax, new org.netbeans.lib.awtextra.AbsoluteConstraints(1033, 30, 93, 20));

        cbD_Dis.setBackground(new java.awt.Color(204, 255, 255));
        cbD_Dis.setFont(new java.awt.Font("Dialog", 1, 10));
        cbD_Dis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbD_DisActionPerformed(evt);
            }
        });

        jPanel1.add(cbD_Dis, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 30, 93, 20));

        txtD_SlNo.setBackground(new java.awt.Color(204, 255, 255));
        txtD_SlNo.setEditable(false);
        txtD_SlNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(txtD_SlNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 93, 20));

        tbPurDetails.setSelectionBackground(new java.awt.Color(204, 255, 255));
        displayDetailsTbl();
        tbPurDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPurDetailsMouseClicked(evt);
            }
        });

        jPanel1.add(tbPurDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 1205, -1));

        jScrollPane3.setViewportView(jPanel1);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 759, 160));

        btD_Add.setMnemonic('A');
        btD_Add.setText("Add Item");
        btD_Add.setToolTipText(" ");
        btD_Add.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.AddItem")));

        btD_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_AddActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 140, 27));

        btD_Edit.setMnemonic('E');
        btD_Edit.setText("Edit Item");
        btD_Edit.setToolTipText(" ");
        btD_Edit.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.EditItem")));
        btD_Edit.setVisible(false);
        btD_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_EditActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 190, 140, 27));

        btD_Remove.setMnemonic('R');
        btD_Remove.setText("RemoveItem");
        btD_Remove.setToolTipText(" ");
        btD_Remove.setEnabled(false);
        btD_Remove.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.RemoveItem")));

        btD_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_RemoveActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Remove, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 190, 140, 27));

        btD_Finish.setMnemonic('F');
        btD_Finish.setText("Finish");
        btD_Finish.setToolTipText(" ");
        btD_Finish.setEnabled(false);
        btD_Finish.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.Finish")));

        btD_Finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_FinishActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Finish, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 190, 140, 27));

        btD_SaveEdit.setMnemonic('V');
        btD_SaveEdit.setText("Save Edit");
        btD_SaveEdit.setToolTipText(" ");
        btD_SaveEdit.setIcon(new javax.swing.ImageIcon(Props.getVal("Icon.SaveEdit")));
        btD_SaveEdit.setVisible(false);
        btD_SaveEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_SaveEditActionPerformed(evt);
            }
        });

        jPanel2.add(btD_SaveEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 190, 140, 27));

        pnlAddHeader.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 780, 230));

        jLabel110.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jLabel110.setForeground(new java.awt.Color(0, 51, 204));
        jLabel110.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel110.setText("Purchase  Order");
        pnlAddHeader.add(jLabel110, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 10, 200, -1));

        jLabel221.setForeground(new java.awt.Color(0, 0, 153));
        jLabel221.setText("Gross Total");
        pnlAddHeader.add(jLabel221, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 460, 70, 20));

        txtGrossTotal.setBackground(new java.awt.Color(204, 204, 255));
        txtGrossTotal.setEditable(false);
        txtGrossTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pnlAddHeader.add(txtGrossTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 460, 220, -1));

        txtTerms.setBackground(new java.awt.Color(204, 255, 255));
        jScrollPane4.setViewportView(txtTerms);

        pnlAddHeader.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 160, 190, 50));

        add(pnlAddHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 750));

    }//GEN-END:initComponents

    private void tbPurHeaderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPurHeaderKeyReleased
if(evt.getKeyCode()==evt.VK_TAB||evt.getKeyCode()==evt.VK_DOWN||evt.getKeyCode()==evt.VK_UP){
    clickH=true;
    selrowH=tbPurHeader.getSelectedRow();
}
    }//GEN-LAST:event_tbPurHeaderKeyReleased

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
if(evt.getKeyCode()==evt.VK_ALT)
    btSearchCancel.requestFocus();
    }//GEN-LAST:event_formKeyPressed

    private void txtD_BlPrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_BlPrFocusLost
if(txtD_BlPr.getText().trim().equals("")){
txtD_BlPr.setText("0");
txtD_BlPr.selectAll();
txtD_BlPr.requestFocus();
                JOptionPane.showMessageDialog(this,"The Bulk Price Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    

        }//end else if */
else
        try{
            blPr=Float.parseFloat(txtD_BlPr.getText());
            if(blPr<0){
                txtD_BlPr.setText("0");
                txtD_BlPr.requestFocus();
                txtD_BlPr.selectAll();
                JOptionPane.showMessageDialog(this,"The Bulk Price cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
            }//end if
            else           
            fillAmts();
   
                  }//end try
        catch(NumberFormatException e){
            txtD_BlPr.setText("0");
txtD_BlPr.selectAll();
txtD_BlPr.requestFocus();
            JOptionPane.showMessageDialog(this,"Invalid number in the  Bulk Price field!","Error!",JOptionPane.ERROR_MESSAGE);    
       }//end catch
    
    }//GEN-LAST:event_txtD_BlPrFocusLost

    private void txtD_BlQtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_BlQtFocusLost
if(txtD_BlQt.getText().trim().equals("")){
                    txtD_BlQt.setText("0");
                txtD_BlQt.requestFocus();
    txtD_BlQt.selectAll();
                JOptionPane.showMessageDialog(this,"The Bulk Qty. Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    
        }//end else if

else 
        try{
            blQt=Integer.parseInt(txtD_BlQt.getText());
            if(blQt<0){
                txtD_BlQt.setText("0");
                txtD_BlQt.requestFocus();
                txtD_BlQt.selectAll();
                JOptionPane.showMessageDialog(this,"The Bulk Qty. cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
            }//end if
            else           
            fillAmts();
  
        }//end try
        catch(NumberFormatException e){
                                txtD_BlQt.setText("0");
                txtD_BlQt.requestFocus();
    txtD_BlQt.selectAll();
JOptionPane.showMessageDialog(this,"Enter a valid number(Integer) in the  Bulk Qty. field!","Error!",JOptionPane.ERROR_MESSAGE);    

        }//end catch
    
    }//GEN-LAST:event_txtD_BlQtFocusLost

    private void txtD_PcQtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_PcQtFocusLost
if(txtD_PcQt.getText().trim().equals("")){
                txtD_PcQt.setText("0");
                txtD_PcQt.requestFocus();    
    txtD_PcQt.selectAll();
                JOptionPane.showMessageDialog(this,"The Pack Qty. Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    

        }//end else if
else
        try{
            pcQt=Integer.parseInt(txtD_PcQt.getText());       
            if(pcQt<0){
                txtD_PcQt.setText("0");
                txtD_PcQt.requestFocus();
                txtD_PcQt.selectAll();
                JOptionPane.showMessageDialog(this,"The Pack Qty. cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
            }//end if
            else           
            fillAmts();

        }//end try
        catch(NumberFormatException e){
                            txtD_PcQt.setText("0");
                txtD_PcQt.requestFocus();    
    txtD_PcQt.selectAll();
JOptionPane.showMessageDialog(this,"Enter a valid number(Integer) in the Pack Qty.  field!","Error!",JOptionPane.ERROR_MESSAGE);    

        }//end catch
    
    }//GEN-LAST:event_txtD_PcQtFocusLost

    private void txtD_LsPrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_LsPrFocusLost
if(txtD_LsPr.getText().trim().equals("")){
                    txtD_LsPr.setText("0");
                txtD_LsPr.requestFocus();
    txtD_LsPr.selectAll();
                JOptionPane.showMessageDialog(this,"The Loose Price Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    

        }//end else if
else
        try{
            lsPr=Float.parseFloat(txtD_LsPr.getText());
            if(lsPr<0){
                txtD_LsPr.setText("0");
                txtD_LsPr.requestFocus();
                txtD_LsPr.selectAll();
                JOptionPane.showMessageDialog(this,"The Loose Price cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
            }//end if
            else           
            fillAmts();
        }//end try
        catch(NumberFormatException e){
            txtD_LsPr.setText("0");
txtD_LsPr.requestFocus();
txtD_LsPr.selectAll();
JOptionPane.showMessageDialog(this,"Invalid number in the  Loose Price field!","Error!",JOptionPane.ERROR_MESSAGE);    

        }//end catch
    
    }//GEN-LAST:event_txtD_LsPrFocusLost

    private void txtD_LsQtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_LsQtFocusLost
         if(txtD_LsQt.getText().trim().equals("")){
                txtD_LsQt.setText("0");
                txtD_LsQt.selectAll();
                txtD_LsQt.requestFocus();             
                JOptionPane.showMessageDialog(this,"The Loose Qty. cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    

        }//end else if
         
         else
       try{
            lsQt=Integer.parseInt(txtD_LsQt.getText());   
            if(lsQt<0){
                txtD_LsQt.setText("0");
                txtD_LsQt.requestFocus();
                txtD_LsQt.selectAll();
                JOptionPane.showMessageDialog(this,"The Loose Qty. Field cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
            }//end if
            else           
            fillAmts();
        }//end try
        catch(NumberFormatException e){
            txtD_LsQt.setText("0");
            txtD_LsQt.selectAll();
            txtD_LsQt.requestFocus();
JOptionPane.showMessageDialog(this,"Enter a valid number(Integer) in the  Loose Qty. field!","Error!",JOptionPane.ERROR_MESSAGE);    
        }//end catch
             

    }//GEN-LAST:event_txtD_LsQtFocusLost

    private void cbD_TaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbD_TaxActionPerformed
        try{
    
        if(cbD_Tax.getSelectedIndex()!=0){
            StringTokenizer st = new StringTokenizer(cbD_Tax.getSelectedItem().toString() , "-");
            while( st.hasMoreTokens() ){
                String ss = st.nextToken();
                StringBuffer sb = new StringBuffer(st.nextToken());
                sb.setLength(sb.length()-1);
                taxD = Float.parseFloat(sb.toString())/100;
            }//end while
            }//end if
            else
                taxD=0;
        }//end try
        catch(NumberFormatException e){
System.out.println(e+"\n1199");
        }//end catch*/
        
        fillAmts();

    }//GEN-LAST:event_cbD_TaxActionPerformed

    private void cbD_DisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbD_DisActionPerformed
        try{
  
            if(cbD_Dis.getSelectedIndex()!=0){
            StringTokenizer st = new StringTokenizer(""+cbD_Dis.getSelectedItem() , "-");
            while( st.hasMoreTokens() ){
                String ss = st.nextToken();
                StringBuffer sb = new StringBuffer(st.nextToken());
                sb.setLength(sb.length()-1);
                disD = Float.parseFloat(sb.toString())/100;
                }//end while
            }//end if
            else
                disD=0;
        }//end try
        catch(NumberFormatException e){
System.out.println(e+"\n1219");
        }//end catch*/
fillAmts();
    }//GEN-LAST:event_cbD_DisActionPerformed

    private void txtMscSlFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMscSlFocusLost
        if(txtMscSl.getText().trim().equals("")){
                         txtMscSl.setText("0");
txtMscSl.requestFocus();
txtMscSl.selectAll();
                JOptionPane.showMessageDialog(this,"The Msc Sl Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    
        }//end if
        
        else
        try{
            mscSl=Float.parseFloat(txtMscSl.getText());
            if(mscSl<0){
                txtMscSl.setText("0");
                txtMscSl.requestFocus();
                txtMscSl.selectAll();
                JOptionPane.showMessageDialog(this,"The Msc Sl Field cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
            }//end if
            else
                fillAmts();    

        }//end try
        catch(NumberFormatException e){
             txtMscSl.setText("0");
txtMscSl.requestFocus();
txtMscSl.selectAll();
JOptionPane.showMessageDialog(this,"Invalid number in the  Miscellaneous SL field!","Error!",JOptionPane.ERROR_MESSAGE);    
        }//end catch            
    }//GEN-LAST:event_txtMscSlFocusLost

    private void cbDisSlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDisSlActionPerformed
        try{
  
            if(cbDisSl.getSelectedIndex()!=0){
            String s = ""+cbDisSl.getSelectedItem();
            System.out.println("1383\t"+s);
            StringTokenizer st = new StringTokenizer(s , "-");
            while( st.hasMoreTokens() ){
                String ss = st.nextToken();
                StringBuffer sb = new StringBuffer(st.nextToken());
                sb.setLength(sb.length()-1);
                disSl = Float.parseFloat(sb.toString())/100;
                }//end while
            }//end if
            else
                disSl=0;
                fillAmts();    

        }//end try
        catch(NumberFormatException e){
System.out.println(e+"\n1175");
        }//end catch*/
             

    }//GEN-LAST:event_cbDisSlActionPerformed

    private void cbTaxSlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTaxSlActionPerformed
try{
            if(cbTaxSl.getSelectedIndex()!=0){
            String s = ""+cbTaxSl.getSelectedItem();
            StringTokenizer st = new StringTokenizer(s , "-");
            while( st.hasMoreTokens() ){
                String ss = st.nextToken();
                StringBuffer sb = new StringBuffer(st.nextToken());
                sb.setLength(sb.length()-1);
                taxSl = Float.parseFloat(sb.toString())/100;
            }//end while
            }//end if
            else
                taxSl=0;
                fillAmts();    
        }//end try
        catch(NumberFormatException e){
System.out.println(e+"\n1175");
        }//end catch*/


    }//GEN-LAST:event_cbTaxSlActionPerformed

    private void listSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listSearchMouseClicked
 if(!listSelectionChanged){
        listClicked2+=evt.getClickCount();     
 }//end if
 else if(listSelectionChanged){
    listClicked2=0;
    listSelectionChanged=false;
 }//end else  
        if( listClicked2==2){
    selrowH=tbPurHeader.getSelectedRow();
   clickH=true;
   searchCancelPressed();
         modifyPressed();
              listClicked2=0;
             tbPurHeader.clearSelection();    
                   }//*/
        else{
   tbPurHeader.clearSelection();    
int index=searchElement(  (String)( listSearch.getSelectedValue() )  ,unsorted   );
      tbPurHeader.changeSelection( index ,0,true,false);
        }

    }//GEN-LAST:event_listSearchMouseClicked

    private void listSearchValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSearchValueChanged
                txtSearch.setText(""+listSearch.getSelectedValue());
                txtSearch.selectAll();
                listSelectionChanged=true;

    }//GEN-LAST:event_listSearchValueChanged

    private void jScrollPane1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane1ComponentResized
 h=tbPurHeader.getRowHeight()*(rowShown+1); 
 if(h<300)
jScrollPane1.setSize(500,h+5);  
 else
     jScrollPane1.setSize(500,300);  
    }//GEN-LAST:event_jScrollPane1ComponentResized

    private void txtD_BlQtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_BlQtFocusGained
        System.out.println("1096");
        Rectangle b = new Rectangle(754,0,444,160);
        
            jScrollPane3.scrollRectToVisible(b);
            System.out.println("1099");
    }//GEN-LAST:event_txtD_BlQtFocusGained

    private void txtD_PcPrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_PcPrFocusLost
if(txtD_PcPr.getText().trim().equals("")){
    txtD_PcPr.setText("0");
txtD_PcPr.requestFocus();
    txtD_PcPr.selectAll();
                JOptionPane.showMessageDialog(this,"The Pack Price Field cannot be empty!","Error!",JOptionPane.ERROR_MESSAGE);    
                      }//end else if
else
        try{
            pcPr=Float.parseFloat(txtD_PcPr.getText());
            if(pcPr<0){
                txtD_PcPr.setText("0");
                txtD_PcPr.requestFocus();
                txtD_PcPr.selectAll();
                JOptionPane.showMessageDialog(this,"The Pack Price cannot be negative!","Error!",JOptionPane.ERROR_MESSAGE);                    
            }//end if
            else           
            fillAmts();

        }//end try
        catch(NumberFormatException e){
                txtD_PcPr.setText("0");
txtD_PcPr.requestFocus();
    txtD_PcPr.selectAll();
JOptionPane.showMessageDialog(this,"Invalid number in the Pack Price  field!","Error!",JOptionPane.ERROR_MESSAGE);    

        }//end catch
    
    }//GEN-LAST:event_txtD_PcPrFocusLost

    private void pnlSearchComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlSearchComponentHidden
btAdd.setEnabled(true);
btModify.setEnabled(true);
btSearch.setEnabled(true);
btCancelPO.setEnabled(true);
btExit.setEnabled(true);
    displayData();
    }//GEN-LAST:event_pnlSearchComponentHidden

    private void btSearchCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchCancelActionPerformed
searchCancelPressed();
    }//GEN-LAST:event_btSearchCancelActionPerformed

    private void listSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listSearchKeyReleased
int keyCode=evt.getKeyCode();

if(keyCode==evt.VK_ENTER){
    
}//end if

 if(keyCode==evt.VK_DOWN||keyCode==evt.VK_UP){
     tbPurHeader.clearSelection();
int index=searchElement(  (String)( listSearch.getSelectedValue() )  ,unsorted   );
      tbPurHeader.changeSelection( index ,0,true,false);
}//end  if

    }//GEN-LAST:event_listSearchKeyReleased

    private void listSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listSearchKeyPressed

int keyCode=evt.getKeyCode();

if(keyCode==evt.VK_ENTER){
    selrowH=tbPurHeader.getSelectedRow();
   clickH=true;
   searchCancelPressed();
         modifyPressed();
    }//end if        

    }//GEN-LAST:event_listSearchKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        int keyCode=evt.getKeyCode();
        
        if(keyCode==evt.VK_DOWN||keyCode==evt.VK_UP){
     tbPurHeader.clearSelection();
int index=searchElement(  (String)( listSearch.getSelectedValue() )  ,unsorted   );
      tbPurHeader.changeSelection( index ,0,true,false);

       listSearch.requestFocus();
}//end if
if(keyCode==evt.VK_RIGHT||keyCode==evt.VK_HOME||keyCode==evt.VK_END||keyCode==evt.VK_LEFT )
    ;//blank stat
else
      if(key.length()>0){
                txtSearch.setText(""+listSearch.getSelectedValue());
              System.out.println("key = \t"+key);
      txtSearch.setSelectionStart( key.length() );
      }//end if
        
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        char keyChar=evt.getKeyChar();
        int keyCode=evt.getKeyCode();
if(key.equals("")&&keyCode==evt.VK_BACK_SPACE)
    ;//blank statement
        else if(keyCode==evt.VK_BACK_SPACE){
sb= new StringBuffer(key);
sb.setLength(sb.length()-1);
key=sb.toString();
}//end if 
else if(keyCode==evt.VK_ENTER){
    selrowH=tbPurHeader.getSelectedRow();
   clickH=true;
   searchCancelPressed();
         modifyPressed();


}//end else if 1
        else if(keyCode==evt.VK_DOWN||keyCode==evt.VK_UP||keyCode==evt.VK_BACK_SPACE ||keyCode==evt.VK_DELETE   ||keyCode==evt.VK_SPACE ||keyCode==evt.VK_CAPS_LOCK ||keyCode==evt.VK_SHIFT||keyCode==evt.VK_TAB || keyCode==evt.VK_PAGE_DOWN || keyCode==evt.VK_PAGE_UP){ 
    ;
}//end else if 3
        else if(keyCode==evt.VK_ALT || keyCode==evt.VK_CONTROL){ 
     tbPurHeader.clearSelection();
int index=searchElement(  (String)( listSearch.getSelectedValue() )  ,unsorted   );
      tbPurHeader.changeSelection( index ,0,true,false);

}//end else if 3        
        else if(keyCode==evt.VK_RIGHT||keyCode==evt.VK_HOME||keyCode==evt.VK_END||keyCode==evt.VK_LEFT ){ 
    //txtSearch.setSelectionStart(txtSearch.getText().length());
            ;
}//end else if 3        
else if(keyCode>=32&&keyCode<=93||keyCode>=95&&keyCode<=126){
 tbPurHeader.clearSelection();    
key+=String.valueOf(keyChar); 
key=key.trim();
search();
}//end else if 2
else
  JOptionPane.showMessageDialog(this," Enter valid chararters ","ERROR!",JOptionPane.ERROR_MESSAGE);    
    }//GEN-LAST:event_txtSearchKeyPressed

    private void cbSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSearchActionPerformed
        key=""; 
            txtSearch.setText("");

      search();       

    }//GEN-LAST:event_cbSearchActionPerformed

    private void pnlSearchComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlSearchComponentShown
jScrollPane1.setLocation(30,170);
     tbPurHeader.clearSelection();
int index=searchElement(  (String)( listSearch.getSelectedValue() )  ,unsorted   );
      tbPurHeader.changeSelection( index ,0,true,false);

    }//GEN-LAST:event_pnlSearchComponentShown

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        searchPressed();
    }//GEN-LAST:event_btSearchActionPerformed

    private void btCancelPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelPOActionPerformed
cancelPO();
displayData();
    }//GEN-LAST:event_btCancelPOActionPerformed

    private void cbD_ItNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbD_ItNActionPerformed

        if(rowTblDetails >= 1 && (!editPressed )){
            System.out.println("970");
            for(i=0;i<rowTblDetails;i++){
                System.out.println("972");
                if(dataDetailsShown[i][1].equals(cbD_ItN.getSelectedItem())){
                    cbD_ItN.setSelectedIndex(0);
JOptionPane.showMessageDialog(this,"Selected Item already exists in the list","Error!",JOptionPane.ERROR_MESSAGE);                        
                    break;
                }//end if
            }//end for
            System.out.println("end for 979");
        }//end  if
System.out.println("980");
  
    }//GEN-LAST:event_cbD_ItNActionPerformed

    private void cbD_ItNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbD_ItNMouseClicked
    }//GEN-LAST:event_cbD_ItNMouseClicked

    private void pnlAddHeaderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pnlAddHeaderFocusLost
    }//GEN-LAST:event_pnlAddHeaderFocusLost

    private void cbD_ItNFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbD_ItNFocusGained
    }//GEN-LAST:event_cbD_ItNFocusGained

    private void btD_SaveEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_SaveEditActionPerformed
        modDetails();

    }//GEN-LAST:event_btD_SaveEditActionPerformed

    private void btD_FinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_FinishActionPerformed
btSave.setEnabled(true);
btD_Add.setEnabled(false);
btD_Edit.setEnabled(false);
btD_Remove.setEnabled(false);
btD_Finish.setEnabled(false);

    }//GEN-LAST:event_btD_FinishActionPerformed

    private void btD_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_EditActionPerformed
        editPressed=true;
        detailsModify();
        clickD=false;
        editPressed = false;
    }//GEN-LAST:event_btD_EditActionPerformed

    private void tbPurHeaderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPurHeaderMouseClicked
clickH=true;
selrowH=tbPurHeader.getSelectedRow();                

    }//GEN-LAST:event_tbPurHeaderMouseClicked

    private void btModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btModifyActionPerformed
      modifyPressed();
      tbPurHeader.clearSelection();
        clickH=false;
        
    }//GEN-LAST:event_btModifyActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
      displayData();

    }//GEN-LAST:event_formComponentShown

    private void pnlHomeComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlHomeComponentShown
displayData();       
    }//GEN-LAST:event_pnlHomeComponentShown

    private void tbPurDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPurDetailsMouseClicked
clickD=true;
if(tbPurDetails.isEnabled())
selrowD=tbPurDetails.getSelectedRow();      

    }//GEN-LAST:event_tbPurDetailsMouseClicked

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
try{
    addSave();
}
catch(Exception e){
    System.out.println("1865\t"+e);
}
    }//GEN-LAST:event_btSaveActionPerformed

    private void pnlAddHeaderComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlAddHeaderComponentHidden
pnlHeaderShown = false;
removeDetails=false;              
deleteArrayOverflow=false;
deleteNo=0;
        for(i=0;i<rowTblDetails;i++)
            for(j=0;j<colHeadsD.length-1;j++)
               dataAdd[i][j]="";
                resetDetails(); 
                rowTblDetails=0;
                 displayDetailsTbl();    

    }//GEN-LAST:event_pnlAddHeaderComponentHidden

    private void btD_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_RemoveActionPerformed
        if(clickD){//item selected from Details Table---------- main if
            
removeDetails=true;            //generate SQL statements to delete items
if(!add && rowTblDetails>0){   
    try{
//deleteDetails[deleteNo] = "DELETE FROM PurchaseOrderDetails WHERE POM_No = '"+txtCode.getText()+"' AND Item_ID = (SELECT itemNo FROM Item_M WHERE itemName = '"+dataAdd[selrowD][1] + "')";
        deleteDetails[deleteNo] = "DELETE FROM PurchaseOrderDetails WHERE POM_No = '"+txtCode.getText()+"' AND Item_ID = '"+Item_M.queryOneEle("itemNo","WHERE itemName = '"+dataAdd[selrowD][1] + "'")+"'";
deleteNo++;
    }//end try
    catch(ArrayIndexOutOfBoundsException e){
        System.out.println("1761");
JOptionPane.showMessageDialog(this,"The max. no. of permitted delete operation is 50 for a given table.\nIf you want to delete still more items from the table, select the P.O. No. from the main table and try again.","Error!",JOptionPane.ERROR_MESSAGE);            
        deleteArrayOverflow=true;
    }//end catch
}//end if(!add && rowTblDetails>0){   
     
//to remove item from table
    if(!deleteArrayOverflow){
     for(i=0;i<rowTblDetails;i++)
            for(j=0;j<colAdd.length;j++){
                                if( i >= selrowD && i < (rowTblDetails-1) ){
                                    if(j==0)
                                        dataAdd[i][j] ="" + (i+1);
                                    else
                    dataAdd[i][j] = dataAdd[i+1][j]; 
                                }
                            }//end for
        
                     rowTblDetails --;                    
dataDetailsShown = new Object[rowTblDetails][colAdd.length];
                          for(i=0;i<rowTblDetails;i++)
            for(j=0;j<colAdd.length;j++)
                dataDetailsShown[i][j] = dataAdd[i][j];
                                             dataAdd=dataDetailsShown ;
            txtD_SlNo.setText("" + (rowTblDetails+1));                                                      
        tbPurDetails.setModel(new javax.swing.table.DefaultTableModel(dataDetailsShown ,colAdd)
        {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });   //end table model    
    }//end if(!deleteArrayOverflow){

if(rowTblDetails<=1 || deleteArrayOverflow)
btD_Remove.setEnabled(false);
else
    btD_Remove.setEnabled(true);

if(rowTblDetails==1 && add)
    btD_Remove.setEnabled(true);
    
if(rowTblDetails==0)
    btD_Edit.setEnabled(false);
else
    if(!add)
    btD_Edit.setEnabled(true);

if(rowTblDetails!=0)
btD_Finish.setEnabled(true);
else
    btD_Finish.setEnabled(false);

if(!btD_Add.isEnabled())
    btD_Add.setEnabled(true);

    resetDetails(); 
    clickD=false;
    
    fillAmts();
        }//end main if
           else 
            JOptionPane.showMessageDialog(this,"Select the row you want to delete.","Error!",JOptionPane.ERROR_MESSAGE);                
        
            tbPurDetails.clearSelection();
    }//GEN-LAST:event_btD_RemoveActionPerformed

    private void btD_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_AddActionPerformed
if(rowTblDetails>=50){
    btD_Add.setEnabled(false);
            JOptionPane.showMessageDialog(this,"You are not allowed to add more than 50 Items in a single Purchase Order. \nIf you want to add more, create a new Purchase Order.","Error!",JOptionPane.ERROR_MESSAGE);                    
}//end if
else{//main else
checkDetailsValidation();
if(detailsAreValid){
     rowTblDetails ++ ; 
displayDetailsTbl();
 txtD_SlNo.setText("" + (rowTblDetails+1));
 resetDetails();
 if(!deleteArrayOverflow)
 btD_Remove.setEnabled(true);
 btD_Finish.setEnabled(true);
}//end if
}//end main else
    
    }//GEN-LAST:event_btD_AddActionPerformed

    private void btD_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_CancelActionPerformed
        addCancelPressed();
    }//GEN-LAST:event_btD_CancelActionPerformed

    private void pnlAddHeaderComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlAddHeaderComponentShown
     
        pnlHeaderShown = true;
        detailsEditable();
        btSave.setEnabled(false);
        btD_Add.setVisible(true);
      btD_Add.setEnabled(true);
      btD_SaveEdit.setVisible(true);
      btD_SaveEdit.setEnabled(false);
      btD_Edit.setVisible(true);
      btD_Edit.setEnabled(false);
     
      btD_Finish.setVisible(true);
      btD_Finish.setEnabled(false);
         btD_Remove.setVisible(true);
   btD_Remove.setEnabled(false);

 
        if(add){
            generateCode();
resetDetails();
resetHeader();
headerEditable();
                     
}//end if
        else{
            headerUnEditable();
                 btD_Edit.setEnabled(true);
                                    btD_Remove.setEnabled(true);
if(rowTblDetails==1)
btD_Remove.setEnabled(false);                                    
            
        }//end else

    }//GEN-LAST:event_pnlAddHeaderComponentShown

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
addPressed();
    }//GEN-LAST:event_btAddActionPerformed

    private void cbSupplierListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSupplierListActionPerformed
if(rowSpecific!=0)
        displayData();        
else{
JOptionPane.showMessageDialog(this,"The Purchase Order DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);    
 cbSupplierList.setSelectedIndex(0);
}
    }//GEN-LAST:event_cbSupplierListActionPerformed

    private void cbToMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbToMMActionPerformed
if(rowSpecific!=0)
        displayData();         
else{
JOptionPane.showMessageDialog(this,"The Purchase Order DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);    
cbToMM.setSelectedIndex(11);
}
    }//GEN-LAST:event_cbToMMActionPerformed

    private void cbToDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbToDDActionPerformed
if(rowSpecific!=0)
        displayData();         
else{
JOptionPane.showMessageDialog(this,"The Purchase Order DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);    
cbToDD.setSelectedIndex(30);
}
    }//GEN-LAST:event_cbToDDActionPerformed

    private void cbFrMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFrMMActionPerformed
if(rowSpecific!=0)
        displayData();         
else{
JOptionPane.showMessageDialog(this,"The Purchase Order DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);    
cbFrMM.setSelectedIndex(0);
}
    }//GEN-LAST:event_cbFrMMActionPerformed

    private void cbFrDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFrDDActionPerformed
if(rowSpecific!=0)
        displayData();         
else{
JOptionPane.showMessageDialog(this,"The Purchase Order DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);    
cbFrDD.setSelectedIndex(0);
}
    }//GEN-LAST:event_cbFrDDActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
this.setVisible(false);
    }//GEN-LAST:event_btExitActionPerformed

    private void cbStoreListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbStoreListActionPerformed
System.out.println("2068");
        if(rowSpecific!=0)
        displayData();         
else{
JOptionPane.showMessageDialog(this,"The Purchase Order DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);    
cbStoreList.setSelectedIndex(0);
}    
    
    }//GEN-LAST:event_cbStoreListActionPerformed

    private void cbToYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbToYYActionPerformed
if(rowSpecific!=0)
        displayData();         
else{
JOptionPane.showMessageDialog(this,"The Purchase Order DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);    
 cbToYY.setSelectedItem("2100");
}    

    }//GEN-LAST:event_cbToYYActionPerformed

    private void cbFrYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFrYYActionPerformed
if(rowSpecific!=0)
        displayData();         
else{
JOptionPane.showMessageDialog(this,"The Purchase Order DataBase is currently empty.","Error!",JOptionPane.ERROR_MESSAGE);    
cbFrYY.setSelectedIndex(0);
}    

    }//GEN-LAST:event_cbFrYYActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
         
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
   /* public static void main(String args[]) {
        new PurchaseOrder003().show();
    }*/


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbMM;
    private javax.swing.JButton btSave;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextArea txtTerms;
    private javax.swing.JTextField txtD_SlNo;
    private javax.swing.JComboBox cbD_UomId;
    private javax.swing.JButton btExit;
    private javax.swing.JButton btD_Remove;
    private javax.swing.JButton btD_Edit;
    private javax.swing.JTable tbPurDetails;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JComboBox cbPoGrp;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JButton btModify;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JTextField txtNetTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JButton btCancelPO;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox cbFrYY;
    private javax.swing.JComboBox cbSearch;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JComboBox cbAddSup;
    private javax.swing.JButton btD_Add;
    private javax.swing.JList listSearch;
    private javax.swing.JTextField txtGrossTotal;
    private javax.swing.JTextField txtD_NtPr;
    private javax.swing.JTextField txtD_LsPr;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JPanel pnlAddHeader;
    private javax.swing.JComboBox cbAddStore;
    private javax.swing.JComboBox cbDlyMM;
    private javax.swing.JTextField txtD_PcQt;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JComboBox cbD_Dis;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton btSearch;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JComboBox cbAuthBy;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JTextField txtCstRef;
    private javax.swing.JComboBox cbStoreList;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JTextField txtD_BlPr;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JButton btD_Cancel;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JComboBox cbFrDD;
    private javax.swing.JComboBox cbDlyDD;
    private javax.swing.JComboBox cbD_GrId;
    private javax.swing.JComboBox cbD_ItN;
    private javax.swing.JButton btD_SaveEdit;
    private javax.swing.JComboBox cbFrMM;
    private javax.swing.JComboBox cbTaxSl;
    private javax.swing.JComboBox cbToDD;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JComboBox cbDisSl;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JTextField txtD_BlQt;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JComboBox cbYY;
    private javax.swing.JComboBox cbSupplierList;
    private javax.swing.JComboBox cbCur;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jLabel221;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JComboBox cbToMM;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox cbToYY;
    private javax.swing.JTextField txtD_PcPr;
    private javax.swing.JComboBox cbDD;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JTextField txtMscSl;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton btSearchCancel;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JComboBox cbD_Tax;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox cbAddDlyStore;
    private javax.swing.JButton btAdd;
    private javax.swing.JTable tbPurHeader;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JComboBox cbDlyYY;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtD_LsQt;
    private javax.swing.JButton btD_Finish;
    // End of variables declaration//GEN-END:variables

    private void count(){
        try{
            cols=0;i=0;j=0;

accessDB();
String ss,ss1;
   ss="SELECT * FROM "+tableName;
   ResultSet res = stat.executeQuery(ss); 
      ResultSetMetaData md = res.getMetaData();
     /**   in the database , we have the counter field which is autonumber.
 *      we dont want to display it in the front end.
 */   

   cols = md.getColumnCount()-1;
   tableColHeads=new String[cols];
   for(i=1;i<=cols;i++)
       tableColHeads[i-1]=md.getColumnName(i+1);
  con.close();

         }//end try
        catch (Exception e){
            System.out.println(e+"   1083");
        }//end catch
    }//end count
 private void initialise(){
     
    checkHeaderValidation();

    if(headerIsValid){
        
try{
    accessDB();
        String ss1 = "SELECT StoreID FROM StoreMaster WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'";
        ResultSet res1=stat.executeQuery(ss1);
        res1.next();
        addStore=res1.getString(1);
                System.out.println("addStore="+addStore);
        String ss2 = "SELECT SupCode FROM SupplierMaster WHERE SupName = '"+cbAddSup.getSelectedItem()+"'";
        ResultSet res2=stat.executeQuery(ss2);
        res2.next();
        addSup=res2.getString(1);
                System.out.println("addSup="+addSup);
        String ss3 = "SELECT StoreID  FROM StoreMaster WHERE StoreName = '"+cbAddDlyStore.getSelectedItem()+"'";
        ResultSet res3=stat.executeQuery(ss3);
        res3.next();
        addDlyStore=res3.getString(1);
                System.out.println("addDlyStore="+addDlyStore);
        String ss4 = "SELECT CM_ID  FROM CurrencyMaster WHERE CM_Name = '"+cbCur.getSelectedItem()+"'";
        ResultSet res4=stat.executeQuery(ss4);
        res4.next();
        cur=res4.getString(1);   
                System.out.println("cur="+cur);
                
        if(cbAuthBy.getSelectedIndex()==0)
            authBy="    ";
        else{
        String ss5 = "SELECT EmpCode  FROM EmployeeMaster WHERE EmpName = '"+cbAuthBy.getSelectedItem()+"'";
        ResultSet res5=stat.executeQuery(ss5);
        res5.next();
        authBy=res5.getString(1);              
        }//end else
                 System.out.println("authBy="+authBy);
                 
        if(cbTaxSl.getSelectedIndex()==0)
            taxSlCode="     ";
        else{
            StringBuffer sb = new StringBuffer(""+cbTaxSl.getSelectedItem());
            for(i=1;i<=sb.length();i++)
            if(sb.charAt(sb.length()-i)=='-')
                break;
          taxSlName=""+sb.delete(sb.length()-i,sb.length());
          
          System.out.println("2121 : taxSlName = "+taxSlName);
          
          String ss = "SELECT TaxCode  FROM TaxMaster WHERE TaxDesc = '"+taxSlName+"'";
          
          System.out.println(ss);
          ResultSet res=stat.executeQuery(ss);
          res.next();
          taxSlCode = res.getString(1);  
        }//end else
                 
        if(cbDisSl.getSelectedIndex()==0)
            disSlCode="     ";
        else{
            StringBuffer sb = new StringBuffer(""+cbDisSl.getSelectedItem());
            for(i=1;i<=sb.length();i++)
            if(sb.charAt(sb.length()-i)=='-')
                break;
          disSlName=""+sb.delete(sb.length()-i,sb.length());
          
          System.out.println("2144 : disSlName = "+disSlName);
          String ss = "SELECT DM_ID  FROM DiscountMaster WHERE DM_Name = '"+disSlName+"'";
          
          System.out.println(ss);
          ResultSet res=stat.executeQuery(ss);
          res.next();
          disSlCode = res.getString(1);  
        }//end else
                 
                 
        con.close();
}//end try
catch(Exception e){
    System.out.println(e+"   2152");
}//end catch
   }//end if
  
     
     count();
    dbParam = new String[tableColHeads.length];
             ss1H="";
             ss2H="";
      //initialise dbParam with the variables that have the values to be entered in the database
     dbParam[0]="'"+code+"'";
     dbParam[1]="'"+date+"'";
     dbParam[2]="'"+addStore+"'";
     dbParam[3]="'"+addSup+"'";
     dbParam[4]="'"+addDlyStore+"'";
     dbParam[5]="'"+dlyDate+"'";
     dbParam[6]="'"+poGrp+"'";
     dbParam[7]="'"+cur+"'";
     dbParam[8]="'"+authBy+"'";
     dbParam[9]="'"+cstRef+"'";
     dbParam[10]="'"+terms+"'";
     dbParam[11]="'"+mscSl+"'";
     dbParam[12]="'"+disSlCode+"'";
     dbParam[13]="'"+taxSlCode+"'";
     dbParam[14]="'"+netTotal+"'";
     dbParam[15]="'N'";
     dbParam[16]="'N'";
      
          for(i=0;i<tableColHeads.length;i++){
         ss1H+=tableColHeads[i];
         ss2H+=dbParam[i];
         if(i!=tableColHeads.length-1){
             ss1H+=",";
             ss2H+=",";
         }
         
              }//end for
     

 }//end initialise*/
 
 private void checkHeaderValidation(){
        headerIsValid=false;
        code=txtCode.getText();
        date=""+cbDD.getSelectedItem()+"/"+cbMM.getSelectedItem()+"/"+cbYY.getSelectedItem();
        dlyDate= ""+cbDlyDD.getSelectedItem()+"/"+cbDlyMM.getSelectedItem()+"/"+cbDlyYY.getSelectedItem();
        terms = txtTerms.getText().trim();
        cstRef = txtCstRef.getText().trim();
        if(cbPoGrp.getSelectedIndex()==0)
            poGrp="      ";
        else
        poGrp=cbPoGrp.getSelectedItem().toString(); 
        
        //check validations
 if(cbAddStore.getSelectedIndex()==0){
        JOptionPane.showMessageDialog(this,"Select Store Name!","Error!",JOptionPane.ERROR_MESSAGE); 
        cbAddStore.requestFocus();
    }//end else if
    
         else if(cbAddSup.getSelectedIndex()==0){
                JOptionPane.showMessageDialog(this,"Select  Supplier Name!","Error!",JOptionPane.ERROR_MESSAGE);    
                cbAddSup.requestFocus();
    }//end else if
        else if(cbAddDlyStore.getSelectedIndex()==0){
                JOptionPane.showMessageDialog(this,"Select  Delivery Store Name!","Error!",JOptionPane.ERROR_MESSAGE);    
                cbAddDlyStore.requestFocus();
    }//end else if
        else if(cbCur.getSelectedIndex()==0){
                JOptionPane.showMessageDialog(this,"Select Currency Name!","Error!",JOptionPane.ERROR_MESSAGE);    
                cbCur.requestFocus();
    }//end else if
        else
                headerIsValid=true;
     
 }//end checkHeaderValidation*/
 
    
  private void resetHeader(){    
      cbAddStore.setSelectedIndex(0);
      cbAddSup.setSelectedIndex(0);
      cbAddDlyStore.setSelectedIndex(0);
      cbPoGrp.setSelectedIndex(0);
      cbCur.setSelectedIndex(0);
      cbAuthBy.setSelectedIndex(0);
      txtCstRef.setText("");
      txtTerms.setText("");
      txtMscSl.setText(""+0);
      cbDisSl.setSelectedIndex(0);
      cbTaxSl.setSelectedIndex(0);
      cbDD.setSelectedIndex(curDate.getDate()-1);
        cbMM.setSelectedIndex(curDate.getMonth());
  cbYY.setSelectedIndex( curDate.getYear()-50 );
       cbDlyDD.setSelectedIndex(curDate.getDate()-1);
        cbDlyMM.setSelectedIndex(curDate.getMonth());
  cbDlyYY.setSelectedIndex( curDate.getYear()-50 );
  disSl=0;
  taxSl=0;
  txtGrossTotal.setText("0.00");
 txtNetTotal.setText("0.00");
 grossTotal=0;
 netTotal=0;
  }//end resetHeader
   
  private void countD(){
        try{
            colsD=0;i=0;j=0;

accessDB();
String ss,ss1;
   ss="SELECT * FROM PurchaseOrderDetails";
   ResultSet res = stat.executeQuery(ss); 
      ResultSetMetaData md = res.getMetaData();
     /*   in the database , we have the counter field which is autonumber.
       we dont want to display it in the front end. */   

   colsD = md.getColumnCount()-1;
   colHeadsD=new String[colsD];
   for(i=1;i<=colsD;i++)
       colHeadsD[i-1]=md.getColumnName(i+1);
  con.close();

         }//end try
        catch (Exception e){
            System.out.println(e+"  1340");
        }//end catch
    }//end countD
    
 private void initialiseD(){
     countD();
     getCodeFrmName();
             detDataMod=new String[rowTblDetails][colHeadsD.length];
             ss1=new String[rowTblDetails];
             ss2=new String[rowTblDetails];
             ssMod=new String[rowTblDetails];  
             System.out.println("colHeadsD.length = "+colHeadsD.length);
             for(i=0;i<rowTblDetails;i++){
             ss1[i]="";
             ss2[i]=""; 
             ssMod[i]="";
             for(j=0;j<colHeadsD.length;j++){//a total of 13 items are there in which the 0th is the Item Code
         ss1[i]+=colHeadsD[j];
         if(j==0){
             ss2[i]+="'"+txtCode.getText()+"'";
             detDataMod[i][j]=txtCode.getText();  
         }
         else if(j==2){
             ss2[i]+="'"+ d_ItN[i]+"'";
             detDataMod[i][j]=d_ItN[i];  
         }
         else if(j==3){
             ss2[i]+="'"+d_GrId[i]+"'";
             detDataMod[i][j]=d_GrId[i];  
         }
         else if(j==4){
             ss2[i]+="'"+d_UomId[i]+"'";
             detDataMod[i][j]=d_UomId[i];  
         }
         else if(j==11){
             ss2[i]+="'"+d_DisCode[i]+"'";
             detDataMod[i][j]=d_DisCode[i];  
             System.out.println("d_DisCode["+i+"] = "+d_DisCode[i]);
         }
         else if(j==12){
             ss2[i]+="'"+d_TaxCode[i]+"'";
             detDataMod[i][j]=d_TaxCode[i];
         }
           else{
                ss2[i]+="'"+dataDetailsShown[i][j-1].toString().trim()+"'";
                detDataMod[i][j]=""+dataDetailsShown[i][j-1].toString().trim();
           }
         
         ssMod[i]= ssMod[i]+colHeadsD[j]+" = '"+detDataMod[i][j]+"'";
        
         
         if(j<colHeadsD.length-1){
             ss1[i]+=",";
             ss2[i]+=",";
             ssMod[i]+=",";
                 
                 }
         
                 }//end for
             System.out.println(ss1[i]+"\n"+ss2[i]);
             }//end for
             
             
 }//end initialiseD*/
 
 private void checkDetailsValidation(){
     
     detailsAreValid=false;
     
                if(cbD_ItN.getSelectedIndex()==0){
                    detailsAreValid=false;
 JOptionPane.showMessageDialog(this,"Select an item from the Item List.","Error!",JOptionPane.ERROR_MESSAGE);  
   cbD_ItN.requestFocus();
        }
            else if(cbD_GrId.getSelectedIndex()==0){
                detailsAreValid=false;
 JOptionPane.showMessageDialog(this,"Select an item from the Item Group List.","Error!",JOptionPane.ERROR_MESSAGE);  
   cbD_GrId.requestFocus(); 
            }
            else if(cbD_UomId.getSelectedIndex()==0){
                detailsAreValid=false;
 JOptionPane.showMessageDialog(this,"Select an item from the UOM Name List.","Error!",JOptionPane.ERROR_MESSAGE);  
    cbD_UomId.requestFocus();
            }
     
       else{ 
         
           if(lsQt!=0 && lsPr==0){
            detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Loose Price !","Error!",JOptionPane.ERROR_MESSAGE);    
                txtD_LsPr.setText("0");
                txtD_LsPr.requestFocus();
                txtD_LsPr.selectAll();
            
        }//end if
        else if(lsQt==0 && lsPr!=0){
            detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Loose Qty.!","Error!",JOptionPane.ERROR_MESSAGE);    
                txtD_LsQt.setText("0");
                txtD_LsQt.selectAll();
                txtD_LsQt.requestFocus();             
 
        }//end else if
 else if(pcQt!=0 && pcPr==0){
            detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Pack Price !","Error!",JOptionPane.ERROR_MESSAGE);    
                txtD_PcPr.setText("0");
                txtD_PcPr.requestFocus();
                txtD_PcPr.selectAll();

        }//end if
        else if(pcQt==0 && pcPr!=0){
            detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Pack Qty.!","Error!",JOptionPane.ERROR_MESSAGE);    
                txtD_PcQt.setText("0");
                txtD_PcQt.requestFocus();
                txtD_PcQt.selectAll();

        }//end else if
        else  if(lsQt==0 && pcQt==0 && blQt==0){
           detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"The Loose Qty., Pack Qty., and Bulk Qty. fields cannot be '0' at the same time!","Sorry!",JOptionPane.ERROR_MESSAGE);    
                txtD_LsQt.setText("0");
                txtD_LsQt.selectAll();
                txtD_LsQt.requestFocus();             
        }
        else if(blQt!=0 && blPr==0){
             detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Bulk Price!","Error!",JOptionPane.ERROR_MESSAGE);    
                txtD_BlPr.setText("0");
                txtD_BlPr.requestFocus();
                txtD_BlPr.selectAll();
        }//end if
        else if(blQt==0 && blPr!=0){
             detailsAreValid=false;
                JOptionPane.showMessageDialog(this,"Enter the Bulk Qty.!","Error!",JOptionPane.ERROR_MESSAGE);    
                txtD_BlQt.setText("0");
                txtD_BlQt.requestFocus();
                txtD_BlQt.selectAll();
        }//end else if
        else
            detailsAreValid=true;
            }//end else
     
  }//end checkDetailsValidation*/
 
 private void resetDetails(){
       cbD_ItN.setSelectedIndex(0);
        cbD_GrId.setSelectedIndex(0);
        cbD_UomId.setSelectedIndex(0);
        cbD_Dis.setSelectedIndex(0);
        cbD_Tax.setSelectedIndex(0);
        
        txtD_LsQt.setText("0");
        txtD_LsPr.setText("0");
        txtD_PcQt.setText("0");
        txtD_PcPr.setText("0");
        txtD_BlQt.setText("0");
        txtD_BlPr.setText("0");
        txtD_NtPr.setText("0");   
        
        txtD_LsQt.selectAll();
        txtD_LsPr.selectAll();
        txtD_PcQt.selectAll();
        txtD_PcPr.selectAll();
        txtD_BlQt.selectAll();
        txtD_BlPr.selectAll();
        txtD_NtPr.selectAll();
        
        lsQt=0;lsPr=0;pcQt=0;pcPr=0;blQt=0;blPr=0;
        
        }//end resetDetails


  private void displayData(){
System.out.println("2655");

    try{

accessDB( );
System.out.println("2660");
if(cbSupplierList.getSelectedIndex()==0 && cbStoreList.getSelectedIndex()==0  ){
String ss1="SELECT COUNT(*) FROM "+tableName;
    System.out.println("    1608 ");   
 ResultSet res1 = stat.executeQuery(ss1);
   System.out.println("    1610 ");
res1.next(); 
try{
    rowSpecific=Integer.parseInt(res1.getString(1));
}//end try
catch(Exception e){
    System.out.println(e);
}//end catch
   System.out.println("    1618 ");
dataSpecific= new Object[rowSpecific][colsShownH.length];
String ss2="SELECT POM_No,POM_Date,POM_Spl_Id,POM_Total_Amt,Cancelled FROM "+tableName+" ORDER BY POM_Date";
 ResultSet res2 = stat.executeQuery(ss2);
String temp[] = new String[rowSpecific];
  for(i=0;res2.next();i++)
      for(j=0;j<colsShownH.length;j++)
               dataSpecific[i][j]=res2.getString(j+1);
       
}//end if

    else if(cbStoreList.getSelectedIndex()>0 && cbSupplierList.getSelectedIndex()==0 ){
    //MySQL doesnot support sub queries
    
    //String ss=" SELECT * FROM "+tableName+" WHERE POM_Str_Id = (SELECT StoreID FROM StoreMaster WHERE StoreName = '" + cbStoreList.getSelectedItem()+"')";
    
    String ss=" SELECT * FROM "+tableName+" WHERE POM_Str_Id = '" + StoreMaster.queryOneEle("StoreID","WHERE StoreName = '" + cbStoreList.getSelectedItem()+"'")+"'";
    ResultSet res = stat.executeQuery(ss);

if(!res.next()){
        JOptionPane.showMessageDialog(this,"No Items were found corresponding to the Store '"+ cbStoreList.getSelectedItem() +"'.","Sorry!",JOptionPane.ERROR_MESSAGE);    
System.out.println("2691");        
        con.close();
        cbStoreList.setSelectedIndex(0);
        displayData();
              System.out.println("2694");
        }//end if

else{
    store=true;
    supplier = false;
String ss1="SELECT COUNT (*) FROM "+tableName+ " WHERE POM_Str_Id = '"+StoreMaster.queryOneEle("StoreID","WHERE StoreName = '" + cbStoreList.getSelectedItem()+"'")+"'";
    ResultSet res1 = stat.executeQuery(ss1);
    
res1.next(); 
try{
    rowSpecific=Integer.parseInt(res1.getString(1));
   }//end try
catch(Exception e){
    System.out.println(e);
}//end catch
    String ss2 = "SELECT POM_No,POM_Date,POM_Spl_Id,POM_Total_Amt,Cancelled FROM " + tableName + " WHERE POM_Str_Id = '"+StoreMaster.queryOneEle("StoreID","WHERE StoreName = '" + cbStoreList.getSelectedItem()+"'")+"' ORDER BY POM_Date";
ResultSet res2 = stat.executeQuery(ss2);
    dataSpecific = new Object[rowSpecific][colsShownH.length];
    rowShown=rowSpecific;
      for(i=0;res2.next();i++)
      for(j=0;j<colsShownH.length;j++)
      dataSpecific[i][j]=res2.getString(j+1);
}//end else
}//end else if


    else if(cbSupplierList.getSelectedIndex()>0 && cbStoreList.getSelectedIndex()==0  ){
        
    //String ss=" SELECT * FROM "+tableName+" WHERE POM_Spl_Id = (SELECT SupCode FROM SupplierMaster WHERE SupName = '" + cbSupplierList.getSelectedItem()+"')";
    
    String ss=" SELECT * FROM "+tableName+" WHERE POM_Spl_Id = '"+SupplierMaster.queryOneEle("SupCode","WHERE SupName = '" + cbSupplierList.getSelectedItem()+"'")+"'";
    ResultSet res = stat.executeQuery(ss);
    System.out.println("SEGMENT   A  1");

if(!res.next()){
            con.close();
        JOptionPane.showMessageDialog(this,"No Items were found corresponding to the Supplier '"+ cbSupplierList.getSelectedItem() +"'.","Sorry!",JOptionPane.ERROR_MESSAGE);    
        System.out.println("2728");
        cbSupplierList.setSelectedIndex(0);
         displayData();
        System.out.println("2730");
}

else{ 
        store=false;
    supplier = true;
//String ss1="SELECT COUNT (*) FROM "+tableName+ " WHERE POM_Spl_Id = (SELECT SupCode FROM SupplierMaster WHERE SupName = '" + cbSupplierList.getSelectedItem()+"' )";
    
    String ss1="SELECT COUNT (*) FROM "+tableName+ " WHERE POM_Spl_Id = '"+SupplierMaster.queryOneEle("SupCode","WHERE SupName = '" + cbSupplierList.getSelectedItem()+"'")+"'";
    
    ResultSet res1 = stat.executeQuery(ss1);
    System.out.println("SEGMENT   A  2 ");    
res1.next(); 
try{
    rowSpecific=Integer.parseInt(res1.getString(1));
   }//end try
catch(Exception e){
    System.out.println(e);
}//end catch
//    String ss2 = "SELECT POM_No,POM_Date,POM_Spl_Id,POM_Total_Amt,Cancelled FROM " + tableName + " WHERE POM_Spl_Id = (SELECT SupCode FROM SupplierMaster WHERE SupName = '" + cbSupplierList.getSelectedItem()+"' ) ORDER BY POM_Date";

String ss2 = "SELECT POM_No,POM_Date,POM_Spl_Id,POM_Total_Amt,Cancelled FROM " + tableName + " WHERE POM_Spl_Id = '"+SupplierMaster.queryOneEle("SupCode","WHERE SupName = '" + cbSupplierList.getSelectedItem()+"'")+" ORDER BY POM_Date";

ResultSet res2 = stat.executeQuery(ss2);
    System.out.println("SEGMENT   A  3");
    dataSpecific = new Object[rowSpecific][colsShownH.length];
    rowShown=rowSpecific;
      for(i=0;res2.next();i++)
      for(j=0;j<colsShownH.length;j++)
      dataSpecific[i][j]=res2.getString(j+1);
}//end else
}//end else if

    else{//main else
            System.out.println("SEGMENT   B  0");
        
        if(store== true && supplier == false){//if store
            
            System.out.println("SEGMENT   B  0.1");    
    String ss=" SELECT * FROM "+tableName+" WHERE POM_Spl_Id = '"+SupplierMaster.queryOneEle("SupCode","WHERE SupName = '" + cbSupplierList.getSelectedItem()+"'")+"'";
    ResultSet res = stat.executeQuery(ss);
    System.out.println("SEGMENT   B  1");

if(!res.next()){
        JOptionPane.showMessageDialog(this,"No Items were found corresponding to the Supplier Name  '"+ cbSupplierList.getSelectedItem() +"'.","Sorry!",JOptionPane.ERROR_MESSAGE);    
        
        con.close();
        cbSupplierList.setSelectedIndex(0);
         displayData();
}
else{
String ss1="SELECT COUNT(*) FROM "+tableName+ " WHERE POM_Spl_Id = '"+SupplierMaster.queryOneEle("SupCode","WHERE SupName = '" + cbSupplierList.getSelectedItem()+"'")+"'  AND  POM_Str_Id = '"+StoreMaster.queryOneEle("StoreID","WHERE StoreName = '" + cbStoreList.getSelectedItem()+"'")+"'";
    ResultSet res1 = stat.executeQuery(ss1);
    System.out.println("SEGMENT   B  2 ");    
res1.next(); 
try{
    rowSpecific=Integer.parseInt(res1.getString(1));
   }//end try
catch(Exception e){
    System.out.println(e);
}//end catch

            if(rowSpecific==0){
        JOptionPane.showMessageDialog(this,"There are no items corresponding to your selection in the Database.","Sorry!",JOptionPane.ERROR_MESSAGE);    
        
        con.close();
        cbSupplierList.setSelectedIndex(0); 
         displayData();
               store=true;
               supplier=false;
                   
            }//end if(rowSpecific==0)
            else{// else (rowSpecific==0)
    String ss2 = "SELECT POM_No,POM_Date,POM_Spl_Id,POM_Total_Amt,Cancelled FROM " + tableName + " WHERE POM_Spl_Id = '"+SupplierMaster.queryOneEle("SupCode","WHERE SupName = '" + cbSupplierList.getSelectedItem()+"'")+"'  AND  POM_Str_Id = '"+StoreMaster.queryOneEle("StoreID","WHERE StoreName = '" + cbStoreList.getSelectedItem()+"'")+"'";
ResultSet res2 = stat.executeQuery(ss2);
    System.out.println("SEGMENT   B  3");
    dataSpecific = new Object[rowSpecific][colsShownH.length];
    rowShown=rowSpecific;
      for(i=0;res2.next();i++)
      for(j=0;j<colsShownH.length;j++)
      dataSpecific[i][j]=res2.getString(j+1);
            }// else (rowSpecific==0)
    
}
        }//end if store
            
            
        else if (store==false && supplier==true){//else store
        
    String ss=" SELECT * FROM "+tableName+" WHERE POM_Str_Id = '"+StoreMaster.queryOneEle("StoreID","WHERE StoreName = '" + cbStoreList.getSelectedItem()+"'")+"'";
    ResultSet res = stat.executeQuery(ss);

if(!res.next()){
        JOptionPane.showMessageDialog(this,"The Store Name  '"+ cbStoreList.getSelectedItem() +"'  is currently not there in the Database.","Sorry!",JOptionPane.ERROR_MESSAGE);    
        
        con.close();
        cbStoreList.setSelectedIndex(0);
         displayData();
}
else{
String ss1="SELECT COUNT (*) FROM "+tableName+ " WHERE POM_Spl_Id = '"+SupplierMaster.queryOneEle("SupCode","WHERE SupName = '" + cbSupplierList.getSelectedItem()+"'")+"'  AND  POM_Str_Id = '"+StoreMaster.queryOneEle("StoreID","WHERE StoreName = '" + cbStoreList.getSelectedItem()+"'")+"'";
    ResultSet res1 = stat.executeQuery(ss1);
    System.out.println("SEGMENT   B  2 ");    
res1.next(); 
try{
    rowSpecific=Integer.parseInt(res1.getString(1));
   }//end try
catch(Exception e){
    System.out.println(e);
}//end catch

    System.out.println("LINE   778");
            if(rowSpecific==0){
        JOptionPane.showMessageDialog(this,"There are no items corresponding to your selection in the Database.","Sorry!",JOptionPane.ERROR_MESSAGE);    
        
            System.out.println("LINE   782");
            con.close();
        cbStoreList.setSelectedIndex(0);  
        
        displayData();
        store=false;
        supplier=true;
            }//end if(rowSpecific==0)
            else{// else (rowSpecific==0)

    String ss2 = "SELECT POM_No,POM_Date,POM_Spl_Id,POM_Total_Amt,Cancelled FROM " + tableName + " WHERE POM_Spl_Id = '"+SupplierMaster.queryOneEle("SupCode","WHERE SupName = '" + cbSupplierList.getSelectedItem()+"'")+"'  AND  POM_Str_Id = '"+StoreMaster.queryOneEle("StoreID","WHERE StoreName = '" + cbStoreList.getSelectedItem()+"'")+"'";
ResultSet res2 = stat.executeQuery(ss2);
    System.out.println("SEGMENT   B  3");
    dataSpecific = new Object[rowSpecific][colsShownH.length];
    rowShown=rowSpecific;
      for(i=0;res2.next();i++)
      for(j=0;j<colsShownH.length;j++)
      dataSpecific[i][j]=res2.getString(j+1);
            }// else (rowSpecific==0)
    
    
}//end else
        }//end else store                          
    }//end main else
System.out.println("2861");
if(!con.isClosed()){
       for(i=0;i<rowSpecific;i++){
           String ss = "SELECT SupName FROM SupplierMaster WHERE SupCode = '" + dataSpecific[i][2]+"' ";
           System.out.println("2864");
           ResultSet res = stat.executeQuery(ss);
           res.next();
            System.out.println("dataSpecific["+i+"][2] = "+dataSpecific[i][2]);
           dataSpecific[i][2]=res.getString(1);
           System.out.println("dataSpecific["+i+"][2] = "+dataSpecific[i][2]);
       }//end for
   con.close();
}
     System.out.println("    1799 "); 
     if(rowSpecific!=0)
   dateConstraint(dataSpecific,rowSpecific);

        rowShown=rowDateSpecific;

      dataShown = new Object[rowShown][colsShownH.length];
      
       if(rowSpecific!=0) 
      dataShown=dataDateSpecific;
   System.out.println("    2124 ");
   
    for(i=0;i<rowShown;i++)
       dataShown[i][3] = new Float(""+dataShown[i][3]);//*/
   
        tbPurHeader.setModel(new javax.swing.table.DefaultTableModel(
            dataShown,
            colsShownH )
           {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
//end table model
     
        System.out.println("    1817 ");
  h=tbPurHeader.getRowHeight()*(rowShown+1); 
 if(h<300)
jScrollPane1.setSize(500,h+5);
   else
     jScrollPane1.setSize(500,300);  
  }//end try
    
    catch(Exception e){
        System.out.println("2916\t"+e);
    }//end exception
}//end displayData
    
    
    public void accessDB(){
       try
       { 
    	   con=new LinkDB().getConnection();
        stat=con.createStatement();
       }
       catch(Exception ex)
       {
           System.out.println(ex);
       }   
    }


private void dateConstraint(Object[][] raw,int row){
   
int frDD=Integer.parseInt( cbFrDD.getSelectedItem().toString() );
int  frMM=Integer.parseInt( cbFrMM.getSelectedItem().toString() )-1;
int frYY=Integer.parseInt( cbFrYY.getSelectedItem().toString() )-1900;

int toDD=Integer.parseInt( cbToDD.getSelectedItem().toString() );
 int toMM=Integer.parseInt( cbToMM.getSelectedItem().toString() )-1;
 int toYY=Integer.parseInt( cbToYY.getSelectedItem().toString() )-1900;
 
 java.util.Date fromDate = new java.util.Date(frYY,frMM,frDD);
 java.util.Date toDate = new java.util.Date(toYY,toMM,toDD);
 rowDateSpecific=0;
 
 Object temp[][] = new Object[row][colsShownH.length];
 
 boolean rangeMatching=false;
   for(i=0;i<row;i++){
            int s[] = new int[3];
            StringTokenizer st = new StringTokenizer(raw[i][1].toString() , "/");
            int k=0;
            while( st.hasMoreTokens() ){
                s[k]=Integer.parseInt( st.nextToken() );
                k++;
            }//end while
 java.util.Date dataDate = new java.util.Date(s[2]-1900,s[1]-1,s[0]);
            if(fromDate.compareTo(dataDate)<=0 && toDate.compareTo(dataDate)>=0){//YYif
                        for(j=0;j<colsShownH.length;j++){
                                temp[rowDateSpecific][j]=raw[i][j];
                                rangeMatching=true;
                        }
                        rowDateSpecific++;
                        
            }//end YYif

       }//end for
 
 
   if(!rangeMatching){
       
 if(cbFrYY.getSelectedIndex()!=0)
      cbFrYY.setSelectedItem("1950");
 else 
        cbToYY.setSelectedItem("2100");
 
           cbToMM.setSelectedItem("12");
           cbFrMM.setSelectedItem("01");
 cbFrDD.setSelectedItem("01");
  cbToDD.setSelectedItem("31");
 JOptionPane.showMessageDialog(this,"No items were found corresponding to your date-limit.","Sorry!",JOptionPane.INFORMATION_MESSAGE);  
    displayData();
   }//*/
   else{
       
        dataDateSpecific = new Object[rowDateSpecific][colsShownH.length];
        dataDateSpecific=temp;
   }//end else
    
}//end dateConstraint

private void addCancelPressed(){
txtCode.setText("");

add=false;
pnlAddHeader.setVisible(false);
pnlHome.setVisible(true);
}//end addCancelPressed methd.

private void displayDetailsTbl(){
countD();    
        if(rowTblDetails == 0)
            txtD_SlNo.setText("1");
        dataDetailsShown = new Object[rowTblDetails][colAdd.length];
        for(i=0;i<(rowTblDetails -1);i++)
            for(j=0;j<colHeadsD.length-1;j++)
                dataDetailsShown[i][j] = dataAdd[i][j];
   if(rowTblDetails != 0 )
       fillDetailsTbl(rowTblDetails-1);
                                     
        tbPurDetails.setModel(new javax.swing.table.DefaultTableModel(dataDetailsShown ,colAdd)
        {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });   //end table model    
        dataAdd=dataDetailsShown ;

        }//end addDisplay

private void getCodeFrmName(){
        d_ItN = new String[rowTblDetails];
        d_GrId= new String[rowTblDetails];
        d_UomId= new String[rowTblDetails];
        d_TaxCode= new String[rowTblDetails];
        d_DisCode= new String[rowTblDetails];
        try{
            accessDB();
        for(i=0;i<rowTblDetails;i++){
            String ss1,ss2,ss3;
            ss1="SELECT itemNo FROM Item_M WHERE itemName = '"+dataAdd[i][1] + "'";
            ss2="SELECT itemGroupID FROM Item_G WHERE itemGroupName = '"+dataAdd[i][2] + "'";
            ss3="SELECT UnitID FROM UnitMaster WHERE UnitName = '"+dataAdd[i][3] + "'";
            System.out.println("1956");
            ResultSet res1=stat.executeQuery(ss1);
            res1.next();
            d_ItN[i] = res1.getString(1); 
            System.out.println("1960 "+d_ItN[i]);
            ResultSet res2=stat.executeQuery(ss2);
            res2.next();
            d_GrId[i] = res2.getString(1); 
            System.out.println("1964 "+d_GrId[i]);
            ResultSet res3=stat.executeQuery(ss3);
            res3.next();
            d_UomId[i] = res3.getString(1); 

            System.out.println("1968 "+d_UomId[i]);
            
        if(dataAdd[i][10].equals("0")){
             System.out.println("2859 ");
            d_DisCode[i]="     ";
            
        }
        else{
            System.out.println("2864 ");
            StringBuffer sb = new StringBuffer(""+dataAdd[i][10]);
            int k;
            for(k=1;k<=sb.length();k++)
            if(sb.charAt(sb.length()-k)=='-')
                break;
             System.out.println("2869 ");
          disSlName=""+sb.delete(sb.length()-k,sb.length());
          
          System.out.println("2144 : disSlName = "+disSlName);
          String ss = "SELECT DM_ID  FROM DiscountMaster WHERE DM_Name = '"+disSlName+"'";
          
          System.out.println(ss);
          ResultSet res=stat.executeQuery(ss);
          res.next();
           System.out.println("2878 ");
           d_DisCode[i] = res.getString(1);  
            System.out.println("d_DisCode["+i+"] = "+d_DisCode[i] );
        }//end else
            
            
        if(dataAdd[i][11].equals("0"))
            d_TaxCode[i]="     ";
        else{
            StringBuffer sb = new StringBuffer(""+dataAdd[i][11]);
            int k;
            for(k=1;k<=sb.length();k++)
            if(sb.charAt(sb.length()-k)=='-')
                break;
          taxSlName=""+sb.delete(sb.length()-k,sb.length());
          
          System.out.println("2121 : taxSlName = "+taxSlName);
          
          String ss = "SELECT TaxCode  FROM TaxMaster WHERE TaxDesc = '"+taxSlName+"'";
          
          System.out.println(ss);
          ResultSet res=stat.executeQuery(ss);
          res.next();
          d_TaxCode[i]= res.getString(1);  
           System.out.println(" d_TaxCode["+i+"] = "+ d_TaxCode[i] );
         
          
        }//end else
                 
            
            
        }//end for
        
        con.close();
        
        }//end try
        catch(Exception e){
            System.out.println(e+"    2064");
        }//end exception
  
}//end getCodeFrmName

private void addPressed(){
    
add=true;
pnlHome.setVisible(false);
pnlAddHeader.setVisible(true);
}//end addPressed methd.

private void modifyPressed(){
if(  rowSpecific==0   )
JOptionPane.showMessageDialog(this," The Database is currently empty.","Sorry!",JOptionPane.ERROR_MESSAGE); 
else if( clickH ){
/*           if(dataShown[selrowH][4].toString().trim().equals("Y"))
JOptionPane.showMessageDialog(this," This P.O. is CANCELLED.            /n ","Cannot modify Cancelled P.O. :",JOptionPane.ERROR_MESSAGE);                
           else    //*/
    try{
    accessDB();
    String ss = "SELECT * FROM "+tableName+" WHERE POM_No = '"+dataDateSpecific[selrowH][0]+"'";
    ResultSet res = stat.executeQuery(ss);
    
    while(res.next()){
        txtCode.setText(res.getString(2));
                    int s[] = new int[3];
            StringTokenizer st = new StringTokenizer(res.getString(3) , "/");
            int k=0;
            while( st.hasMoreTokens() ){
                s[k]=Integer.parseInt( st.nextToken() );
                k++;
            }//end while
            cbDD.setSelectedIndex(s[0]-1);
            cbMM.setSelectedIndex(s[1]-1);
            cbYY.setSelectedIndex(s[2]-1950);
            
            addStore=res.getString(4); 

            addSup=res.getString(5); 
            
            addDlyStore=res.getString(6); 
            
            StringTokenizer st1 = new StringTokenizer(res.getString(7) , "/");
            k=0;
            while( st1.hasMoreTokens() ){
                s[k]=Integer.parseInt( st1.nextToken() );
                k++;
            }//end while
            
            cbDlyDD.setSelectedIndex(s[0]-1);
            cbDlyMM.setSelectedIndex(s[1]-1);
            cbDlyYY.setSelectedIndex(s[2]-1950);
            
            poGrp=res.getString(8);
            
            cur=res.getString(9);
            
            authBy=res.getString(10);
            
            txtCstRef.setText(res.getString(11));
            
            txtTerms.setText(res.getString(12));
            
            txtMscSl.setText(res.getString(13));
            
            disSlCode=""+res.getString(14);
            
            taxSlCode=""+res.getString(15);
            System.out.println("disSlCode ="+disSlCode);  
            
             System.out.println("3158");
    }//end while
        String ss1 = "SELECT StoreName FROM StoreMaster WHERE StoreID = '"+addStore+"'";
        ResultSet res1=stat.executeQuery(ss1);
        res1.next();
        cbAddStore.setSelectedItem(res1.getString(1));
        System.out.println("3164");

        String ss2 = "SELECT SupName FROM SupplierMaster WHERE SupCode = '"+addSup+"'";
        ResultSet res2=stat.executeQuery(ss2);
        res2.next();
        cbAddSup.setSelectedItem(res2.getString(1));
        System.out.println("3170");
        
        String ss3 = "SELECT StoreName  FROM StoreMaster WHERE StoreID = '"+addDlyStore+"'";
        ResultSet res3=stat.executeQuery(ss3);
        res3.next();
        cbAddDlyStore.setSelectedItem(res3.getString(1));
        System.out.println("3176");
                
        String ss4 = "SELECT CM_Name  FROM CurrencyMaster WHERE CM_ID = '"+cur+"'";
        ResultSet res4=stat.executeQuery(ss4);
        res4.next();
        cbCur.setSelectedItem(res4.getString(1));   
        System.out.println("3182");
                                
        if(authBy.trim().equals(""))
            cbAuthBy.setSelectedIndex(0);
        else{
        String ss5 = "SELECT EmpName  FROM EmployeeMaster WHERE EmpCode = '"+authBy+"'";
        ResultSet res5=stat.executeQuery(ss5);
        res5.next();
        cbAuthBy.setSelectedItem(res5.getString(1));              
        }//end else
        
         System.out.println("2949");
        
        if(taxSlCode.trim().equals(""))
            cbTaxSl.setSelectedIndex(0);
        else{
        String ss6 = "SELECT TaxDesc,Percentage FROM TaxMaster WHERE TaxCode ='"+taxSlCode+"'";
        ResultSet r6 = stat.executeQuery(ss6);
         System.out.println("2956");
        while(r6.next())
                 cbTaxSl.setSelectedItem(r6.getString(1)+" - "+r6.getString(2)+"%");              
                }//end else
       
         System.out.println("2956");
        
        if(disSlCode.trim().equals("")){
            cbDisSl.setSelectedIndex(0);
             System.out.println("2961");
            
        }
        else{
            System.out.println("2966");
        String ss7 = "SELECT DM_Name,DM_Value FROM DiscountMaster WHERE DM_ID ='"+disSlCode+"'";
        ResultSet res7 = stat.executeQuery(ss7);
        System.out.println("2969");
        res7.next();
         String d =   ""+res7.getString(1)+" - "+res7.getString(2)+"%"; 
        cbDisSl.setSelectedItem(d);    
        System.out.println(d);
        System.out.println(cbDisSl.getSelectedItem());
                  }//end else
        
        
        //To fillup the details
        System.out.println("2184");
        
   String ssr=" SELECT COUNT(*) FROM PurchaseOrderDetails WHERE POM_No = '"+dataDateSpecific[selrowH][0]+"' ";
   
 ResultSet resr =   stat.executeQuery(ssr); 
resr.next(); 
try{
     rowTblDetails=Integer.parseInt(resr.getString(1));
}//end try
catch(Exception e){
    System.out.println(e);
}//end catch*/

        dataDetailsShown = new Object[rowTblDetails][colAdd.length];
       
        String d_ItNM[]=new String[rowTblDetails] ,d_GrIdM[]=new String[rowTblDetails] ,d_UomIdM[]=new String[rowTblDetails];
        String d_TaxCode[]=new String[rowTblDetails],d_DisCode[]=new String[rowTblDetails];
        String ss6 = "SELECT * FROM PurchaseOrderDetails WHERE POM_No = '"+dataDateSpecific[selrowH][0]+"'";
        ResultSet res6=stat.executeQuery(ss6);
        System.out.println("2188");  

for(i=0;res6.next();i++)
for(j=0;j<colAdd.length;j++){
if(j==1)
d_ItNM[i] = res6.getString(4); 
else if(j==2)
d_GrIdM[i] = res6.getString(5); 
else if(j==3)
d_UomIdM[i] = res6.getString(6); 
else if(j==0||j==4||j==6||j==8)
dataDetailsShown[i][j]=new Integer(res6.getString(j+3));
else if(j==10)
d_DisCode[i] = res6.getString(13); 
else if(j==11)
d_TaxCode[i] = res6.getString(14); 
else
dataDetailsShown[i][j]=new Float(res6.getString(j+3));
                
                                                System.out.println("dataDetailsShown["+i+"]["+j+"] = "+dataDetailsShown[i][j]);
                                                
            }//end for*/
        grossTotal=0;
        
        for(i=0;i<rowTblDetails;i++){
            grossTotal+=Float.parseFloat(""+dataDetailsShown[i][12]);
            String ss7="SELECT itemName FROM Item_M WHERE itemNo = '"+d_ItNM[i] + "'";
            ResultSet res7 = stat.executeQuery(ss7);
            res7.next();
            dataDetailsShown[i][1] =  res7.getString(1);
            
            String ss8="SELECT itemGroupName FROM Item_G WHERE itemGroupID = '"+d_GrIdM[i] + "'";
            ResultSet res8 = stat.executeQuery(ss8);
            res8.next();
            dataDetailsShown[i][2] =  res8.getString(1);

            String ss9="SELECT UnitName FROM UnitMaster WHERE UnitID = '"+d_UomIdM[i] + "'";
            ResultSet res9 = stat.executeQuery(ss9);
            res9.next();
            System.out.println("2237");
            dataDetailsShown[i][3] =  res9.getString(1);
            System.out.println("2239");
            
        if(d_TaxCode[i].trim().equals(""))
            dataDetailsShown[i][11] = "0";
        else{
        String ss16 = "SELECT TaxDesc,Percentage FROM TaxMaster WHERE TaxCode ='"+d_TaxCode[i]+"'";
        ResultSet r16 = stat.executeQuery(ss16);
         System.out.println("2956");
        while(r16.next())
                 dataDetailsShown[i][11]=""+r16.getString(1)+" - "+r16.getString(2)+"%";              
                }//end else
       
         System.out.println("2956");
        
        if(d_DisCode[i].trim().equals("")){
            dataDetailsShown[i][10] = "0";
             System.out.println("2961");
            
        }
        else{
            System.out.println("2966");
        String ss11 = "SELECT DM_Name,DM_Value FROM DiscountMaster WHERE DM_ID ='"+d_DisCode[i]+"'";
        ResultSet res11 = stat.executeQuery(ss11);
        System.out.println("2969");
        res11.next();
         String d =   ""+res11.getString(1)+" - "+res11.getString(2)+"%"; 
        dataDetailsShown[i][10] = ""+d;    
        System.out.println(d);
        
                  }//end else
            
            
        }//end for
                con.close();
}//end try
catch(Exception e){
    System.out.println(e+"\n2242"); 
    System.out.println("i = "+i+"\nj = "+j);
}//end catch
finally{
    txtGrossTotal.setText(adjustDecimal(grossTotal));
    txtNetTotal.setText(adjustDecimal(Float.parseFloat(""+dataDateSpecific[selrowH][3])));
        tbPurDetails.setModel(new javax.swing.table.DefaultTableModel(dataDetailsShown ,colAdd)
        {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });    //end table model   

        dataAdd=dataDetailsShown ;
        txtD_SlNo.setText(""+(rowTblDetails+ 1));
        System.out.println("2215");  
}//end finally

pnlHome.setVisible(false);   
pnlAddHeader.setVisible(true);
clickH=false;
selrowH=0;
       }//end else if*/
else
      JOptionPane.showMessageDialog(this," Select the P.O. No. you want to Modify  from the Table. ","Sorry!",JOptionPane.ERROR_MESSAGE); 


}//end modifyPressed methd.

private void headerUnEditable(){
    cbDD.setEnabled(false);
    cbMM.setEnabled(false);
    cbYY.setEnabled(false);
    cbAddStore.setEnabled(false);
    cbAddSup.setEnabled(false);
    cbAddDlyStore.setEnabled(false);
    cbDlyDD.setEnabled(false);
    cbDlyMM.setEnabled(false);
    cbDlyYY.setEnabled(false);
    cbPoGrp.setEnabled(false);
    cbCur.setEnabled(false);
    cbAuthBy.setEnabled(false);
    cbDisSl.setEnabled(false);
    cbTaxSl.setEnabled(false);
    
    txtCstRef.setEditable(false);
    txtTerms.setEditable(false);
    txtMscSl.setEditable(false);
    
}//end headerUnEditable

private void headerEditable(){
    cbDD.setEnabled(true);
    cbMM.setEnabled(true);
    cbYY.setEnabled(true);
    cbAddStore.setEnabled(true);
    cbAddSup.setEnabled(true);
    cbAddDlyStore.setEnabled(true);
    cbDlyDD.setEnabled(true);
    cbDlyMM.setEnabled(true);
    cbDlyYY.setEnabled(true);
    cbPoGrp.setEnabled(true);
    cbCur.setEnabled(true);
    cbAuthBy.setEnabled(true);
    cbDisSl.setEnabled(true);
    cbTaxSl.setEnabled(true);
    
        txtCstRef.setEditable(true);
    txtTerms.setEditable(true);
    txtMscSl.setEditable(true);
    }//end headerEditable

private void detailsEditable(){
    cbD_ItN.setEnabled(true);
    cbD_GrId.setEnabled(true);
    cbD_UomId.setEnabled(true);
     tbPurDetails.setEnabled(true);
    
}//end detailsEditable

private void detailsUnEditable(){
    cbD_ItN.setEnabled(false);
    cbD_GrId.setEnabled(false);
    cbD_UomId.setEnabled(false);  
    tbPurDetails.setEnabled(false);
}//end detailsUnEditable


private void detailsModify(){
    if(clickD && tbPurDetails.getSelectedRow()>=0){//main if
        selrowD=tbPurDetails.getSelectedRow();
        txtD_SlNo.setText(""+dataDetailsShown[selrowD][0]);
        txtD_LsQt.setText(""+dataDetailsShown[selrowD][4]);
        lsQt=Integer.parseInt(""+dataDetailsShown[selrowD][4]);
        txtD_LsPr.setText(""+dataDetailsShown[selrowD][5]);
        lsPr=Float.parseFloat(""+dataDetailsShown[selrowD][5]);
        txtD_PcQt.setText(""+dataDetailsShown[selrowD][6]);
        pcQt=Integer.parseInt(""+dataDetailsShown[selrowD][6]);
        txtD_PcPr.setText(""+dataDetailsShown[selrowD][7]);
        pcPr=Float.parseFloat(""+dataDetailsShown[selrowD][7]);
        txtD_BlQt.setText(""+dataDetailsShown[selrowD][8]);
        blQt=Integer.parseInt(""+dataDetailsShown[selrowD][8]);
        txtD_BlPr.setText(""+dataDetailsShown[selrowD][9]);
        blPr=Float.parseFloat(""+dataDetailsShown[selrowD][9]);
        txtD_NtPr.setText(""+dataDetailsShown[selrowD][12]);
        
        txtD_LsQt.selectAll();
        txtD_LsQt.requestFocus();
        txtD_LsPr.selectAll();
        txtD_PcQt.selectAll();
        txtD_PcPr.selectAll();
        txtD_BlQt.selectAll();
        txtD_BlPr.selectAll();
        txtD_NtPr.selectAll();
        
        
        cbD_ItN.setSelectedItem(dataDetailsShown[selrowD][1]);   
        cbD_GrId.setSelectedItem(dataDetailsShown[selrowD][2]);    
        cbD_UomId.setSelectedItem(dataDetailsShown[selrowD][3]);    
        
        if(dataDetailsShown[selrowD][10].equals(""+0))
            cbD_Dis.setSelectedIndex(0);
        else
            cbD_Dis.setSelectedItem(dataDetailsShown[selrowD][10]);
        
        if(dataDetailsShown[selrowD][11].equals(""+0))
            cbD_Tax.setSelectedIndex(0);
        else
            cbD_Tax.setSelectedItem(dataDetailsShown[selrowD][11]);
        
        detailsUnEditable();
        
         btD_Add.setVisible(false);
         btD_Remove.setVisible(false);
         btD_Edit.setVisible(false);      
         btD_SaveEdit.setVisible(true);
         btD_SaveEdit.setEnabled(true);
         btD_Finish.setVisible(false);
            }//end main if
    else{//main else
        JOptionPane.showMessageDialog(this," Select a row from the Purchase Order Details to Edit.","No rows selected!",JOptionPane.ERROR_MESSAGE); 
        tbPurDetails.clearSelection();
    }//end else
}//end detailsMod

 private void saveDetailsMod(){
     getCodeFrmName();
          initialiseD();
 
    try{
        accessDB();
    System.out.println("rowTblDetails =  "+rowTblDetails); 
    //to delete selected data
     if(removeDetails){
         for(i=0;i<deleteNo;i++){
              System.out.println("deleteDetails["+i+"] =  "+deleteDetails[i]); 
             stat.executeUpdate(deleteDetails[i]);
            
         }//end for
         
     }//end if removeDetails
         
              for(i=0;i<rowTblDetails;i++){
 
String test=" SELECT *  FROM PurchaseOrderDetails WHERE POM_No = '"+txtCode.getText()+"' AND Item_ID = '"+d_ItN[i]+"'";
  ResultSet resTest = stat.executeQuery(test); 
   if(resTest.next()){ 
            String ss ="";     
 ss = "UPDATE PurchaseOrderDetails SET  " +ssMod[i]+" WHERE POM_No = '"+txtCode.getText()+"' AND Item_ID = '"+d_ItN[i]+"'";
                System.out.println(ss);
    stat.executeUpdate(ss); 
   }//end if res.next()
   else{
       ss = "INSERT INTO  PurchaseOrderDetails ( " +ss1[i]+ " ) VALUES  ( "+ss2[i]+" )";
                System.out.println(ss);
    stat.executeUpdate(ss); 
       
   }//end else

              }//end for
    String head = "UPDATE PurchaseOrderHead SET  Modified = 'Y' WHERE POM_No = '"+txtCode.getText()+"'";
    stat.executeUpdate(head);
     System.out.println("2581  ");       
    con.close();
   
    }//end try
    
    catch(Exception e){
        System.out.println(e+"    2584");
    }//end exception
    displayData();
        pnlHome.setVisible(true);
        pnlAddHeader.setVisible(false);

     
 }//end  saveDetailsMod
 
 private void modDetails(){
checkDetailsValidation();
if(detailsAreValid){
btD_Add.setVisible(true);
btD_Edit.setVisible(true);
btD_Remove.setVisible(true);
btD_Finish.setVisible(true);
btD_Remove.setEnabled(true);
if(deleteArrayOverflow || rowTblDetails==1)
 btD_Remove.setEnabled(false);
 btD_Finish.setEnabled(true);
btD_SaveEdit.setVisible(false);
btD_SaveEdit.setEnabled(false);    
fillDetailsTbl(selrowD);

 resetDetails();
 txtD_SlNo.setText("" + (rowTblDetails+1));  
 
        tbPurDetails.setModel(new javax.swing.table.DefaultTableModel(dataDetailsShown ,colAdd)
        {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });   //end table model    

detailsEditable();
        
}//end if
     
     
 }//end modDetails
 
 private void fillDetailsTbl(int r){
        dataDetailsShown[r][0] = new Integer(txtD_SlNo.getText());
        dataDetailsShown[r][1] =cbD_ItN.getSelectedItem();
        dataDetailsShown[r][2] =cbD_GrId.getSelectedItem();
        dataDetailsShown[r][3] =cbD_UomId.getSelectedItem();
        dataDetailsShown[r][4] =new Integer(lsQt );
        dataDetailsShown[r][5] =new Float(lsPr);
        dataDetailsShown[r][6] =new Integer(pcQt);
        dataDetailsShown[r][7] =new Float(pcPr);
        dataDetailsShown[r][8] =new Integer(blQt);
        dataDetailsShown[r][9] =new Float(blPr);
        if(cbD_Dis.getSelectedIndex()!=0)
        dataDetailsShown[r][10] = ""+cbD_Dis.getSelectedItem();
        else
            dataDetailsShown[r][10] = "0";
        if(cbD_Tax.getSelectedIndex()!=0)
        dataDetailsShown[r][11] =""+ cbD_Tax.getSelectedItem();
        else
        dataDetailsShown[r][11] ="0";
        try{
  
            if(cbD_Dis.getSelectedIndex()!=0){
            String s = ""+dataDetailsShown[r ][10];
            StringTokenizer st = new StringTokenizer(s , "-");
            while( st.hasMoreTokens() ){
                String ss = st.nextToken();
                StringBuffer sb = new StringBuffer(st.nextToken());
                sb.setLength(sb.length()-1);
                disD = Float.parseFloat(sb.toString())/100;
                }//end while
            }//end if
            else
                disD=0;
            if(cbD_Tax.getSelectedIndex()!=0){
            String s = ""+dataDetailsShown[r][11];
            StringTokenizer st = new StringTokenizer(s , "-");
            while( st.hasMoreTokens() ){
                String ss = st.nextToken();
                StringBuffer sb = new StringBuffer(st.nextToken());
                sb.setLength(sb.length()-1);
                taxD = Float.parseFloat(sb.toString())/100;
            }//end while
            }//end if
            else
                taxD=0;
        }//end try
        catch(NumberFormatException e){
System.out.println(e+"\n2061");
        }//end catch*/
        
        dataDetailsShown[r][12] = new Float(txtD_NtPr.getText());   
 }//end fillDetailsTbl
 
 private void generateCode(){
     try{
         accessDB();
         String ss = "SELECT * FROM SemaPhores WHERE TableName = 'PurchaseOrderHead'";
         ResultSet res = stat.executeQuery(ss);
         res.next();
         String s =""+ res.getString(3);
         ctr = Integer.parseInt(res.getString(4));
        if(s.equals("null"))
        txtCode.setText(""+ctr);
        else
        txtCode.setText(s+ctr);

         con.close();
     }//end try
     catch(Exception e){
         System.out.println(e+"\n2759");
     }//end catch
 }//end generateCode
 
  private void updateCode(){
      try{
          accessDB();
         ctr++;
         String ss1 = "UPDATE SemaPhores SET  MaxCtr = "+ctr+" WHERE TableName = 'PurchaseOrderHead' ";
         stat.executeUpdate(ss1);
          
          con.close();
      }//end try
      catch(Exception e){
         System.out.println(e+"\n2753");
     }//end catch
  }//end updateCode
  
    private void cancelPO(){
if(  rowSpecific==0   )
JOptionPane.showMessageDialog(this," The Database is currently empty.","Sorry!",JOptionPane.ERROR_MESSAGE); 
else
        if(clickH){
           if(dataShown[selrowH][4].toString().trim().equals("Y"))
JOptionPane.showMessageDialog(this," The selected P.O. is already CANCELLED. ","Sorry!",JOptionPane.ERROR_MESSAGE);                
           else
            try{
                accessDB();
                String ss = "UPDATE "+tableName+" SET Cancelled = 'Y' WHERE POM_No = '"+dataShown[selrowH][0]+"'";
                System.out.println(ss);
                stat.executeUpdate(ss);
                con.close();
            }//end try
            catch(Exception e){
                System.out.println(e+"\n2773");
            }//end catch
            clickH=false;
            tbPurHeader.clearSelection();
        }//end if
        else
JOptionPane.showMessageDialog(this," Select the P.O. No. you want to Cancel from the Table. ","Sorry!",JOptionPane.ERROR_MESSAGE); 
            
    }//end cancelPO
    
    private void searchPressed() {
        
        if(  rowShown==0   )
            JOptionPane.showMessageDialog(this," The Database is currently empty.","Sorry!",JOptionPane.ERROR_MESSAGE);
        else{
            pnlSearch.setVisible(true);
            cbSearch.setSelectedIndex(0);
            // index 0 corre3sponds to the 1st item of combo box
            cbFrDD.setEnabled(false);
            cbFrMM.setEnabled(false);
            cbFrYY.setEnabled(false);
            
            cbToDD.setEnabled(false);
            cbToMM.setEnabled(false);
            cbToYY.setEnabled(false);

            cbStoreList.setEnabled(false);
            cbSupplierList.setEnabled(false);
            
            btAdd.setEnabled(false);
            btModify.setEnabled(false);
            btSearch.setEnabled(false);
            btCancelPO.setEnabled(false);
            btExit.setEnabled(false);
        }//end else
    }//end searchPressed
    

    private void search() {
        list=new Vector(rowShown);
        if( "P.O.M.No.".equals( cbSearch.getSelectedItem() ) )
            sortStrings(dataShown,rowShown,0);
        else if("Date".equals( cbSearch.getSelectedItem() ) )
            sortStrings(dataShown,rowShown,1);
        else
            sortStrings(dataShown,rowShown,2);
        displaySearch();
        
        txtSearch.requestFocus();
        
        
    }//end search*/
    
    public void sortStrings(Object[][] rawData, int rows, int colNo) {
        
        try{
            list.removeAllElements();  
        } //try
        catch(Exception e){
            System.out.println(e);
        }//end catch
        //SORTS THE CONTENTS IN ASCENDING ORDER
        sorted=new String[rows];
        
        unsorted=new String[rows];
        
        
        for(j=0;j<rows;j++){
            unsorted[j]=((String)(rawData[j][colNo])).trim();
            sorted[j]=unsorted[j];
            
        }
        
        
        
        for(j=0;j<rows;j++){         //outer loop
            
            for(i=j+1;i<rows;i++){         //inner loop
                
                if(sorted[i].compareToIgnoreCase(sorted[j]) <0){
                    
                    String temp = sorted[j];
                    sorted[j]=sorted[i];
                    sorted[i]=temp;
                }//end if
            }//end inner loop
            
        }//end outer loop
        
        
        
        
        
        for(j=0;j<rows;j++){
            list.addElement(sorted[j]);
            listSearch.setListData(list);
            
        }
        
        
        
        
    }//end sortStrings*/
    
    public void displaySearch() {
        
        for(i=0;i<sorted.length;i++){
            
            if( sorted[i].regionMatches( true,0,key,0,key.length() ) ){
                
                listSearch.setSelectedValue(sorted[i],true);
                
                tbPurHeader.clearSelection();
                
                int index=searchElement(sorted[i],unsorted);
                
                tbPurHeader.changeSelection( index ,0,true,false);
                
                
                eleFound=true;
                break;
            }//end if*/
            
        }//end for
        
    if(!eleFound){
  JOptionPane.showMessageDialog(this," No match found. ","Sorry!",JOptionPane.ERROR_MESSAGE);    
  if(key.length()==1){
  listSearch.setSelectedIndex(0);
        tbPurHeader.changeSelection( 0 ,0,true,false);
  txtSearch.setText(""+listSearch.getSelectedValue());
  txtSearch.selectAll();
  txtSearch.requestFocus();
  key="";
  
  }//end if
  else{
sb= new StringBuffer(key);
sb.setLength(sb.length()-1);
key=sb.toString();    
displaySearch();
txtSearch.setSelectionStart(key.length());
  }//end else
    }//end if
        
        eleFound=false;
        
    }//end displaySearch*/
    
    private void searchCancelPressed() {
        cbSearch.setSelectedItem("P.O.M.No.");
        list.removeAllElements();
        pnlHome.setVisible(true);
        pnlSearch.setVisible(false);
      tbPurHeader.clearSelection();
        txtSearch.setText("");
        
            cbFrDD.setEnabled(true);
            cbFrMM.setEnabled(true);
            cbFrYY.setEnabled(true);
            
            cbToDD.setEnabled(true);
            cbToMM.setEnabled(true);
            cbToYY.setEnabled(true);

            cbStoreList.setEnabled(true);
            cbSupplierList.setEnabled(true);
            
            btAdd.setEnabled(true);
            btModify.setEnabled(true);
            btSearch.setEnabled(true);
            btCancelPO.setEnabled(true);
            btExit.setEnabled(true);
        
    }//end searchCancelled
    
    private int searchElement(String key, String[] a) {
        int indx=-1;
        for(i=0;i<a.length;i++){
            if( key.equals(a[i]) )
                indx=i;
        }//end for
        
        
        return indx;
    }//end searchElement
    
private String adjustDecimal(float f){

            StringBuffer sb = new StringBuffer(""+f);
            int k;
            for(k=1;k<=sb.length();k++)
            if(sb.charAt(sb.length()-k)=='.')
                break;
             
             if(k==sb.length())
                 sb.append(".00");
             else if(k==2)
                 sb.append("0");
                 else if(k==3)
                     ;
                 else if(k>3)
          sb=sb.delete(sb.length()-k+3,sb.length());
          String s = ""+sb;
          
          return s;
}//end adjustDecimal()
    private void fillAmts() {    
        float d_NtPr = lsQt*lsPr + pcQt*pcPr + blQt*blPr;
        d_NtPr -= disD*d_NtPr ; 
        d_NtPr += taxD*d_NtPr ; 
        
        txtD_NtPr.setText(adjustDecimal(d_NtPr));
              
        if(pnlHeaderShown){
                    grossTotal=0;
        netTotal=0;

       for(i=0;i<rowTblDetails;i++){
       
         grossTotal+=Float.parseFloat(""+dataAdd[i][12]);
    
       }//end for
        }//end if 
        
         txtGrossTotal.setText(adjustDecimal(grossTotal));
         netTotal=grossTotal+mscSl;       
       netTotal-=netTotal*disSl;
        netTotal+=netTotal*taxSl;
        
                    if(rowTblDetails!=0)
        txtNetTotal.setText( adjustDecimal(netTotal));
                    else
        txtNetTotal.setText("0.00");                
                
    }//end fillAmts
    
    private void checkForEmptyDataBase(String table){
        
     try{
            accessDB();
            String ss = "SELECT * FROM "+table;
            
            ResultSet res = stat.executeQuery(ss);
            
            if(!res.next()){
      JOptionPane.showMessageDialog(this," Table "+table+" in the Database has no entry.\n Make suitable entries in the Table to run this Form.  ","From Database:",JOptionPane.ERROR_MESSAGE);                    
       
            }//end if
            con.close();
        }//end try
        catch(Exception e){
        }//end catch*/        
        
    }//end  checkForEmptyDataBase()

private void addSave()throws SQLException{
        if(add){
            initialise();
            if(headerIsValid ){  
                System.out.println("1048");
                       initialiseD();                      
                try{
                accessDB();
                //con.setAutoCommit(false);
                
                stat.execute("BEGIN");
                
                //INSERT DETAILS
                              for(i=0;i<rowTblDetails;i++){
       ss = "INSERT INTO  PurchaseOrderDetails ( " +ss1[i]+ " ) VALUES  ( "+ss2[i]+" )";
       System.out.println(ss);
       stat.executeUpdate(ss); 

              }//end for
                
                //INSERT HEADER
                String ss3="INSERT INTO " + tableName + " (" +ss1H+ ") VALUES "+" ("+ss2H+")";
                System.out.println(ss3);
                stat.executeUpdate(ss3);
                add=false;
                
    //con.commit();
    stat.execute("COMMIT");                 
    con.close();
    
    updateCode();        

               }
                catch(java.sql.SQLException e){  
                            //con.rollback();
                    stat.execute("ROLLBACK");
                            //con.setAutoCommit(true);
                            con.close();
                            System.out.println("ERROR IN addSave(): 4004 :\t"+e);
             }//end catch
                     
            
    displayData();
           pnlHome.setVisible(true);
        pnlAddHeader.setVisible(false);
        add=false; 
    
            
            }//end if
        }//end if
        else
         saveDetailsMod();   
    
}//end addSave()
Object dataShown[][],dataSpecific[][],dataDateSpecific[][], dataDetailsShown[][];
String colHeadsD[],tableColHeads[],code="",date="",dlyDate="",terms="",sorted[],unsorted[],key="",cstRef="";
int colsD=0,i=0,j=0,selrowD=0,rowSpecific=0,rowDateSpecific=0,rowShown=0,h=0;
boolean eleFound=false,clickD=false,clickH=false,store=false,supplier = false;
StringBuffer sb;
Vector list;
Statement stat;
Connection con;
float mscSl=0,lsPr=0,pcPr=0,blPr=0,disD=0,taxD=0,netTotal=0,grossTotal=0,disSl=0,taxSl=0;
String tableName="PurchaseOrderHead",ss="",ss1[],ss2[],ssMod[],fromDate="",toDate="";    
String colsShownH[] = {"P.O. No."," Date"," Supplier"," Total Amt."," Cancelled"}, dbParam[],ss1H="",ss2H="",detDataMod[][];    
String colAdd[] = {"Sl. No.","Item Name","Group ID","UOM ID","Loose Qty.","Loose Price","Pack Qty.","Pack Price","Bulk Qty.","Bulk Price","Discount","Tax","Net Loose Price"};    
boolean add=false,activate=false,headerIsValid=false,detailsAreValid=false;
Object dataAdd[][]= new Object[50][colAdd.length];                
 java.util.Date curDate= new java.util.Date(); 
int rowTblDetails=0,selrowH=0,cols=0,lsQt=0,pcQt=0,blQt=0;
String addStore="",addDlyStore="",cur="",addSup="",poGrp="",authBy="",d_ItN[],d_GrId[],d_UomId[];
boolean editPressed = false,listSelectionChanged=false,pnlHeaderShown = false;
int ctr=0,listClicked2=0,deleteNo=0;
boolean removeDetails=false,deleteArrayOverflow=false;
String deleteDetails[] = new String[50],taxSlName="",disSlName="",taxSlCode="",disSlCode="",d_TaxCode[],d_DisCode[]; 

LinkDB StoreMaster = new LinkDB("StoreMaster"),SupplierMaster = new LinkDB("SupplierMaster"),Item_M = new LinkDB("Item_M");
}//end main

