/*
 * PurchaseReturns.java
 *
 * Created on January 22, 2003, 10:55 AM
 */

package view.transaction;   

import usefulClasses.databaseOperations.LinkDB;
import usefulClasses.generalUtilities.*;

import java.sql.*;
import java.awt.*;
import java.util.*;
import javax.swing.JOptionPane;

/**
 *
 * @author  Palash
 */
public class PurchaseReturnsPanel extends javax.swing.JPanel {
    

    /** Creates new form PurchaseReturns */
    public PurchaseReturnsPanel() {
        
        int row = semaPhores.queryRow("WHERE TableName = 'PurchaseReturns_H'");
        if(row==0)
            try{
                accessDB();
                String ss="Insert into SemaPhores (TableName,CtrName,MaxCtr) values('PurchaseReturns_H','',1)";
                stat.executeUpdate(ss);               
                }
            catch(Exception e){
                err.displayError("constructor",e);
            }
        
        authBy.checkEmpty();          
        curM.checkEmpty();    
        disM.checkEmpty();
        grnD.checkEmpty();
        grnH.checkEmpty();
        itemM.checkEmpty(); 
        storeM.checkEmpty();
        supM.checkEmpty();
        taxM.checkEmpty(); 
                
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        pnlHome = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btAdd = new javax.swing.JButton();
        btSearch = new javax.swing.JButton();
        btExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cbFrDD = new javax.swing.JComboBox();
        FillDate.fillDaysInCombo(cbFrDD);
        cbFrMM = new javax.swing.JComboBox();
        FillDate.fillMonthsInCombo(cbFrMM);
        cbFrYY = new javax.swing.JComboBox();
        FillDate.fillYearsInCombo(cbFrYY);

        jLabel41 = new javax.swing.JLabel();
        cbToDD = new javax.swing.JComboBox();
        FillDate.fillDaysInCombo(cbToDD);
        cbToDD.setSelectedItem("31");
        cbToMM = new javax.swing.JComboBox();
        FillDate.fillMonthsInCombo(cbToMM);
        cbToMM.setSelectedItem("12");
        cbToYY = new javax.swing.JComboBox();
        FillDate.fillYearsInCombo(cbToYY);
        cbToYY.setSelectedItem("2100");
        jLabel5 = new javax.swing.JLabel();
        cbStoreList = new javax.swing.JComboBox();
        cbStoreList.addItem("[All Items]");
        storeM.fillCombo(cbStoreList,"StoreName","WHERE Active = 'Y'","StoreName");
        jLabel7 = new javax.swing.JLabel();
        cbSupplierList = new javax.swing.JComboBox();
        cbSupplierList.addItem("[All Items]");
        supM.fillCombo(cbSupplierList,"supName","WHERE Active = 'Y'","supName");
        jLabel51 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHeader = new javax.swing.JTable();
        pnlAddHeader = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNetTotal = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        btSave = new javax.swing.JButton();
        btD_Cancel = new javax.swing.JButton();
        cbAddStore = new javax.swing.JComboBox();
        cbGRN_No = new javax.swing.JComboBox();
        cbGRN_No.addItem("[Select One]" );

        cbDO_DD = new javax.swing.JComboBox();
        FillDate.fillDaysInCombo(cbDO_DD);
        cbDO_MM = new javax.swing.JComboBox();
        FillDate.fillMonthsInCombo(cbDO_MM);
        cbDO_YY = new javax.swing.JComboBox();
        FillDate.fillYearsInCombo(cbDO_YY);
        jLabel91 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        txtD_LsQt = new javax.swing.JTextField();
        txtD_LsQt.setText("0");
        txtD_LsQt.selectAll();
        txtD_PcQt = new javax.swing.JTextField();
        txtD_PcQt.setText("0");
        txtD_PcQt.selectAll();
        txtD_BlQt = new javax.swing.JTextField();
        txtD_BlQt.setText("0");
        txtD_BlQt.selectAll();
        txtD_LsPr = new javax.swing.JTextField();
        txtD_LsPr.setText("0");
        txtD_LsPr.selectAll();
        txtD_PcPr = new javax.swing.JTextField();
        txtD_PcPr.setText("0");
        txtD_PcPr.selectAll();
        txtD_BlPr = new javax.swing.JTextField();
        txtD_BlPr.setText("0");
        txtD_BlPr.selectAll();
        txtD_NtPr = new javax.swing.JTextField();
        txtD_NtPr.setText("0");
        txtD_NtPr.selectAll();
        txtD_SlNo = new javax.swing.JTextField();
        txtD_SlNo.setText("1");
        tblDetails = new javax.swing.JTable();
        jLabel361 = new javax.swing.JLabel();
        cbD_Item = new javax.swing.JComboBox();
        txtD_ExpDate = new javax.swing.JTextField();
        txtD_SlNo.setText("1");
        txtD_CurName = new javax.swing.JTextField();
        txtD_SlNo.setText("1");
        jLabel271 = new javax.swing.JLabel();
        txtD_TotalLsQty = new javax.swing.JTextField();
        txtD_NtPr.setText("0");
        txtD_NtPr.selectAll();
        jLabel3611 = new javax.swing.JLabel();
        btD_Add = new javax.swing.JButton();
        btD_Edit = new javax.swing.JButton();
        btD_Remove = new javax.swing.JButton();
        btD_Finish = new javax.swing.JButton();
        btD_SaveEdit = new javax.swing.JButton();
        cbAddSupplier = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        txtGRN_Date = new javax.swing.JTextField();
        txtGRN_Date.setText("[Select a G.R.N. No.]");
        jLabel8 = new javax.swing.JLabel();
        cbAuthBy = new javax.swing.JComboBox();
        cbAuthBy.addItem("[Select One]");
        authBy.fillCombo(cbAuthBy,"EmpName","WHERE Active = 'Y'","EmpName");

        jLabel11 = new javax.swing.JLabel();
        jLabel221 = new javax.swing.JLabel();
        txtTotalLooseQty = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlHome.setForeground(new java.awt.Color(51, 51, 255));
        pnlHome.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                pnlHomeComponentHidden(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jLabel1.setForeground(new java.awt.Color(0, 51, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Purchase Returns");
        pnlHome.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 380, -1));

        btAdd.setIcon(new javax.swing.ImageIcon("C:\\NeoInventory\\images\\new5.gif"));
        btAdd.setMnemonic('A');
        btAdd.setText("Add");
        btAdd.setToolTipText(" ");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        pnlHome.add(btAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 510, 110, 27));

        btSearch.setIcon(new javax.swing.ImageIcon("C:\\NeoInventory\\images\\find5.gif"));
        btSearch.setMnemonic('S');
        btSearch.setText("Search");
        btSearch.setToolTipText(" ");
        pnlHome.add(btSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 510, 110, 27));

        btExit.setIcon(new javax.swing.ImageIcon("C:\\NeoInventory\\images\\delete1.jpg"));
        btExit.setMnemonic('X');
        btExit.setText("Exit");
        btExit.setToolTipText(" ");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        pnlHome.add(btExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(557, 510, 120, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 102));
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("From: ");
        pnlHome.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, -1, 20));

        cbFrDD.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbFrDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 50, 20));

        cbFrMM.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbFrMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 50, 20));

        cbFrYY.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbFrYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, 70, 20));

        jLabel41.setBackground(new java.awt.Color(255, 255, 102));
        jLabel41.setForeground(new java.awt.Color(0, 0, 153));
        jLabel41.setText("To:");
        pnlHome.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, -1, 20));

        cbToDD.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbToDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 50, 20));

        cbToMM.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbToMM, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 50, 20));

        cbToYY.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbToYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 110, 70, 20));

        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setText("Store:");
        pnlHome.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, -1, 20));

        cbStoreList.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbStoreList, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 80, 210, 20));

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel7.setForeground(new java.awt.Color(0, 51, 204));
        jLabel7.setText("      DD      /      MM    /     Y YYY");
        pnlHome.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 65, 170, 20));

        cbSupplierList.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlHome.add(cbSupplierList, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 210, 20));

        jLabel51.setForeground(new java.awt.Color(0, 0, 153));
        jLabel51.setText("Supplier:");
        pnlHome.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, -1, 20));

        tblHeader.setToolTipText("");
        tblHeader.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        fillHeaderTbl();
        jScrollPane1.setViewportView(tblHeader);

        pnlHome.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 500, 300));

        add(pnlHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 750));

        pnlAddHeader.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlAddHeader.setVisible(false);
        pnlAddHeader.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlAddHeaderComponentShown(evt);
            }
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                pnlAddHeaderComponentHidden(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Code *");
        pnlAddHeader.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 50, 20));

        txtCode.setBackground(new java.awt.Color(204, 255, 153));
        txtCode.setEditable(false);
        pnlAddHeader.add(txtCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 100, -1));

        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("P.R. Date*");
        pnlAddHeader.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 70, 20));

        txtNetTotal.setBackground(new java.awt.Color(204, 204, 255));
        txtNetTotal.setEditable(false);
        txtNetTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pnlAddHeader.add(txtNetTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 470, 220, -1));

        jLabel10.setForeground(new java.awt.Color(0, 0, 153));
        jLabel10.setText("Store *");
        pnlAddHeader.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 50, 20));

        jLabel13.setForeground(new java.awt.Color(0, 0, 153));
        jLabel13.setText("G.R.N.  Date");
        pnlAddHeader.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 130, 70, 20));

        jLabel14.setForeground(new java.awt.Color(0, 0, 153));
        jLabel14.setText("G.R.N.  No.  ");
        pnlAddHeader.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, -1, 20));

        jLabel22.setForeground(new java.awt.Color(0, 0, 153));
        jLabel22.setText("Total Loose Qty.");
        pnlAddHeader.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 440, -1, 20));

        btSave.setIcon(new javax.swing.ImageIcon("C:\\NeoInventory\\images\\save1.gif"));
        btSave.setMnemonic('S');
        btSave.setText("Save");
        btSave.setToolTipText(" ");
        btSave.setEnabled(false);
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        pnlAddHeader.add(btSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 90, 27));

        btD_Cancel.setIcon(new javax.swing.ImageIcon("C:\\NeoInventory\\images\\back1.jpg"));
        btD_Cancel.setMnemonic('B');
        btD_Cancel.setText("Back");
        btD_Cancel.setToolTipText(" ");
        btD_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_CancelActionPerformed(evt);
            }
        });

        pnlAddHeader.add(btD_Cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 440, 90, -1));

        cbAddStore.setBackground(new java.awt.Color(204, 255, 255));
        cbAddStore.setFont(new java.awt.Font("Dialog", 0, 12));
        cbAddStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAddStoreActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbAddStore, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, 180, 20));

        cbGRN_No.setBackground(new java.awt.Color(204, 255, 255));
        cbGRN_No.setFont(new java.awt.Font("Dialog", 0, 12));
        cbGRN_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbGRN_NoActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbGRN_No, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 130, 180, 20));

        cbDO_DD.setBackground(new java.awt.Color(204, 255, 255));
        cbDO_DD.setFont(new java.awt.Font("Dialog", 0, 12));

        cbDO_DD.setSelectedIndex(curDate.getDate()-1);
        pnlAddHeader.add(cbDO_DD, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 70, 50, 20));

        cbDO_MM.setBackground(new java.awt.Color(204, 255, 255));
        cbDO_MM.setFont(new java.awt.Font("Dialog", 0, 12));

        cbDO_MM.setSelectedIndex(curDate.getMonth());

        pnlAddHeader.add(cbDO_MM, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 70, 50, 20));

        cbDO_YY.setBackground(new java.awt.Color(204, 255, 255));
        cbDO_YY.setFont(new java.awt.Font("Dialog", 0, 12));

        cbDO_YY.setSelectedIndex( curDate.getYear()-50 );
        pnlAddHeader.add(cbDO_YY, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 80, 20));

        jLabel91.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel91.setForeground(new java.awt.Color(51, 51, 255));
        jLabel91.setText("      DD      /      MM    /     Y YYY");
        pnlAddHeader.add(jLabel91, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, 180, 30));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder(null, "Purchase Returns Details", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 18), new java.awt.Color(0, 0, 204)));
        jScrollPane3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane3.setViewportBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 1, 1), new java.awt.Color(51, 51, 255)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel24.setForeground(new java.awt.Color(0, 0, 153));
        jLabel24.setText("Sl. No.");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 40, -1));

        jLabel25.setForeground(new java.awt.Color(0, 0, 153));
        jLabel25.setText("Item Name");
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, -1, -1));

        jLabel26.setForeground(new java.awt.Color(0, 0, 153));
        jLabel26.setText("Batch No.");
        jPanel1.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, -1, -1));

        jLabel27.setForeground(new java.awt.Color(0, 0, 153));
        jLabel27.setText("Expiry Date");
        jPanel1.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, -1));

        jLabel28.setForeground(new java.awt.Color(0, 0, 153));
        jLabel28.setText("Loose Qty.");
        jPanel1.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, -1, -1));

        jLabel29.setForeground(new java.awt.Color(0, 0, 153));
        jLabel29.setText("Loose Price");
        jPanel1.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, -1, -1));

        jLabel30.setForeground(new java.awt.Color(0, 0, 153));
        jLabel30.setText("Pack Qty.");
        jPanel1.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, -1, -1));

        jLabel32.setForeground(new java.awt.Color(0, 0, 153));
        jLabel32.setText("Pack Price");
        jPanel1.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 10, 70, -1));

        jLabel33.setForeground(new java.awt.Color(0, 0, 153));
        jLabel33.setText("Bulk Qty.");
        jPanel1.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 10, -1, -1));

        jLabel31.setForeground(new java.awt.Color(0, 0, 153));
        jLabel31.setText("Bulk Price ");
        jPanel1.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 10, -1, -1));

        txtD_LsQt.setBackground(new java.awt.Color(204, 255, 255));
        txtD_LsQt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_LsQt.setNextFocusableComponent(txtD_PcQt);
        txtD_LsQt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_LsQtFocusLost(evt);
            }
        });

        jPanel1.add(txtD_LsQt, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 93, 20));

        txtD_PcQt.setBackground(new java.awt.Color(204, 255, 255));
        txtD_PcQt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_PcQt.setNextFocusableComponent(txtD_BlQt);
        txtD_PcQt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_PcQtFocusLost(evt);
            }
        });

        jPanel1.add(txtD_PcQt, new org.netbeans.lib.awtextra.AbsoluteConstraints(653, 30, 90, 20));

        txtD_BlQt.setBackground(new java.awt.Color(204, 255, 255));
        txtD_BlQt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtD_BlQt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtD_BlQtFocusLost(evt);
            }
        });

        jPanel1.add(txtD_BlQt, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 30, 97, 20));

        txtD_LsPr.setBackground(new java.awt.Color(204, 255, 153));
        txtD_LsPr.setEditable(false);
        txtD_LsPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtD_LsPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 30, 95, 20));

        txtD_PcPr.setBackground(new java.awt.Color(204, 255, 153));
        txtD_PcPr.setEditable(false);
        txtD_PcPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtD_PcPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 30, 93, 20));

        txtD_BlPr.setBackground(new java.awt.Color(204, 255, 153));
        txtD_BlPr.setEditable(false);
        txtD_BlPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtD_BlPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(925, 30, 95, 20));

        txtD_NtPr.setBackground(new java.awt.Color(204, 255, 153));
        txtD_NtPr.setEditable(false);
        txtD_NtPr.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtD_NtPr, new org.netbeans.lib.awtextra.AbsoluteConstraints(1108, 30, 89, 20));

        txtD_SlNo.setBackground(new java.awt.Color(204, 255, 153));
        txtD_SlNo.setEditable(false);
        txtD_SlNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(txtD_SlNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 93, 20));

        tblDetails.setSelectionBackground(new java.awt.Color(204, 255, 255));
        changeDetailsTbl();
        jPanel1.add(tblDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 1190, -1));

        jLabel361.setForeground(new java.awt.Color(0, 0, 153));
        jLabel361.setText("Net Loose Qty.");
        jPanel1.add(jLabel361, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 10, 90, -1));

        cbD_Item.setBackground(new java.awt.Color(204, 255, 255));
        cbD_Item.setFont(new java.awt.Font("Dialog", 1, 10));
        cbD_Item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbD_ItemActionPerformed(evt);
            }
        });

        jPanel1.add(cbD_Item, new org.netbeans.lib.awtextra.AbsoluteConstraints(102, 30, 180, 20));

        txtD_ExpDate.setBackground(new java.awt.Color(204, 255, 153));
        txtD_ExpDate.setEditable(false);
        txtD_ExpDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(txtD_ExpDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 30, 97, 20));

        txtD_CurName.setBackground(new java.awt.Color(204, 255, 153));
        txtD_CurName.setEditable(false);
        txtD_CurName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(txtD_CurName, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 30, 93, 20));

        jLabel271.setForeground(new java.awt.Color(0, 0, 153));
        jLabel271.setText("Currency");
        jPanel1.add(jLabel271, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 10, -1, -1));

        txtD_TotalLsQty.setBackground(new java.awt.Color(204, 255, 153));
        txtD_TotalLsQty.setEditable(false);
        txtD_TotalLsQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(txtD_TotalLsQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 30, 89, 20));

        jLabel3611.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3611.setText("Net Price");
        jPanel1.add(jLabel3611, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 10, 60, -1));

        jScrollPane3.setViewportView(jPanel1);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 759, 160));

        btD_Add.setIcon(new javax.swing.ImageIcon("C:\\NeoInventory\\images\\add1.gif"));
        btD_Add.setMnemonic('A');
        btD_Add.setText("Add Item");
        btD_Add.setToolTipText(" ");
        btD_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_AddActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 190, 120, -1));

        btD_Edit.setIcon(new javax.swing.ImageIcon("C:\\NeoInventory\\images\\edit.gif"));
        btD_Edit.setMnemonic('E');
        btD_Edit.setText("Edit Item");
        btD_Edit.setToolTipText(" ");
        btD_Edit.setVisible(false);
        jPanel2.add(btD_Edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 190, 120, -1));

        btD_Remove.setIcon(new javax.swing.ImageIcon("C:\\NeoInventory\\images\\minus3.gif"));
        btD_Remove.setMnemonic('R');
        btD_Remove.setText("Remove Item");
        btD_Remove.setToolTipText(" ");
        btD_Remove.setEnabled(false);
        jPanel2.add(btD_Remove, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 190, 140, -1));

        btD_Finish.setIcon(new javax.swing.ImageIcon("C:\\NeoInventory\\images\\finish2.gif"));
        btD_Finish.setMnemonic('F');
        btD_Finish.setText("Finish");
        btD_Finish.setToolTipText(" ");
        btD_Finish.setEnabled(false);
        btD_Finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btD_FinishActionPerformed(evt);
            }
        });

        jPanel2.add(btD_Finish, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 190, 120, 27));

        btD_SaveEdit.setIcon(new javax.swing.ImageIcon("C:\\NeoInventory\\images\\save2.gif"));
        btD_SaveEdit.setMnemonic('V');
        btD_SaveEdit.setText("Save Edit");
        btD_SaveEdit.setToolTipText(" ");
        btD_SaveEdit.setVisible(false);
        jPanel2.add(btD_SaveEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 190, 120, -1));

        pnlAddHeader.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 780, 230));

        cbAddSupplier.setBackground(new java.awt.Color(204, 255, 255));
        cbAddSupplier.setFont(new java.awt.Font("Dialog", 0, 12));
        cbAddSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAddSupplierActionPerformed(evt);
            }
        });

        pnlAddHeader.add(cbAddSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 190, 20));

        jLabel12.setForeground(new java.awt.Color(0, 0, 153));
        jLabel12.setText("Supplier*");
        pnlAddHeader.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 100, 60, 20));

        txtGRN_Date.setBackground(new java.awt.Color(204, 255, 153));
        txtGRN_Date.setEditable(false);
        txtGRN_Date.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pnlAddHeader.add(txtGRN_Date, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 130, 190, 20));

        jLabel8.setForeground(new java.awt.Color(0, 0, 153));
        jLabel8.setText("Auth. By *");
        pnlAddHeader.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 70, -1, -1));

        cbAuthBy.setBackground(new java.awt.Color(204, 255, 255));
        cbAuthBy.setFont(new java.awt.Font("Dialog", 0, 12));
        pnlAddHeader.add(cbAuthBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 70, 190, 20));

        jLabel11.setFont(new java.awt.Font("Bookman Old Style", 1, 24));
        jLabel11.setForeground(new java.awt.Color(0, 51, 204));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Purchase Returns");
        pnlAddHeader.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 380, -1));

        jLabel221.setForeground(new java.awt.Color(0, 0, 153));
        jLabel221.setText("Total Amount");
        pnlAddHeader.add(jLabel221, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 470, -1, 20));

        txtTotalLooseQty.setBackground(new java.awt.Color(204, 204, 255));
        txtTotalLooseQty.setEditable(false);
        txtTotalLooseQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalLooseQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalLooseQtyActionPerformed(evt);
            }
        });

        pnlAddHeader.add(txtTotalLooseQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 440, 220, -1));

        add(pnlAddHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 750));

    }//GEN-END:initComponents

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
try{
    updateDatabase();
}
catch(Exception e){
    System.out.println("1865\t"+e);
}

    }//GEN-LAST:event_btSaveActionPerformed

    private void btD_FinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_FinishActionPerformed
btSave.setEnabled(true);
btD_Add.setEnabled(false);
btD_Edit.setEnabled(false);
btD_Remove.setEnabled(false);
btD_Finish.setEnabled(false);

    }//GEN-LAST:event_btD_FinishActionPerformed

    private void txtTotalLooseQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalLooseQtyActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_txtTotalLooseQtyActionPerformed

    private void btD_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_AddActionPerformed
        if(rowD_Shown>=50){
            btD_Add.setEnabled(false);
            JOptionPane.showMessageDialog(this,"You are not allowed to add more than 50 Items in a single Delivery Order. \nIf you want to add more, create a new Delivery Order.","Error!",JOptionPane.INFORMATION_MESSAGE);
        }//end if
        else{//main else
            
            if(checkDetailsValidation()){
                rowD_Shown ++ ;
                changeDetailsTbl();
                txtD_SlNo.setText("" + (rowD_Shown+1));
                resetDetails();
                if(!deleteArrayOverflow)
                    btD_Remove.setEnabled(true);
                btD_Finish.setEnabled(true);
                if(rowD_Shown>0)
                    btD_Edit.setEnabled(true);
            }//end if
        }//end main else
        

    }//GEN-LAST:event_btD_AddActionPerformed

    private void txtD_BlQtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_BlQtFocusLost
ret_blQt=txtValid.checkIntNumber(txtD_BlQt);
if(ret_blQt>blQt){
    ret_blQt=0;
    txtD_BlQt.setText(""+blQt);
    txtD_BlQt.selectAll();
    
    JOptionPane.showMessageDialog(this,"Enter a number lesser than or equal to the quantity recieved","Your entry is more than the quantity ordered!",JOptionPane.INFORMATION_MESSAGE);
}
else
    fillAmts();
    

    }//GEN-LAST:event_txtD_BlQtFocusLost

    private void txtD_PcQtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_PcQtFocusLost
ret_pcQt=txtValid.checkIntNumber(txtD_PcQt);
 
 if(ret_pcQt>pcQt){
     ret_pcQt=0;
    txtD_PcQt.setText(""+pcQt);
    txtD_PcQt.selectAll();    
    JOptionPane.showMessageDialog(this,"Enter a number lesser than or equal to the quantity recieved","Your entry is more than the quantity ordered!",JOptionPane.INFORMATION_MESSAGE);

}
 else
        fillAmts();

    }//GEN-LAST:event_txtD_PcQtFocusLost

    private void txtD_LsQtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtD_LsQtFocusLost

ret_lsQt=txtValid.checkIntNumber(txtD_LsQt);
    
if(ret_lsQt>lsQt ){
    ret_lsQt=0;
    txtD_LsQt.setText(""+lsQt);
    txtD_LsQt.selectAll();    
    JOptionPane.showMessageDialog(this,"Enter a number lesser than or equal to the quantity recieved","Your entry is more than the quantity ordered!",JOptionPane.INFORMATION_MESSAGE);

}
else
    fillAmts();

    }//GEN-LAST:event_txtD_LsQtFocusLost

    private void cbD_ItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbD_ItemActionPerformed
if(cbD_Item.getSelectedIndex()>0 && (!loadingCombo)){//main if
    String itemCode="",batchNo="";
    
    StringTokenizer st = new StringTokenizer(""+cbD_Item.getSelectedItem()," - "); 
    itemCode=st.nextToken();
    batchNo=st.nextToken();
    //to find if the current selection is already there in the table
    boolean inTable = false;
    if(rowD_Shown >= 1 && (!editPressed )){
        for(int i=0;i<rowD_Shown;i++){
            if(dataD_Shown[i][1].equals(itemCode) && dataD_Shown[i][2].equals(batchNo)){
                inTable=true;
                break;
            }
        }//end for
    }
    if(inTable)
        JOptionPane.showMessageDialog(this,"You have already selected this Item for the given Batch No.!","Select another Item.",JOptionPane.INFORMATION_MESSAGE);                        
    else{
    
    itemCode=""+itemM.queryOneEle("itemNo","WHERE itemName = '"+itemCode+"'");

    //to find packPerBulk and loosePerPack from specific store table
       String store_cond = "WHERE ItemNo = '"+itemCode+"'  AND BatchNo ='"+batchNo+"'";
       packPerBulk = Integer.parseInt(""+storeSpecific.queryOneEle("PackperBulk",store_cond));
       loosePerPack = Integer.parseInt(""+storeSpecific.queryOneEle("LoosePerPack",store_cond));

    
    String cond = "WHERE GRN_No = '"+cbGRN_No.getSelectedItem()+"' AND Item_Code = '"+itemCode+"' AND Batch_No = '"+batchNo+"'";
    //to extract data from the GRN details table
    Object[] details = new Object[10];
    String[] cols = new String[]{"Expiry_Date","Curr_ID","Qty_Loose","CP_Loose","Qty_Pack","CP_Pack","Qty_Bulk","CP_Bulk","Disc_Perc","Tax_Perc"};
    details = grnD.queryMulEle(cols,cond);
    details[1] = curM.queryOneEle("CM_Name","WHERE CM_ID = '"+details[1]+"'"); 
    
    txtD_ExpDate.setText(""+details[0]);
    txtD_CurName.setText(""+details[1]);
    txtD_LsQt.setText(""+details[2]);
    txtD_LsPr.setText(""+details[3]);
    txtD_PcQt.setText(""+details[4]);
    txtD_PcPr.setText(""+details[5]);
    txtD_BlQt.setText(""+details[6]);
    txtD_BlPr.setText(""+details[7]);
    
    try{
        lsQt = Long.parseLong(""+details[2]);
        pcQt = Long.parseLong(""+details[4]);
        blQt = Long.parseLong(""+details[6]);
        lsPr = Double.parseDouble(""+details[3]);
        pcPr = Double.parseDouble(""+details[5]);
        blPr = Double.parseDouble(""+details[7]);
    }
    catch(java.lang.NumberFormatException e){
        err.displayError("cbD_ItemActionPerformed",e);
    }
    
    txtD_LsQt.selectAll();
    txtD_LsQt.requestFocus();
    txtD_PcQt.selectAll();
    txtD_BlQt.selectAll();
    }//end else  
    
}//end main if
else
    resetDetails();
    }//GEN-LAST:event_cbD_ItemActionPerformed

    private void cbGRN_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbGRN_NoActionPerformed

if(cbGRN_No.getSelectedIndex()>0 && (!loadingCombo)){//main if
int k=0;
    if(add)
        k = JOptionPane.showConfirmDialog(this,"You are allowed to select the G.R.N. No. only once.           \nAre you sure your selection is correct?","Confirm your selection....",JOptionPane.YES_NO_OPTION);

if(k==0){
    String cond = "WHERE GRN_NO = '"+cbGRN_No.getSelectedItem()+"'";
    
    txtGRN_Date.setText(""+grnH.queryOneEle("GRN_Date",cond+" AND Cancelled = 'N'"));
    
    int row = grnD.queryRow(cond);
    Object[][] name_batch = new Object[row][2];
    name_batch = grnD.queryMulCols(row,new String[]{"Item_Code","Batch_No"},cond);
    
    for(int i=0;i<row;i++){
        name_batch[i][0] = itemM.queryOneEle("itemName","WHERE itemNo = '"+name_batch[i][0]+"'");
        cbD_Item.addItem(name_batch[i][0]+" - "+name_batch[i][1]);
    }//end for
    
    cbGRN_No.setEnabled(false);
    
}//end if(k==0)
else
    cbGRN_No.setSelectedIndex(0);
    
}//end main if
    }//GEN-LAST:event_cbGRN_NoActionPerformed

    private void cbAddSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAddSupplierActionPerformed
if((!cbAddStore.isPopupVisible()) && add &&(!loadingCombo))
        fill_GRN_Nos("cbAddSupplier");//*/

    }//GEN-LAST:event_cbAddSupplierActionPerformed

    private void cbAddStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAddStoreActionPerformed
if((!cbAddSupplier.isPopupVisible()) && add &&(!loadingCombo))
        fill_GRN_Nos("cbAddStore");//*/

    }//GEN-LAST:event_cbAddStoreActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
this.setVisible(false);
    }//GEN-LAST:event_btExitActionPerformed

    private void btD_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btD_CancelActionPerformed
        addCancelPressed();
    }//GEN-LAST:event_btD_CancelActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
addPressed();
    }//GEN-LAST:event_btAddActionPerformed

    private void pnlHomeComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlHomeComponentHidden
fillHeaderTbl();  
    }//GEN-LAST:event_pnlHomeComponentHidden

    private void pnlAddHeaderComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlAddHeaderComponentHidden
pnlHeaderShown = false;
removeDetails=false;
deleteArrayOverflow=false;
deleteNo=0;
        for(int i=0;i<rowD_Shown;i++)
            for(int j=0;j<COL_D_SHOWN;j++)
               dataD_Total[i][j]="";
                resetDetails(); 
                rowD_Shown=0;
                 changeDetailsTbl();    
                 
         fillHeaderTbl();           

    }//GEN-LAST:event_pnlAddHeaderComponentHidden

    private void pnlAddHeaderComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlAddHeaderComponentShown
        
        pnlHeaderShown = true;
        detailsEditable();
        btSave.setEnabled(false);
        btD_Add.setVisible(true);
        btD_Add.setEnabled(true);

      btD_Finish.setVisible(true);
      btD_Finish.setEnabled(false);
      btD_Remove.setVisible(true);
      btD_Remove.setEnabled(false);

 
        if(add){
            
loadingCombo=true;            
ComboMnpl.removeComboElements(cbAddStore,"[Select One]");
storeM.fillCombo(cbAddStore,"StoreName","WHERE Active = 'Y'","StoreName"); 
ComboMnpl.removeComboElements(cbAddSupplier,"[Select One]");
supM.fillCombo(cbAddSupplier,"supName","WHERE Active = 'Y'","supName");
ComboMnpl.removeComboElements(cbGRN_No,"[Select One]");
ComboMnpl.removeComboElements(cbD_Item,"[Select One]");
loadingCombo=false;
            
generateCode();
resetDetails();
resetHeader();
headerEditable();

                     
}//end if
        else{
            headerUnEditable();
                                    btD_Remove.setEnabled(true);
if(rowD_Shown==1)
btD_Remove.setEnabled(false);                                    
            
        }//end else


    }//GEN-LAST:event_pnlAddHeaderComponentShown

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    /*public static void main(String args[]) {
        new PurchaseReturns().show();
    }*/

    public void accessDB() {
        try {
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            con=DriverManager.getConnection("jdbc:odbc:sha");
            stat=con.createStatement();
        }
        catch(Exception e) {
            err.displayError("accessDB",e);
        }
    }    

    private void fill_GRN_Nos(String x) {
        
        // the flag storeSelected=true if cbAddStore is selected
        boolean storeSelected = false;
        if(x.equals("cbAddStore"))
            storeSelected=true;
        
        if(storeSelected){ //if store combo is selected
            if( cbAddSupplier.isEnabled() && cbAddStore.getSelectedIndex()>0){//if store combo is selected before the customer combo
                Object storeId = storeM.queryOneEle(2,"WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'");
                String cond = "WHERE Store_ID = '"+storeId+"' AND Cancelled = 'N'";
                int r = grnH.queryRow(cond);
                if(r==0 && add){
                    JOptionPane.showMessageDialog(this,"There is no G.R.N. corresponding to the selected Store.\nPlease Select another Store.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                    cbAddStore.setSelectedIndex(0);
                }
                else {
                    int k=0;
                    if(add)
                        k = JOptionPane.showConfirmDialog(this,"You are allowed to select the Store Name only once.           \nAre you sure your selection is correct?","Confirm your selection....",JOptionPane.YES_NO_OPTION);
                    if(k==0){
                        storeTblSpecific="Store_"+storeId;
                        ComboMnpl.removeComboElements(cbAddSupplier,"[Select One]");
                        Object[] sup = new Object[r];
                        sup = grnH.query1Col(r,"Supplier_ID",true,cond);
                        for(int i=0;i<r;i++)
                            if(!sup[i].equals("null"))
                                cbAddSupplier.addItem(supM.queryOneEle("supName","Where SupCode = '"+sup[i]+"'"));
                        
                        cbAddStore.setEnabled(false);
                    }//end if(k==0)
                    else//if k==1
                        cbAddStore.setSelectedIndex(0);
                }//end else
            }
            else if((!cbAddSupplier.isEnabled()) && cbAddStore.getSelectedIndex()>0){
                
                Object storeId = storeM.queryOneEle(2,"WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'");
                Object supId = supM.queryOneEle("SupCode","WHERE supName = '"+cbAddSupplier.getSelectedItem()+"'");
                
                String cond = "WHERE Store_ID = '"+storeId+"' AND Supplier_ID = '"+supId+"' AND Cancelled = 'N'";
                int r = grnH.queryRow(cond);
                if(r==0 && add){
                    JOptionPane.showMessageDialog(this,"There is no G.R.N. corresponding to the selected Store and Customer.\nPlease Select another Store.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                    cbAddStore.setSelectedIndex(0);
                }
                else {
                    int k=0;
                    if(add)
                        k = JOptionPane.showConfirmDialog(this,"You are allowed to select the Store Name only once.           \nAre you sure your selection is correct?","Confirm your selection....",JOptionPane.YES_NO_OPTION);
                    if(k==0){
                        Object grnNo[] = new Object[r];
                        grnNo = grnH.query1Col(r,"GRN_No",false,cond);
                        
                        try{
                            for(int i=0;i< r;i++)
                                cbGRN_No.addItem(grnNo[i]);
                        }//end try
                        catch(Exception e){
                            err.displayError("fill_GRN_Nos",e);
                        }
                        
                        cbAddStore.setEnabled(false);
                        
                        storeSpecific = new LinkDB("Store_"+storeId);
                        
                    }//end if(k==0)
                    else//if k==1
                        cbAddStore.setSelectedIndex(0);
                }//end else
                
            }
        }
        else{//if customer combo is selected
            if(cbAddStore.isEnabled() && cbAddSupplier.getSelectedIndex()>0){//if customer combo is selected before the store combo
                Object supId = supM.queryOneEle("SupCode","WHERE supName = '"+cbAddSupplier.getSelectedItem()+"'");
                String cond = "WHERE Supplier_ID = '"+supId+"' AND Cancelled = 'N'";
                int r = grnH.queryRow(cond);
                if(r==0 && add){
                    JOptionPane.showMessageDialog(this,"There is no G.R.N.corresponding to the selected Customer.\nPlease Select another Customer.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                    cbAddSupplier.setSelectedIndex(0);
                }
                else {
                    int k=0;
                    if(add)
                        k = JOptionPane.showConfirmDialog(this,"You are allowed to select the Customer Name only once.           \nAre you sure your selection is correct?","Confirm your selection....",JOptionPane.YES_NO_OPTION);
                    if(k==0){
                        ComboMnpl.removeComboElements(cbAddStore,"[Select One]");
                        Object[] store = new Object[r];
                        store = grnH.query1Col(r,"Store_ID",true,cond);
                        for(int i=0;i<r;i++)
                            if(!store[i].equals("null"))
                                cbAddStore.addItem(storeM.queryOneEle(3,"Where StoreID = '"+store[i]+"'"));
                        
                        cbAddSupplier.setEnabled(false);
                    }//end if(k==0)
                    else//if k==1
                        cbAddSupplier.setSelectedIndex(0);
                }//end else
                
            }
            else if((!cbAddStore.isEnabled()) && cbAddSupplier.getSelectedIndex()>0){
                
                Object storeId = storeM.queryOneEle(2,"WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'");
                Object supId = supM.queryOneEle("SupCode","WHERE supName = '"+cbAddSupplier.getSelectedItem()+"'");
                
                String cond = "WHERE Store_ID = '"+storeId+"' AND Supplier_ID = '"+supId+"' AND Cancelled = 'N'";
                int r = grnH.queryRow(cond);
                if(r==0 && add){
                    JOptionPane.showMessageDialog(this,"There is no G.R.N. corresponding to the selected Store and Customer.\nPlease Select another Customer.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
                    cbAddSupplier.setSelectedIndex(0);
                }
                else {
                    int k=0;
                    if(add)
                        k = JOptionPane.showConfirmDialog(this,"You are allowed to select the Customer Name only once.           \nAre you sure your selection is correct?","Confirm your selection....",JOptionPane.YES_NO_OPTION);
                    if(k==0){
                        Object grnNo[] = new Object[r];
                        grnNo = grnH.query1Col(r,"GRN_No",false,cond);
                        
                        try{
                            for(int i=0;i< r;i++)
                                cbGRN_No.addItem(grnNo[i]);
                        }//end try
                        catch(Exception e){
                            err.displayError("fill_GRN_Nos",e);
                        }
                        
                        cbAddSupplier.setEnabled(false);
                        
                        storeSpecific = new LinkDB("Store_"+storeId);
                       
                    }//end if(k==0)
                    else//if k==1
                        cbAddSupplier.setSelectedIndex(0);
                }//end else
                
            }
        }
    }
    
    private void addPressed() {
        
        add=true;
        pnlHome.setVisible(false);
        pnlAddHeader.setVisible(true);
    }
    
    private void changeDetailsTbl() {
        
        if(rowD_Shown == 0)
            txtD_SlNo.setText("1");
        
        dataD_Shown = new Object[rowD_Shown][COL_D_SHOWN];
        for(int i=0;i<(rowD_Shown -1);i++)
            for(int j=0;j<COL_D_SHOWN;j++)
                dataD_Shown[i][j] = dataD_Total[i][j];
        if(rowD_Shown != 0 )
            fillDetailsTbl(rowD_Shown-1);
        
        showDetailsTbl();
        
    }
    
    private void resetDetails() {
     
    cbD_Item.setEnabled(true);
    cbD_Item.setSelectedIndex(0);
    txtD_ExpDate.setText("");
    txtD_CurName.setText("");
    txtD_LsQt.setText("0");
    txtD_LsPr.setText("0");
    txtD_PcQt.setText("0");
    txtD_PcPr.setText("0");
    txtD_BlQt.setText("0");
    txtD_BlPr.setText("0");
    txtD_TotalLsQty.setText("0");
    txtD_NtPr.setText("0");
    
    lsQt=0;lsPr=0;pcQt=0;pcPr=0;blQt=0;blPr=0;
    ret_lsQt=0;ret_pcQt=0;ret_blQt=0;
        
    }
    
    private void fillDetailsTbl(int r) {
        dataD_Shown[r][0] = ""+txtD_SlNo.getText();
        
    String itemName="",batchNo="";
    
    StringTokenizer st = new StringTokenizer(""+cbD_Item.getSelectedItem()," - "); 
    itemName=st.nextToken();
    batchNo=st.nextToken();
        dataD_Shown[r][1] = itemName;
        dataD_Shown[r][2] = batchNo;
        dataD_Shown[r][3] =""+txtD_ExpDate.getText();
        dataD_Shown[r][4] =""+txtD_CurName.getText();
        dataD_Shown[r][5] =""+txtD_LsQt.getText();
        dataD_Shown[r][6] =""+txtD_LsPr.getText();
        dataD_Shown[r][7] =""+txtD_PcQt.getText();
        dataD_Shown[r][8] = txtD_PcPr.getText();
        dataD_Shown[r][9] = txtD_BlQt.getText();
        dataD_Shown[r][10] =txtD_BlPr.getText();
        dataD_Shown[r][11] =txtD_TotalLsQty.getText();
        dataD_Shown[r][12] =txtD_NtPr.getText();
    }
    
    private void showDetailsTbl() {
        
        for(int i=0;i<rowD_Shown;i++)
            for(int j=0;j<COL_D_SHOWN;j++)
                try{
                    if(j==6||j==8||j==10||j==12)
                        dataD_Shown[i][j]=new Double(""+dataD_Shown[i][j]);
                    else if(j==5||j==7||j==9||j==11)
                        dataD_Shown[i][j]=new Integer(""+dataD_Shown[i][j]);
                    
                }
                catch(Exception e){
                    err.displayError("showDetailsTbl()",e);
                }
        try{
            
        tblDetails.setModel(new javax.swing.table.DefaultTableModel(
        dataD_Shown,
        new String [COL_D_SHOWN] ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Long.class, java.lang.Double.class, java.lang.Long.class, java.lang.Double.class, java.lang.Long.class, java.lang.Double.class, java.lang.Long.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        //end table model
        
        }//end try
        catch(Exception e){
            err.displayError("showDetailsTbl()",e);
        }//end catch
        
        dataD_Total = dataD_Shown;
        
    }
    
    private void showHeaderTbl() {
        for(int i=0;i<rowH_Shown;i++)
            dataH_Shown[i][5]=new Double(""+dataH_Shown[i][5]);
        
        tblHeader.setModel(new javax.swing.table.DefaultTableModel(dataH_Shown,COLUMN_H_SHOWN) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        }); //end tableModel
        
        
    }
    
    private void fillHeaderTbl() {
        int rows=0;
        //check for empty database but do not show any message
        
        if(prH.queryRow("")==0)
            dataH_Shown = new Object[0][COLUMN_H_SHOWN.length];
        else if(cbStoreList.getSelectedIndex()==0){
            
            preStore = "[All Items]";
            
            rows = prH.queryRow("");
            
            rowH_Raw = rows;
            
            dataH_Raw = new Object[rowH_Raw][COLUMN_H_SHOWN.length];
            
            dataH_Raw = prH.queryMulCols(rowH_Raw,new String[]{"PR_No","PR_Date","Store_ID","Supplier_ID","Total_Loose_Qty_Returned","Total_Amt"},"");
        }//end if
        else{//main else
            Object storeId = storeM.queryOneEle(2,"WHERE StoreName = '"+cbStoreList.getSelectedItem()+"'");
            
            rows = prH.queryRow("WHERE Store_ID = '"+storeId+"'");
            
            if(rows>0){
                
                preStore=""+cbStoreList.getSelectedItem();
                
                rowH_Raw=rows;
                
                dataH_Raw = new Object[rowH_Raw][COLUMN_H_SHOWN.length];
                
                dataH_Raw = prH.queryMulCols(rowH_Raw,new String[]{"PR_No","PR_Date","Store_ID","Supplier_ID","Total_Loose_Qty_Returned","Total_Amt"},"WHERE Store_ID = '"+storeId+"'");
            }//end if
            else{
                JOptionPane.showMessageDialog(this,"Sorry: No items were found according to your choice of Store","From the DataBase",JOptionPane.INFORMATION_MESSAGE);
                cbStoreList.setSelectedItem(preStore);
            }//end else
        }//end main else
        
        if(rows>0){
            
            for(int i=0;i<rowH_Raw;i++){
                dataH_Raw[i][2]=""+storeM.queryOneEle("StoreName","WHERE StoreID = '"+dataH_Raw[i][2]+"'");
                dataH_Raw[i][3]=""+supM.queryOneEle("SupName","WHERE SupCode = '"+dataH_Raw[i][3]+"'");
            }
            
            dateConstraint(dataH_Raw,rowH_Raw);
            
            rowH_Shown=rowH_Date;
            
            dataH_Shown = new Object[rowH_Shown][COLUMN_H_SHOWN.length];
            dataH_Shown=dataH_Date;
        }//if
        
        showHeaderTbl();//*/
        
    }
    
    private void updateCode() {
        int ctr = Integer.parseInt(""+semaPhores.queryOneEle(4,"WHERE TableName = 'PurchaseReturns_H'"))+1;
        String ss1 = semaPhores.modifyData(new int[]{4},new Object[]{""+ctr},"WHERE TableName = 'PurchaseReturns_H'");
        
        
        try{
            accessDB();
            stat.executeUpdate(ss1);
            con.close();
        }//end try
        catch(Exception e){
            err.displayError("updateCode",e);
        }//end catch
    }
    
    private void generateCode() {
        int ctr = Integer.parseInt(""+semaPhores.queryOneEle(4,"WHERE TableName = 'PurchaseReturns_H'"));
        String prefix = ""+semaPhores.queryOneEle(3,"WHERE TableName = 'PurchaseReturns_H'");
        if(prefix.equals("null"))
            prefix="";
        txtCode.setText(""+prefix+ctr);
        
    }
    
    private void detailsEditable() {
        cbD_Item.setEnabled(true);
        tblDetails.setEnabled(true);//*/
        
    }
    
    private void detailsUnEditable() {
        cbD_Item.setEnabled(false);
        
        tblDetails.setEnabled(false);//*/
    }
    
    private void headerEditable() {
        cbDO_DD.setEnabled(true);
        cbDO_MM.setEnabled(true);
        cbDO_YY.setEnabled(true);
        cbAddStore.setEnabled(true);
        cbAddSupplier.setEnabled(true);
        cbAuthBy.setEnabled(true);
        cbGRN_No.setEnabled(true);//*/
    }
    
    private void headerUnEditable() {
        cbDO_DD.setEnabled(false);
        cbDO_MM.setEnabled(false);
        cbDO_YY.setEnabled(false);
        cbAddStore.setEnabled(false);
        cbAddSupplier.setEnabled(false);
        cbAuthBy.setEnabled(false);
        cbGRN_No.setEnabled(false);//*/
        
        
    }
    
    private void resetHeader() {
        
        cbAddStore.setEnabled(true);
        cbAddStore.setSelectedIndex(0);
        cbAddSupplier.setEnabled(true);
        cbAddSupplier.setSelectedIndex(0);
        cbGRN_No.setEnabled(true);
        cbGRN_No.setSelectedIndex(0);
        cbAuthBy.setSelectedIndex(0);
        cbDO_DD.setSelectedIndex(curDate.getDate()-1);
        cbDO_MM.setSelectedIndex(curDate.getMonth());
        cbDO_YY.setSelectedIndex( curDate.getYear()-50 );
        txtGRN_Date.setText("[Select a G.R.N. No.]");
        txtTotalLooseQty.setText("0");
        txtNetTotal.setText("0");
        
    }
    
    private void addCancelPressed() {
        txtCode.setText("");
        
        add=false;
        pnlAddHeader.setVisible(false);
        pnlHome.setVisible(true);
    }
    
    private boolean checkHeaderValidation() {
        
        boolean headerIsValid=false;
        
        if(cbAuthBy.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(this,"Select an Item from the Authorised By list.","No Customer selected!",JOptionPane.INFORMATION_MESSAGE);
            headerIsValid=false;
        }//end if
        else
            headerIsValid=true;//*/
        
        return headerIsValid;
        
    }
    
    private boolean checkDetailsValidation() {
        
        boolean detailsAreValid=false;
        
        
        if(cbD_Item.getSelectedIndex()==0){
            detailsAreValid=false;
            JOptionPane.showMessageDialog(this,"Select an item from the Item List.","Error!",JOptionPane.INFORMATION_MESSAGE);
            cbD_Item.requestFocus();
        }
        else{
           if(ret_lsQt==0 && ret_pcQt==0 && ret_blQt==0){
                detailsAreValid=false;
                
                JOptionPane.showMessageDialog(this,"The Loose Qty., Pack Qty., and Bulk Qty. fields cannot be '0' at the same time!","Sorry!",JOptionPane.YES_NO_OPTION);
                txtD_LsQt.setText("0");
                txtD_LsQt.selectAll();
                txtD_LsQt.requestFocus();
            }
            else
                detailsAreValid=true;
        }//end else
        
        return detailsAreValid;
        
    }
    
    private Object[] findValues_D(int rowNo) {
        
        Object[] val = new Object[prD.no_of_cols-1];
        
        //'coz the first value will be DO_No
        
        val[0]=txtCode.getText();
                
        for(int j=0;j<COL_D_SHOWN;j++)
                if(j==1)
                    val[j+1]=itemM.queryOneEle(2,"WHERE itemName = '"+dataD_Shown[rowNo][j]+"'");
                else if(j==4)
                    val[j+1]=curM.queryOneEle(2,"WHERE CM_Name = '"+dataD_Shown[rowNo][j]+"'");
                else
                    val[j+1]=dataD_Shown[rowNo][j];
        
                    val[COL_D_SHOWN+1]="";//remarks
        
        return val;
        
    }
    
    private Object[] findValues_H() {
        Object[] val = new Object[prH.no_of_cols-1];
        
        val[0] = ""+txtCode.getText();
        val[1]=""+cbDO_DD.getSelectedItem()+"/"+cbDO_MM.getSelectedItem()+"/"+cbDO_YY.getSelectedItem();
        val[2]=cbGRN_No.getSelectedItem();
        val[3]=txtGRN_Date.getText();
        val[4]=grnH.queryOneEle("DC_No","WHERE GRN_No = '"+val[2]+"' AND Cancelled = 'N'");
        val[5]=grnH.queryOneEle("PO_No","WHERE GRN_No = '"+val[2]+"' AND Cancelled = 'N'");
        val[6]=authBy.queryOneEle("EmpCode","WHERE EmpName = '"+cbAuthBy.getSelectedItem()+"'");
        val[7]=storeM.queryOneEle(2,"WHERE StoreName = '"+cbAddStore.getSelectedItem()+"'");
        val[8] =supM.queryOneEle("SupCode","WHERE supName = '"+cbAddSupplier.getSelectedItem()+"'");
        
        val[9]=txtTotalLooseQty.getText();
        val[10]=txtNetTotal.getText();
        val[11]="";//remarks
        val[12]="N";//cancelled
        
        return val;
    }
    
    private void fillAmts() {
        //to find the total loose qty. in item level
        long netLoose = ret_lsQt+(ret_pcQt+ret_blQt*packPerBulk)*loosePerPack;
        txtD_TotalLsQty.setText(""+netLoose);
        
        //to find the total amount in item level
        double d_NtPr = ret_lsQt*lsPr + ret_pcQt*pcPr + ret_blQt*blPr;
        txtD_NtPr.setText(""+d_NtPr);
        
        //to find the total amount in sheet level
            double netTotal=0;
            for(int i=0;i<rowD_Shown;i++)
                netTotal+=Double.parseDouble(""+dataD_Total[i][12]);
            txtNetTotal.setText(""+netTotal);
        
        //to find the total loose quantity in sheet level
        long totalLoose=0;
        for(int i=0;i<rowD_Shown;i++)
            try{
                totalLoose+=Long.parseLong(""+dataD_Shown[i][11]);
            }
            catch(Exception e){
                err.displayError("Methd. fillAmts()",e);
            }
        
        txtTotalLooseQty.setText(""+totalLoose);


txtTotalLooseQty.setText(txtD_TotalLsQty.getText());
txtNetTotal.setText(txtD_NtPr.getText());        
        
    }
    
    private void updateDatabase() throws SQLException {
        if(add){
            if(checkHeaderValidation()){
                String[] ssD = new String[rowD_Shown];
                String[] store = new String[rowD_Shown];
                System.out.println("1476");
                for(int i=0;i<rowD_Shown;i++){
                    
                    ssD[i]=""+prD.addDataAllColsBut1st(findValues_D(i));
                    store[i]=updateStoreTbl(i);
                }
                System.out.println("1482");
                String ssH = ""+prH.addDataAllColsBut1st(findValues_H());
                
                
                try{
                    accessDB();
                    //con.setAutoCommit(false);
                    
                    //INSERT DETAILS
                    for(int i=0;i<rowD_Shown;i++){
                        stat.executeUpdate(ssD[i]);
                        stat.executeUpdate(store[i]);
                    }
                    
                    //INSERT HEADER
                    stat.executeUpdate(ssH);
                    
                    add=false;
                    
                    //con.commit();
                    con.close();
                    
                    updateCode();
                    
                }
                catch(java.sql.SQLException e){
                    //con.rollback();
                    //con.setAutoCommit(true);
                    con.close();
                    err.displayError("addSave()",e);
                    
                }//end catch
                
                pnlHome.setVisible(true);
                pnlAddHeader.setVisible(false);
                add=false;
                
                
            }//end if
        }//end if
    }//end updateDatabase
    
    private String updateStoreTbl(int i) {
        
        LinkDB st = new LinkDB(storeTblSpecific);
        String cond = "WHERE ItemNo = '"+itemM.queryOneEle(2,"WHERE itemName = '"+dataD_Shown[i][1]+"'")+"' AND BatchNo ='"+dataD_Shown[i][2]+"'";
        String cond1 = "WHERE DO_No = '"+txtCode.getText()+"' AND Item_Code = '"+itemM.queryOneEle(2,"WHERE ItemName = '"+dataD_Shown[i][1]+"'")+"' AND Batch_No ='"+dataD_Shown[i][2]+"'";
        Object[] val = new Object[2];
        
                     lsQt = Long.parseLong(dataD_Shown[i][5].toString());
                     pcQt = Long.parseLong(dataD_Shown[i][7].toString());
                     blQt = Long.parseLong(dataD_Shown[i][9].toString());
                     int packPerBulk = Integer.parseInt(st.queryOneEle("PackPerBulk",cond).toString());
                     int loosePerPack = Integer.parseInt(st.queryOneEle("LoosePerPack",cond).toString());
                     //the net loose quantity returned in the current transaction
                     long currentReturns = lsQt +(pcQt + blQt*packPerBulk)*loosePerPack;
                     lsQt = 0;
                     pcQt = 0;
                     blQt = 0;      
                     long previousReciepts=0,previousClosingStock=0;
        try{
                previousReciepts=Long.parseLong(st.queryOneEle("Reciepts",cond).toString());
                previousClosingStock=Long.parseLong(st.queryOneEle("ClosingStock",cond).toString());
        }
        catch(Exception e){
        }
        
        
        long newClosingStock=previousClosingStock+currentReturns;
        long newReciepts=previousReciepts+currentReturns;
        
        System.out.println("currentReturns = "+currentReturns +"\n\tpreviousReciepts = "+previousReciepts+"\tpreviousClosingStock = "+previousClosingStock);
        System.out.println("\tnewReciepts = "+newReciepts+"\tnewClosingStock = "+newClosingStock);
        val[0]=Long.toString(newReciepts);
        val[1]=Long.toString(newClosingStock);
        String ss=st.modifyData(new String[]{"Reciepts","ClosingStock"},val,cond);
        
        System.out.println("FROM updateStoreTbl: generated SQL-Statement for updating the table "+storeTblSpecific +" is:\n\t"+ss);
        
        return ss;
        
    }
    
    private void dateConstraint(Object[][] raw, int row) {
        int frDD=Integer.parseInt( cbFrDD.getSelectedItem().toString() );
        int  frMM=Integer.parseInt( cbFrMM.getSelectedItem().toString() )-1;
        int frYY=Integer.parseInt( cbFrYY.getSelectedItem().toString() )-1900;
        
        int toDD=Integer.parseInt( cbToDD.getSelectedItem().toString() );
        int toMM=Integer.parseInt( cbToMM.getSelectedItem().toString() )-1;
        int toYY=Integer.parseInt( cbToYY.getSelectedItem().toString() )-1900;
        
        java.util.Date fromDate = new java.util.Date(frYY,frMM,frDD);
        java.util.Date toDate = new java.util.Date(toYY,toMM,toDD);
        
        rowH_Date=0;
        
        Object temp[][] = new Object[row][COLUMN_H_SHOWN.length];
        for(int i=0;i<row;i++){
            int s[] = new int[3];
            StringTokenizer st = new StringTokenizer(raw[i][1].toString() , "/");
            int k=0;
            while( st.hasMoreTokens() ){
                s[k]=Integer.parseInt( st.nextToken() );
                k++;
            }//end while
            java.util.Date dataDate = new java.util.Date(s[2]-1900,s[1]-1,s[0]);
            
            if(fromDate.compareTo(dataDate)<=0 && toDate.compareTo(dataDate)>=0){//YYif
                for(int j=0;j<COLUMN_H_SHOWN.length;j++){
                    temp[rowH_Date][j]=raw[i][j];
                }
                rowH_Date++;
                
            }//end YYif
            
        }//end for
        
        
        if(rowH_Date==0){
            rangeMatching=false;
            cbFrYY.setSelectedIndex( preFromDate.getYear()-50 );
            cbFrMM.setSelectedIndex(preFromDate.getMonth());
            cbFrDD.setSelectedIndex(preFromDate.getDate()-1);
            cbToYY.setSelectedIndex( preToDate.getYear()-50 );
            cbToMM.setSelectedIndex(preToDate.getMonth());
            cbToDD.setSelectedIndex(preToDate.getDate()-1);
            
            rangeMatching=true;
            
            JOptionPane.showMessageDialog(this,"No items were found corresponding to your date-limit.","Sorry!",JOptionPane.INFORMATION_MESSAGE);
            
        }//*/
        else{
            
            preFromDate=fromDate;
            preToDate=toDate;
            dataH_Date = new Object[rowH_Date][COLUMN_H_SHOWN.length];
            dataH_Date=temp;
        }//end else
        
    }
    
//*/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSave;
    private javax.swing.JTable tblDetails;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JButton btD_SaveEdit;
    private javax.swing.JComboBox cbFrMM;
    private javax.swing.JComboBox cbToDD;
    private javax.swing.JLabel jLabel3611;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JTable tblHeader;
    private javax.swing.JTextField txtD_BlQt;
    private javax.swing.JTextField txtD_SlNo;
    private javax.swing.JButton btExit;
    private javax.swing.JComboBox cbDO_MM;
    private javax.swing.JComboBox cbDO_DD;
    private javax.swing.JComboBox cbSupplierList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jLabel221;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JButton btD_Remove;
    private javax.swing.JButton btD_Edit;
    private javax.swing.JComboBox cbToMM;
    private javax.swing.JTextField txtGRN_Date;
    private javax.swing.JLabel jLabel361;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JTextField txtD_TotalLsQty;
    private javax.swing.JComboBox cbAddSupplier;
    private javax.swing.JTextField txtD_CurName;
    private javax.swing.JComboBox cbToYY;
    private javax.swing.JTextField txtD_PcPr;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JComboBox cbGRN_No;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtNetTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JTextField txtTotalLooseQty;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox cbFrYY;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JButton btD_Add;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtD_NtPr;
    private javax.swing.JTextField txtD_LsPr;
    private javax.swing.JPanel pnlAddHeader;
    private javax.swing.JComboBox cbAddStore;
    private javax.swing.JTextField txtD_PcQt;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btSearch;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JTextField txtD_ExpDate;
    private javax.swing.JComboBox cbAuthBy;
    private javax.swing.JLabel jLabel271;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JComboBox cbStoreList;
    private javax.swing.JComboBox cbDO_YY;
    private javax.swing.JComboBox cbD_Item;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JTextField txtD_BlPr;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JButton btD_Cancel;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtD_LsQt;
    private javax.swing.JComboBox cbFrDD;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JButton btD_Finish;
    // End of variables declaration//GEN-END:variables

    
    //VARIABLE DECLARATION
    
boolean clickH=false,add=false,pnlHeaderShown=false,removeDetails=false, deleteArrayOverflow=false;    
boolean  clickD=false,editPressed=false,rangeMatching=true,loadingCombo=false, delete=false;    
    
Connection con;  

double lsPr=0,pcPr=0,blPr=0;

//to display error
HandleError err = new HandleError();

int rowD_Shown=0,cols=0,deleteNo=0,rowH_Raw=0,rowH_Date=0,rowH_Shown=0;
int selrowD=0,selrowH=0,loosePerPack=0,packPerBulk=0;

final int COL_D_SHOWN=13;

long lsQt=0,pcQt=0,blQt=0,ret_lsQt=0,ret_pcQt=0,ret_blQt=0;
    
java.util.Date curDate= new java.util.Date();   
java.util.Date preFromDate= new java.util.Date(50,0,1);   
java.util.Date preToDate= new java.util.Date(200,11,31);   

//objects 0f class-type LinkDB
    
LinkDB semaPhores = new LinkDB("SemaPhores"), storeM = new LinkDB("StoreMaster");
LinkDB curM = new LinkDB("CurrencyMaster"),grnH = new LinkDB("GRN_M"),grnD = new LinkDB("GRN_D");
LinkDB itemM = new LinkDB("Item_M"),authBy = new LinkDB("EmployeeMaster"),supM = new LinkDB("SupplierMaster");
LinkDB taxM = new LinkDB("TaxMaster"),disM = new LinkDB("DiscountMaster");
LinkDB prH = new LinkDB("PurchaseReturns_H"),prD = new LinkDB("PurchaseReturns_D"),doD = new LinkDB("DO_D");
LinkDB storeSpecific;//the table corresponding to a particular store

Object[][] dataD_Total,dataD_Shown,dataH_Raw,dataH_Date,dataH_Shown;

Statement stat;

String storeTblSpecific="",preStore="[All Items]";

String[] deleteDetails=new String[50],storeDeleted=new String[50];

final String[] COLUMN_H_SHOWN = {"P.R. No."," Date"," Store","Supplier"," Total Items Returned"," Total Amt."};

//to check for valid Integers / Double numbers in txt flds.
TxtFldValidation txtValid = new TxtFldValidation();

    
}

