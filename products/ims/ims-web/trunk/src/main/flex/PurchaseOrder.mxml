<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
    initialize="initData();">

    <mx:Script>
        <![CDATA[
            import mx.managers.PopUpManager;
            import mx.controls.Alert;
            import mx.rpc.remoting.RemoteObject;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;
            import mx.collections.ArrayCollection;
            import mx.events.DataGridEvent;
            import mx.validators.NumberValidator;
            import flash.net.URLRequest;
            
            import com.swayam.ims.webapp.flex.trx.po.ItemEvent;
            import com.swayam.ims.webapp.flex.trx.po.ItemSelectionDialog;
            
            
            [Bindable]
            private var clientArray:Array = new Array();
            
            [Bindable]
            private var itemsArray:ArrayCollection = new ArrayCollection();
            
            private static var saveSuccessUrl:String = "/transactions/purchaseorder.html";
            private static var cancelUrl:String = "/mainMenu.html";
            
            private var itemRO:RemoteObject;
            
            private var purchaseOrderHelperRO:RemoteObject;
            
            private function initData():void {
            
                itemRO = new RemoteObject();
                itemRO.destination = "itemDao";
                itemRO.addEventListener(ResultEvent.RESULT, getItemListResultHandler);
                itemRO.addEventListener(FaultEvent.FAULT, faultHandler);
                
                var partyRO:RemoteObject = new RemoteObject();
                partyRO.destination = "partyDao";
                partyRO.getAll.addEventListener(ResultEvent.RESULT, getPartyListResultHandler);
                partyRO.addEventListener(FaultEvent.FAULT, faultHandler);
                partyRO.getAll();
                
                purchaseOrderHelperRO = new RemoteObject();
                purchaseOrderHelperRO.destination = "purchaseOrderHelper";
//                purchaseOrderHelperRO.addEventListener(ResultEvent.RESULT, getTradeIdResultHandler);
//                purchaseOrderHelperRO.addEventListener(FaultEvent.FAULT, faultHandler);
//                purchaseOrderHelperRO.getNewPurchaseOrderId();
                
//                saveSuccessUrl = Application.application.parameters.saveSuccessUrl;
//                cancelUrl = Application.application.parameters.cancelUrl;
                
            }
            
            private function getItemListResultHandler(event:ResultEvent):void {

            	var item:Object = event.result;
            	var itemId:Number = (Number) (item.id);
            	var itemExists:Boolean = false;
            
            	for each (var itemInArray:Object in itemsArray) {
            		
            		if (itemId == itemInArray.id) {
            			itemExists = true;
            			break;
            		}
            		
            	}
            	
            	if (!itemExists) {

            		purchaseOrderHelperRO.addEventListener(ResultEvent.RESULT, getLotResultHandler);
        			purchaseOrderHelperRO.addEventListener(FaultEvent.FAULT, faultHandler);
        			purchaseOrderHelperRO.getOperation("getLot").send(itemId);
            		
            	}
                
            }
            
            private function getPartyListResultHandler(event:ResultEvent):void {

                var partyTempArray:ArrayCollection = (ArrayCollection)(event.result);
                var count:int = 0;
                
                for each (var party:Object in partyTempArray) {
                    var content:Object = new Object();
                    content["label"] = party.name;
                    content["data"] = party.id;
                    clientArray[count++] = content;
                } 
                
            }
            
            private function getTradeIdResultHandler(event:ResultEvent):void {

                var tradeId:Number = Number(event.result);
            	
                poId.text = String(tradeId);
                
            }
            
            private function getLotResultHandler(event:ResultEvent):void {

                var lot:Object = event.result;
            
	            var content:Object = new Object();
	    		content["id"] = lot.item.id;
	    		content["lotId"] = lot.id;
	    		content["puPrice"] = lot.price;
	    		content["price"] = lot.price;
	        	content["code"] = lot.item.code;
	        	content["name"] = lot.item.name;
	        	content["qty"] = 1;
	    		itemsArray.addItem(content);
	    		
	    		updateTotalPrice();
                
            }

            private function faultHandler (event:FaultEvent):void {
             // Deal with event.fault.faultString, etc.
                Alert.show(event.fault.faultString, 'Error');
            }
            
            private function showAddItemDialog():void {
                // Create a modal TitleWindow container.
                //var itemWindow:IFlexDisplayObject = PopUpManager.createPopUp(this, ItemSelectDialog, true);
            	var itemSelectionPopup:ItemSelectionDialog = ItemSelectionDialog (PopUpManager.createPopUp(this, ItemSelectionDialog, true));
            	PopUpManager.centerPopUp(itemSelectionPopup);
            	itemSelectionPopup.addEventListener(ItemEvent.EVENT_ITEM_ADDED, itemSelected);  
            }

            private function itemSelected(event:ItemEvent):void { 
                var itemId:Number = event.getItemId();
                itemRO.getOperation("get").send(itemId);
            }
             
            private function editQuantity(event:DataGridEvent):void { 
            	
            	// Get the cell editor and cast it to TextInput.
                var qtyText:TextInput = TextInput(event.currentTarget.itemEditorInstance);
                
                // Get the new value from the editor.
                var newVal:String = qtyText.text;
                
                // Get the old value.
                var oldVal:String = event.currentTarget.editedItemRenderer.data[event.dataField]; 
            
            	var intVal:int = int(newVal);
                
            	if (intVal <= 0) {
            		intVal = uint(oldVal);
            	} 
            	
            	qtyText.text = String(intVal);
            	
            	//change the price 
            	itemsArray[event.rowIndex].price = intVal * itemsArray[event.rowIndex].puPrice;
            	
            	updateTotalPrice();
            	
            }
            
            private function updateTotalPrice():void {
            	
            	var totalPrice:int = 0;
            	
            	for each (var itemInArray:Object in itemsArray) {
            		
            		totalPrice += itemInArray.price;
            		
            	}
            	
            	this.totalPrice.text = String(totalPrice);
            	
            }
            
            private function doSave():void {
            	
            	if (client.selectedIndex != -1) {
            		
            		if (itemsArray.length == 0) {
            			
            			Alert.show("Add Items");
            			
            		} else {
            		
            			purchaseOrderHelperRO.addEventListener(ResultEvent.RESULT, getSaveResultHandler);
            			purchaseOrderHelperRO.addEventListener(FaultEvent.FAULT, faultHandler);
            			purchaseOrderHelperRO.getOperation("savePurchaseOrder").send(clientArray[client.selectedIndex].data, 
            					Number(totalPrice.text), 0, itemsArray);
            			
            		}
            	
            	} else {
            	
            		Alert.show("Select the client");
            		
            	}
            	
            }
            
            private function getSaveResultHandler(event:ResultEvent):void {
            	
            	var success:Boolean = Boolean(event.result);
            
            	if (success) {
            		
            		navigateToURL(new URLRequest(saveSuccessUrl), "_self");
            		
            	} else {
            	
            		Alert.show("Sorry, could not save data. Please try again.");
            		
            	}
            	
            }
            
            private function doCancel():void {
            	
            	navigateToURL(new URLRequest(cancelUrl), "_self");
            	
            }
            
        ]]>
    </mx:Script>
    

	<mx:Label x="37" y="68" text="Purchase Order No.:"/>
	<mx:TextInput x="174" y="66" id="poId" editable="false"/>
	
	<!--<mx:Label x="454" y="68" text="Date:"/>-->
	<!--<mx:DateField x="513" y="66" id="poDate"/>-->
	
	<mx:Label x="37" y="130" text="Client:"/>
	<mx:ComboBox x="174" y="128" id="client"  dataProvider="{clientArray}"></mx:ComboBox>
	
	<mx:DataGrid x="37" y="188" id="itemDetails" width="511" height="180" dataProvider="{itemsArray}" 
		editable="true" itemEditEnd="editQuantity(event);">
		<mx:columns>
			<mx:DataGridColumn headerText="Name" dataField="name" editable="false"/>
			<mx:DataGridColumn headerText="Code" dataField="code" editable="false"/>
			<mx:DataGridColumn headerText="PU Price" dataField="puPrice" editable="false"/>
			<mx:DataGridColumn headerText="Qty." dataField="qty" width="50"/>
			<mx:DataGridColumn headerText="Price" dataField="price" editable="false"/>
		</mx:columns>
	</mx:DataGrid>
	
	<mx:Label x="372" y="388" text="Total Price:"/>
	<mx:TextInput x="459" y="386" width="90" id="totalPrice" editable="false"/>
	
	<mx:Button x="556" y="338" label="Add Item" id="addItem" click="showAddItemDialog();"/>
	<mx:Button x="47" y="465" width="80" label="Cancel" id="cancel" click="doCancel();"/>
	<mx:Button x="489" y="465" width="80" label="Save" id="save" click="doSave();"/>
	
</mx:Application>
