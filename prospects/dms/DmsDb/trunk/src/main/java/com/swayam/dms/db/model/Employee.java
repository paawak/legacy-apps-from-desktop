package com.swayam.dms.db.model;

// Generated Jun 14, 2008 12:40:06 PM by Hibernate Tools 3.2.1.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * Employee generated by hbm2java
 */
@Entity
@Table(name = "employee", schema = "public")
public class Employee implements java.io.Serializable {

    private int employeeId;
    private Department department;
    private String address;
    private String firstName;
    private String lastName;
    private String city;
    private int pinCode;
    private String emailId;
    private String homePhone;
    private String handPhone;
    private Date dateOfBirth;
    private Date joinDate;
    private String password;
    private Set<ComplaintHistory> complaintHistories = new HashSet<ComplaintHistory>(
            0);
    private Set<Complaint> complaintsForAssignedTo = new HashSet<Complaint>(0);
    private Set<Complaint> complaintsForLoggedBy = new HashSet<Complaint>(0);

    public Employee() {
    }

    public Employee(int employeeId, Department department, String address,
            String city, int pinCode, String password) {
        this.employeeId = employeeId;
        this.department = department;
        this.address = address;
        this.city = city;
        this.pinCode = pinCode;
        this.password = password;
    }

    public Employee(int employeeId, Department department, String address,
            String firstName, String lastName, String city, int pinCode,
            String emailId, String homePhone, String handPhone,
            Date dateOfBirth, Date joinDate, String password,
            Set<ComplaintHistory> complaintHistories,
            Set<Complaint> complaintsForAssignedTo,
            Set<Complaint> complaintsForLoggedBy) {
        this.employeeId = employeeId;
        this.department = department;
        this.address = address;
        this.firstName = firstName;
        this.lastName = lastName;
        this.city = city;
        this.pinCode = pinCode;
        this.emailId = emailId;
        this.homePhone = homePhone;
        this.handPhone = handPhone;
        this.dateOfBirth = dateOfBirth;
        this.joinDate = joinDate;
        this.password = password;
        this.complaintHistories = complaintHistories;
        this.complaintsForAssignedTo = complaintsForAssignedTo;
        this.complaintsForLoggedBy = complaintsForLoggedBy;
    }

    @Id
    @Column(name = "employee_id", unique = true, nullable = false)
    @GeneratedValue(generator = "sequence")
    @GenericGenerator(name = "sequence", strategy = "sequence", parameters = { @Parameter(name = "sequence", value = "employee_employee_id_seq") })
    public int getEmployeeId() {
        return this.employeeId;
    }

    public void setEmployeeId(int employeeId) {
        this.employeeId = employeeId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "department_id", nullable = false)
    public Department getDepartment() {
        return this.department;
    }

    public void setDepartment(Department department) {
        this.department = department;
    }

    @Column(name = "address", nullable = false)
    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Column(name = "first_name", length = 20)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "last_name", length = 20)
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Column(name = "city", nullable = false, length = 20)
    public String getCity() {
        return this.city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    @Column(name = "pin_code", nullable = false)
    public int getPinCode() {
        return this.pinCode;
    }

    public void setPinCode(int pinCode) {
        this.pinCode = pinCode;
    }

    @Column(name = "email_id", length = 20)
    public String getEmailId() {
        return this.emailId;
    }

    public void setEmailId(String emailId) {
        this.emailId = emailId;
    }

    @Column(name = "home_phone", length = 10)
    public String getHomePhone() {
        return this.homePhone;
    }

    public void setHomePhone(String homePhone) {
        this.homePhone = homePhone;
    }

    @Column(name = "hand_phone", length = 10)
    public String getHandPhone() {
        return this.handPhone;
    }

    public void setHandPhone(String handPhone) {
        this.handPhone = handPhone;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "date_of_birth", length = 4)
    public Date getDateOfBirth() {
        return this.dateOfBirth;
    }

    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "join_date", length = 4)
    public Date getJoinDate() {
        return this.joinDate;
    }

    public void setJoinDate(Date joinDate) {
        this.joinDate = joinDate;
    }

    @Column(name = "password", nullable = false, length = 20)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
    public Set<ComplaintHistory> getComplaintHistories() {
        return this.complaintHistories;
    }

    public void setComplaintHistories(Set<ComplaintHistory> complaintHistories) {
        this.complaintHistories = complaintHistories;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employeeByAssignedTo")
    public Set<Complaint> getComplaintsForAssignedTo() {
        return this.complaintsForAssignedTo;
    }

    public void setComplaintsForAssignedTo(
            Set<Complaint> complaintsForAssignedTo) {
        this.complaintsForAssignedTo = complaintsForAssignedTo;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employeeByLoggedBy")
    public Set<Complaint> getComplaintsForLoggedBy() {
        return this.complaintsForLoggedBy;
    }

    public void setComplaintsForLoggedBy(Set<Complaint> complaintsForLoggedBy) {
        this.complaintsForLoggedBy = complaintsForLoggedBy;
    }

}
